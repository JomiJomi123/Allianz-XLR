---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: ITMP Product/Build and Deploy
spec:
- template: CISL Build and Deploy DEMO
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: CISL Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: "Sprint, master, Release_Candidate"
        value: master
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SKIP_SONAR_BUILD}"
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        inherited: true
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
        inherited: true
      - type: xlrelease.StringVariable
        key: DEPLOY_AFTER_BUILD
        value: "YES"
      createdReleaseId: "${CISLDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/CISL Build
      folder: ITMP Global/Build
    - name: Wait for CISL Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['CISLDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'CISLBuildVersion' in key:
                releaseVariables['CISLVersion'] = myVariables[key]
                print(releaseVariables['CISLVersion'])
    - name: abc
      type: servicenow.CreateChangeRequest
    - name: ch
      type: servicenow.CheckChangeRequest
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: CISL Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: CISLVersion
        requiresValue: false
        value: "${CISLVersion}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        value: Configuration/environmentManagement/Environment1c5267e5b2d143d2b058bb4d2f524b2c
      createdReleaseId: "${CISLDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Product/Deploy/Frontend/Deploy CISL Product
      folder: ITMP Product/Deploy/Frontend
    - name: Wait for CISL Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyDeploymentReleaseId}"
    color: '#FFAB00'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: CISLDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
    value: master
  - type: xlrelease.StringVariable
    key: SKIP_SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: gjhfk9f
  riskProfile: Default risk profile
- template: CISL Build and Deploy DEV
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: CISL Daily Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Daily Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: "Sprint, master, Release_Candidate"
        value: "${GitBranch}"
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SONAR_BUILD}"
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: properties
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
        value: "${SKIP_TEST_COVERAGE_BUILD}"
      createdReleaseId: "${CISLDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/CISL Build
      folder: ITMP Global/Build
    - name: Wait for CISL Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['CISLDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'CISLBuildVersion' in key:
                releaseVariables['CISLVersion'] = myVariables[key]
                print(releaseVariables['CISLVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: CISL Daily Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Daily Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: CISLVersion
        description: You will need to provide both BFF anf FE version - this is a
          jenkins pipeline restriction
        value: "${CISLVersion}"
      - type: xlrelease.StringVariable
        key: STAGE
        inherited: true
      - type: xlrelease.StringVariable
        key: environmentSelect
        value: Configuration/environmentManagement/Environmente3a9cc7771684b2dbb5b09fe890d45a2
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        inherited: true
        value: properties
      createdReleaseId: "${CISLDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      template: Testing/Old Product Templates/Deploy CISL Product
      folder: ITMP Product/Deploy/Frontend
    - name: Wait for CISL Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyDeploymentReleaseId}"
    color: '#FFAB00'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: CISLDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
    value: master
  - type: xlrelease.StringVariable
    key: SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: SKIP_TEST_COVERAGE_BUILD
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: admin
  riskProfile: Default risk profile
- template: CISL Build and Deploy DEV20
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: CISL Daily Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Daily Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: "Sprint, master, Release_Candidate"
        value: "${GitBranch}"
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SKIP_SONAR_BUILD}"
      createdReleaseId: "${CISLDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/CISL Build
      folder: ITMP Global/Build
    - name: Wait for CISL Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['CISLDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'CISLBuildVersion' in key:
                releaseVariables['CISLVersion'] = myVariables[key]
                print(releaseVariables['CISLVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: CISL Daily Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Daily Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: CISLVersion
        requiresValue: false
        value: "${CISLVersion}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: environmentSelect
        value: Configuration/environmentManagement/Environment8a6e9680b37243bfa9a5d61fa243c0fc
      createdReleaseId: "${CISLDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      folder: ITMP Global/Deploy
    - name: Wait for CISL Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyDeploymentReleaseId}"
    color: '#FFAB00'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: CISLDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
    value: Upgrade
  - type: xlrelease.StringVariable
    key: SKIP_SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: gjhfk9f
  riskProfile: Default risk profile
- template: CISL Build and Deploy HOTFIX
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: CISL Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: "Sprint, master, Release_Candidate"
        value: "${GitBranch}"
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SKIP_SONAR_BUILD}"
      createdReleaseId: "${CISLDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/CISL Build
      folder: ITMP Global/Build
    - name: Wait for CISL Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['CISLDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'CISLBuildVersion' in key:
                releaseVariables['CISLVersion'] = myVariables[key]
                print(releaseVariables['CISLVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: CISL Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: CISL Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: CISLVersion
        requiresValue: false
        value: "${CISLVersion}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: environmentSelect
        value: Configuration/environmentManagement/Environmentfd4cc5e9a41544d09848f880c6d5f844
      createdReleaseId: "${CISLDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      folder: ITMP Global/Deploy
    - name: Wait for CISL Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDailyDeploymentReleaseId}"
    color: '#FFAB00'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: CISLDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
  - type: xlrelease.StringVariable
    key: GIT_ABS_BRANCH
  - type: xlrelease.StringVariable
    key: SKIP_SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: gjhfk9f
  riskProfile: Default risk profile
- template: Midcorp-uwwb-fe Build & Deploy DEV
  scheduledStartDate: 2021-04-21T03:30:00Z
  dueDate: 2021-04-21T04:30:00Z
  phases:
  - phase: Build
    tasks:
    - name: Midcorp-uwwb-fe bundle build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: Midcorp-uwwb-fe bundle build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GIT_BRANCH
        value: "${GIT_BRANCH}"
      createdReleaseId: "${uwwbfebuildID}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/MIDCORP-FE Bundle
      folder: ITMP Product/Build and Deploy
    - name: Wait for completion
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${uwwbfebuildID}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['uwwbfebuildID']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'midcorpfeBundleVersion' in key:
                releaseVariables['uwwbfeVersion'] = myVariables[key]
                print(releaseVariables['uwwbfeVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: Midcorp-uwwb-fe Deploy
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: Midcorp-uwwb-fe Deploy
      templateVariables:
      - type: xlrelease.StringVariable
        key: INF
        value: "${INF}"
      - type: xlrelease.StringVariable
        key: Version
        value: "${uwwbfeVersion}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: OE
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: STAGE
        value: dev
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: MPDI-8465
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: AUTO_APPLY
        value: "${AUTO_APPLY}"
      createdReleaseId: "${uwwbfedeployID}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy midcorp-uwwb global
      folder: ITMP Product/Build and Deploy
    - name: Wait for completion
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${uwwbfedeployID}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: uwwbfebuildID
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_BRANCH
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - develop
      - migrationDevelop
    value: migrationDevelop
  - type: xlrelease.StringVariable
    key: INF
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - fe
      - bff
  - type: xlrelease.StringVariable
    key: uwwbfedeployID
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: uwwbfeVersion
    showOnReleaseStart: false
  - type: xlrelease.BooleanVariable
    key: AUTO_APPLY
    description: Auto Apply container environment
    value: true
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: admin
  riskProfile: Default risk profile
- template: PAT-BFF Build and Deploy
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: PAT-BFF Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: PAT-BFF Build
      createdReleaseId: "${PATBFFBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/PAT-BFF Build
      folder: ITMP Global/Build
    - name: Wait for PAT-BFF Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${PATBFFBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['PATBFFBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'patbffBuildVersion' in key:
                releaseVariables['VERSION'] = myVariables[key]
                print(releaseVariables['VERSION'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: PAT-BFF Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: PAT-BFF Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
        value: "${folder.jiraAssignedTeam}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
        value: "${folder.JiraImplementationLayer}"
      - type: xlrelease.StringVariable
        key: VERSION
        value: "${VERSION}"
      - type: xlrelease.StringVariable
        key: OE
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: INF
        value: "${INF}"
      - type: xlrelease.StringVariable
        key: AUTO_APPLY
        value: "${AUTO_APPLY}"
      createdReleaseId: "${patbffDeploymentReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy PAT global
      folder: ITMP Product/Deploy/Frontend
    - name: Wait for PAT-BFF Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${patbffDeploymentReleaseId}"
    color: '#FFAB00'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: VERSION
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: INF
    showOnReleaseStart: false
    value: bff
  - type: xlrelease.BooleanVariable
    key: AUTO_APPLY
    value: true
  - type: xlrelease.StringVariable
    key: PATBFFBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: patbffDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: admin
  riskProfile: Default risk profile
- template: PAT-FE Build and Deploy
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: PAT-FE Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: PAT Build
      createdReleaseId: "${PATFEBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/PAT-FE Build
      folder: ITMP Global/Build
    - name: Wait for PAT-FE Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${PATFEBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['PATFEBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'patfeBuildVersion' in key:
                releaseVariables['VERSION'] = myVariables[key]
                print(releaseVariables['VERSION'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: PAT-FE Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: PAT-FE Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
        value: "${folder.jiraAssignedTeam}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
        value: "${folder.JiraImplementationLayer}"
      - type: xlrelease.StringVariable
        key: VERSION
        value: "${VERSION}"
      - type: xlrelease.StringVariable
        key: OE
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: INF
        value: "${INF}"
      - type: xlrelease.StringVariable
        key: AUTO_APPLY
        value: "${AUTO_APPLY}"
      createdReleaseId: "${patfeDeploymentReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy PAT global
      folder: ITMP Product/Deploy/Frontend
    - name: Wait for PAT-FE Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${patfeDeploymentReleaseId}"
    color: '#FFAB00'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: PATFEBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: patfeDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: VERSION
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: INF
    showOnReleaseStart: false
    value: fe
  - type: xlrelease.BooleanVariable
    key: AUTO_APPLY
    value: true
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: admin
  riskProfile: Default risk profile
- template: RAP Build and Deploy DEMO
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: RAP Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
        value: "${GitBranch}"
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SKIP_SONAR_BUILD}"
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
        value: "${SKIP_TEST_COVERAGE_BUILD}"
      createdReleaseId: "${RAPDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/RAP Build
      folder: ITMP Global/Build
    - name: Wait for RAP Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['RAPDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'RAPBuildVersion' in key:
                releaseVariables['RAPVersion'] = myVariables[key]
                print(releaseVariables['RAPVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: RAP Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: RAPVersion
        requiresValue: false
        value: "${RAPVersion}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        requiresValue: false
        value: Configuration/environmentManagement/Environment1c5267e5b2d143d2b058bb4d2f524b2c
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        value: properties
      createdReleaseId: "${RAPDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Product/Deploy/Frontend/Deploy RAP Product
      folder: ITMP Product/Deploy/Frontend
    - name: Wait for RAP Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyDeploymentReleaseId}"
    color: '#0079BC'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: RAPDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
    value: master
  - type: xlrelease.StringVariable
    key: SKIP_SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: SKIP_TEST_COVERAGE_BUILD
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: gjhfk9f
  riskProfile: Default risk profile
- template: RAP Build and Deploy DEV
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: RAP Daily Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Daily Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
        value: "${GitBranch}"
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SONAR_BUILD}"
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
        value: "${SKIP_TEST_COVERAGE_BUILD}"
      createdReleaseId: "${RAPDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/RAP Build
      folder: ITMP Global/Build
    - name: Wait for RAP Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['RAPDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'RAPBuildVersion' in key:
                releaseVariables['RAPVersion'] = myVariables[key]
                print(releaseVariables['RAPVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: RAP Daily Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Daily Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: RAPVersion
        value: "${RAPVersion}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        value: Configuration/environmentManagement/Environmente3a9cc7771684b2dbb5b09fe890d45a2
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        value: properties
      createdReleaseId: "${RAPDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Product/Deploy/Frontend/Deploy RAP Product
      folder: ITMP Product/Deploy/Frontend
    - name: Wait for RAP Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyDeploymentReleaseId}"
    color: '#0079BC'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: RAPDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
    value: master
  - type: xlrelease.StringVariable
    key: SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: SKIP_TEST_COVERAGE_BUILD
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: admin
  riskProfile: Default risk profile
- template: RAP Build and Deploy DEV20
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: RAP Daily Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Daily Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
        value: "${GitBranch}"
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SKIP_SONAR_BUILD}"
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
        value: "${SKIP_TEST_COVERAGE_BUILD}"
      createdReleaseId: "${RAPDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/RAP Build
      folder: ITMP Global/Build
    - name: Wait for RAP Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['RAPDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'RAPBuildVersion' in key:
                releaseVariables['RAPVersion'] = myVariables[key]
                print(releaseVariables['RAPVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: RAP Daily Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Daily Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: RAPVersion
        requiresValue: false
        value: "${RAPVersion}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        requiresValue: false
        value: Configuration/environmentManagement/Environment8a6e9680b37243bfa9a5d61fa243c0fc
      createdReleaseId: "${RAPDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      folder: ITMP Global/Deploy
    - name: Wait for RAP Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyDeploymentReleaseId}"
    color: '#0079BC'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: RAPDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
    value: Upgrade
  - type: xlrelease.StringVariable
    key: SKIP_SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: SKIP_TEST_COVERAGE_BUILD
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: gjhfk9f
  riskProfile: Default risk profile
- template: RAP Build and Deploy HOTFIX
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: RAP Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
        value: "${GitBranch}"
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "${SKIP_SONAR_BUILD}"
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
        value: "${SKIP_TEST_COVERAGE_BUILD}"
      createdReleaseId: "${RAPDailyBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/RAP Build
      folder: ITMP Global/Build
    - name: Wait for RAP Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['RAPDailyBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'RAPBuildVersion' in key:
                releaseVariables['RAPVersion'] = myVariables[key]
                print(releaseVariables['RAPVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: RAP Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RAP Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: RAPVersion
        requiresValue: false
        value: "${RAPVersion}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        requiresValue: false
        value: Configuration/environmentManagement/Environmentfd4cc5e9a41544d09848f880c6d5f844
      createdReleaseId: "${RAPDailyDeploymentReleaseId}"
      riskProfile: Default risk profile
      folder: ITMP Global/Deploy
    - name: Wait for RAP Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDailyDeploymentReleaseId}"
    color: '#0079BC'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: RAPDailyBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPDailyDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
  - type: xlrelease.StringVariable
    key: GIT_ABS_BRANCH
  - type: xlrelease.StringVariable
    key: SKIP_SONAR_BUILD
    description: Skip Sonar Build ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "NO"
      - "YES"
    value: "NO"
  - type: xlrelease.StringVariable
    key: SKIP_TEST_COVERAGE_BUILD
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: gjhfk9f
  riskProfile: Default risk profile
- template: RSS Build and Deploy
  scheduledStartDate: 2020-06-15T07:00:00Z
  dueDate: 2020-06-15T08:00:00Z
  phases:
  - phase: Build
    tasks:
    - name: RSS Build
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RSS Build
      templateVariables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
        value: "${GitBranch}"
      createdReleaseId: "${RSSBuildReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Global/Build/RSS Build
      folder: ITMP Global/Build
    - name: Wait for RSS Build
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RSSBuildReleaseId}"
    - name: Get Version from Build Release
      type: xlrelease.ScriptTask
      script: |-
        releaseId = releaseVariables['RSSBuildReleaseId']
        myVariables = releaseApi.getVariableValues(releaseId)

        for key in myVariables:
            if 'RSSBuildVersion' in key:
                releaseVariables['RSSVersion'] = myVariables[key]
                print(releaseVariables['RSSVersion'])
    color: '#0079BC'
  - phase: Deploy
    tasks:
    - name: RSS Deployment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: RSS Deployment
      templateVariables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        value: Configuration/environmentManagement/Environmente3a9cc7771684b2dbb5b09fe890d45a2
      - type: xlrelease.StringVariable
        key: version
        value: "${RSSVersion}"
      createdReleaseId: "${RSSDeploymentReleaseId}"
      riskProfile: Default risk profile
      template: ITMP Product/Deploy/Frontend/Deploy RSS Product
      folder: ITMP Product/Deploy/Frontend
    - name: Wait for RSS Deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RSSDeploymentReleaseId}"
    color: '#0079BC'
  tags:
  - builds
  - deployments
  variables:
  - type: xlrelease.StringVariable
    key: RSSVersion
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GitBranch
    value: master
  - type: xlrelease.StringVariable
    key: RSSBuildReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RSSDeploymentReleaseId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: DEPLOY_AFTER_BUILD
    description: Do we want to immediately deploy succesfully builded image into stage
      ?
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - "YES"
      - "NO"
    value: "YES"
  scriptUsername: admin
  riskProfile: Default risk profile
