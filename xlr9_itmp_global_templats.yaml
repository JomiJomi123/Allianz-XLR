---
apiVersion: xl-release/v1
kind: Templates
spec:
- directory: ITMP Global
  children:
  - directory: Deliver
    children:
    - template: Create CRP stage
      scheduledStartDate: 2020-11-13T08:00:00Z
      phases:
      - phase: Create CRP stage
        tasks:
        - name: Create CRP stage
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-Spin-Off/job/CUSTOMER-PROCUREMENT-FRONTEND
          jobParameters: |-
            OE=${OE}
            CLUSTER=${CLUSTER}
            STAGE=${STAGE}
            DEPLOY_CREATE_CRP=true
            DEPLOY_SETUP_CRP=true
            DEPLOY_CREATE_CRP_RL=false
            DEPLOY_SETUP_CRP_RL=false
            DESTROY_ADP_SONARQUBE=false
            FORCE_TO_DELETE=false
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: STAGE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Create_CRP_stage_scriptUserPassword"
      riskProfile: Default risk profile
  - directory: Staging Dashboards (Migrated)
    children:
    - directory: OE Staging Dashboards (Migrated)
      children:
      - template: AAL Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: AAL Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-aal
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.ap2.crp.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - E. AAL Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: E. AAL Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgc
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ec1
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_AAL_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: AGCS Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: AGCS Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-agcs
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - G. AGCS Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: G. AGCS Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgd
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ec1
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_AGCS_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: Asia Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Asia Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-asia
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ase1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ase1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - I. Asia Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: I. Asia Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bge
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ase1
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              requiresValue: false
              inherited: true
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: env7
              requiresValue: false
              inherited: true
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Asia_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: BBVA Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: BBVA Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-iberolatam-va
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - K. BBVA Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: K. BBVA Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgk
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ew3
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              requiresValue: false
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              requiresValue: false
              value: !value "xlrelease_PasswordStringVariable_dbpassword_value"
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
            - type: xlrelease.StringVariable
              key: env7
              requiresValue: false
              inherited: true
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_BBVA_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: France Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: France Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-france
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - L. France Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: L. France Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgi
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ew3
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              value: dbi
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              value: !value "xlrelease_PasswordStringVariable_dbpassword_value_0"
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
            - type: xlrelease.StringVariable
              key: env7
              requiresValue: false
              inherited: true
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_France_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: Germany Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Germany Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-germany
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - H. Germany Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: H. Germany Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgg
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ec1
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Germany_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: GSI Staging Dashboard (draft)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: BBVA Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-iberolatam-bva
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - K. BBVA Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: K. BBVA Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgk
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ew3
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              requiresValue: false
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              requiresValue: false
              value: !value "xlrelease_PasswordStringVariable_dbpassword_value_1"
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
            - type: xlrelease.StringVariable
              key: env7
              requiresValue: false
              inherited: true
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_GSI_Staging_Dashboard__draft__scriptUserPassword"
        riskProfile: Default risk profile
      - template: GSI Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: GSI Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-gsi
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.ap2.crp.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - I. GSI Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: I. GSI Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgc
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ec1
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              requiresValue: false
              inherited: true
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: env7
              requiresValue: false
              inherited: true
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_GSI_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: Iberolatam Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Iberolatam Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-iberolatam
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - C. Iberolatam Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: C. Iberolatam Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bga
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ew3
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              requiresValue: false
              value: bpa
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              requiresValue: false
              value: !value "xlrelease_PasswordStringVariable_dbpassword_value_2"
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
              value: dtbpa91
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
              value: dtbpa93
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
              value: "1000"
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Iberolatam_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: Italy Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Italy Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-italy
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ew3.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - D. Italy Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: D. Italy Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgb
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ew3
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              value: bpb
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              value: !value "xlrelease_PasswordStringVariable_dbpassword_value_3"
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
              value: dtbpb91
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
              value: dtbpb93
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
              value: DPBPB
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
              value: "1000"
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Italy_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
      - template: UK Staging Dashboard (Migrated)
        scheduledStartDate: 2020-11-02T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Trigger Staging Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: UK Staging Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              description: 'name of the project. This is used to create the url. Example:
                itmp-iberolatam, itmp-italy, itmp-aal'
              value: itmp-uk
            - type: xlrelease.StringVariable
              key: cloudUrl
              description: URL used for the specific network. This value will be used
                to create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              description: URL used for the specific network. This value will be used
                to create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
              value: apps.crp.ec1.aws.aztec.cloud.allianz
            - type: xlrelease.StringVariable
              key: spaceKey
              description: Value is used to connect to the correct space in Confluence.
                Default vaue is set on NANCY
              inherited: true
              value: NANCY
            - type: xlrelease.ListStringVariable
              key: pageTitles
              description: Only add the name of the page you want to use as staging
                dashboard
              value:
              - J. UK Staging Dashboard
            - type: xlrelease.StringVariable
              key: newPageTitle
              description: Value should be the same as the name you added to the titles
                list
              value: J. UK Staging Dashboard
            - type: xlrelease.StringVariable
              key: unitName
              description: Name specific to an OE. e.g. bga (for Spain), bgb (for
                Italy), bgc (for Australia).
              value: bgh
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: prod
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              value: ec1
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: hotfix
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbunit
              value: bpb
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
              value: !value "xlrelease_PasswordStringVariable_dbpassword_value_4"
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: dbserver
              requiresValue: false
              value: "1000"
            createdReleaseId: ${sdreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)/OE Staging Dashboards
              (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${sdreleaseid}
        tags:
        - staging dashboard
        variables:
        - type: xlrelease.StringVariable
          key: sdreleaseid
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_UK_Staging_Dashboard__Migrated__scriptUserPassword"
        riskProfile: Default risk profile
    - template: CISL Health Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Preparation
        tasks:
        - name: Prepare variables
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']
            releaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']

            if releaseVariables['projectName'] == 'itmp-aal':
                releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudProdUrl']
        color: '#0079BC'
      - phase: Get Health
        tasks:
        - name: Get ${app} ${env1} keys
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].key
          jsonPathExpression2: $.items[1].key
          jsonPathExpression3: $.items[2].key
          precondition: releaseVariables['env1'] != ''
          failureHandler: |-
            releaseVariables['key10'] = 'Error'
            releaseVariables['key11'] = 'Error'
            releaseVariables['key12'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result3: ${key12}
            pythonScript.result2: ${key11}
            pythonScript.result: ${key10}
        - name: Get ${app} ${env1} values
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].value
          jsonPathExpression2: $.items[1].value
          jsonPathExpression3: $.items[2].value
          precondition: releaseVariables['env1'] != ''
          failureHandler: |-
            releaseVariables['health10'] = 'Error'
            releaseVariables['health11'] = 'Error'
            releaseVariables['health12'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result: ${health10}
            pythonScript.result3: ${health12}
            pythonScript.result2: ${health11}
        - name: Get ${app} ${env2} keys
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].key
          jsonPathExpression2: $.items[1].key
          jsonPathExpression3: $.items[2].key
          precondition: releaseVariables['env2'] != ''
          failureHandler: |-
            releaseVariables['key20'] = 'Error'
            releaseVariables['key21'] = 'Error'
            releaseVariables['key22'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result2: ${key21}
            pythonScript.result: ${key20}
            pythonScript.result3: ${key22}
        - name: Get ${app} ${env2} values
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].value
          jsonPathExpression2: $.items[1].value
          jsonPathExpression3: $.items[2].value
          precondition: releaseVariables['env2'] != ''
          failureHandler: |-
            releaseVariables['health20'] = 'Error'
            releaseVariables['health21'] = 'Error'
            releaseVariables['health22'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result: ${health20}
            pythonScript.result3: ${health22}
            pythonScript.result2: ${health21}
        - name: Get ${app} ${env3} keys
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].key
          jsonPathExpression2: $.items[1].key
          jsonPathExpression3: $.items[2].key
          precondition: releaseVariables['env3'] != ''
          failureHandler: |-
            releaseVariables['key30'] = 'Error'
            releaseVariables['key31'] = 'Error'
            releaseVariables['key32'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result3: ${key32}
            pythonScript.result2: ${key31}
            pythonScript.result: ${key30}
        - name: Get ${app} ${env3} values
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].value
          jsonPathExpression2: $.items[1].value
          jsonPathExpression3: $.items[2].value
          precondition: releaseVariables['env3'] != ''
          failureHandler: |-
            releaseVariables['health30'] = 'Error'
            releaseVariables['health31'] = 'Error'
            releaseVariables['health32'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result2: ${health31}
            pythonScript.result: ${health30}
            pythonScript.result3: ${health32}
        - name: Get ${app} ${env4} keys
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env4}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].key
          jsonPathExpression2: $.items[1].key
          jsonPathExpression3: $.items[2].key
          precondition: releaseVariables['env4'] != ''
          failureHandler: |-
            releaseVariables['key40'] = 'Error'
            releaseVariables['key41'] = 'Error'
            releaseVariables['key42'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result3: ${key42}
            pythonScript.result: ${key40}
            pythonScript.result2: ${key41}
        - name: Get ${app} ${env4} values
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env4}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].value
          jsonPathExpression2: $.items[1].value
          jsonPathExpression3: $.items[2].value
          precondition: releaseVariables['env4'] != ''
          failureHandler: |-
            releaseVariables['health40'] = 'Error'
            releaseVariables['health41'] = 'Error'
            releaseVariables['health42'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result3: ${health42}
            pythonScript.result2: ${health41}
            pythonScript.result: ${health40}
        - name: Get ${app} ${env5} keys
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env5}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].key
          jsonPathExpression2: $.items[1].key
          jsonPathExpression3: $.items[2].key
          precondition: releaseVariables['env5'] != ''
          failureHandler: |-
            releaseVariables['key50'] = 'Error'
            releaseVariables['key51'] = 'Error'
            releaseVariables['key52'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result3: ${key52}
            pythonScript.result2: ${key51}
            pythonScript.result: ${key50}
        - name: Get ${app} ${env5} values
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env5}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].value
          jsonPathExpression2: $.items[1].value
          jsonPathExpression3: $.items[2].value
          precondition: releaseVariables['env5'] != ''
          failureHandler: |-
            releaseVariables['health50'] = 'Error'
            releaseVariables['health51'] = 'Error'
            releaseVariables['health52'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result: ${health50}
            pythonScript.result3: ${health52}
            pythonScript.result2: ${health51}
        - name: Get ${app} ${env6} keys
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].key
          jsonPathExpression2: $.items[1].key
          jsonPathExpression3: $.items[2].key
          precondition: releaseVariables['env6'] != ''
          failureHandler: |-
            releaseVariables['key60'] = 'Error'
            releaseVariables['key61'] = 'Error'
            releaseVariables['key62'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result2: ${key61}
            pythonScript.result: ${key60}
            pythonScript.result3: ${key62}
        - name: Get ${app} ${env6} values
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].value
          jsonPathExpression2: $.items[1].value
          jsonPathExpression3: $.items[2].value
          precondition: releaseVariables['env6'] != ''
          failureHandler: |-
            releaseVariables['health60'] = 'Error'
            releaseVariables['health61'] = 'Error'
            releaseVariables['health62'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result: ${health60}
            pythonScript.result3: ${health62}
            pythonScript.result2: ${health61}
        - name: Get ${app} ${env7} keys
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].key
          jsonPathExpression2: $.items[1].key
          jsonPathExpression3: $.items[2].key
          precondition: releaseVariables['env7'] != ''
          failureHandler: |-
            releaseVariables['key70'] = 'Error'
            releaseVariables['key71'] = 'Error'
            releaseVariables['key72'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result3: ${key72}
            pythonScript.result2: ${key71}
            pythonScript.result: ${key70}
        - name: Get ${app} ${env7} values
          type: webhook.JsonWebhook
          URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/services/healthChecks
          proxyHost: proxy.ec1.aws.aztec.cloud.allianz
          proxyPort: "8888"
          jsonPathExpression: $.items[0].value
          jsonPathExpression2: $.items[1].value
          jsonPathExpression3: $.items[2].value
          precondition: releaseVariables['env7'] != ''
          failureHandler: |-
            releaseVariables['health70'] = 'Error'
            releaseVariables['health71'] = 'Error'
            releaseVariables['health72'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.result2: ${health71}
            pythonScript.result: ${health70}
            pythonScript.result3: ${health72}
        - name: Wait
          type: xlrelease.ScriptTask
          script: |-
            import time
            time.sleep(5)
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${app}</td>'\nvarEnd = '</tr>'\n\
            varRow = varStart\n\nif releaseVariables['env1'] != '':\n    varRow =\
            \ varRow + '<td><ul><li>${key10}: ${health10}</li><li>${key11}: ${health11}</li><li>${key12}:\
            \ ${health12}</li></ul></td>'\n    \nif releaseVariables['env2'] != '':\n\
            \    varRow = varRow + '<td><ul><li>${key20}: ${health20}</li><li>${key21}:\
            \ ${health21}</li><li>${key22}: ${health22}</li></ul></td>'\n    \nif\
            \ releaseVariables['env3'] != '':\n    varRow = varRow + '<td><ul><li>${key30}:\
            \ ' + releaseVariables['health30'] + '</li><li>${key31}: ' + releaseVariables['health31']\
            \ + '</li><li>${key32}: ' + releaseVariables['health32'] + '</li></ul></td>'\n\
            \    \nif releaseVariables['env4'] != '':\n    varRow = varRow + '<td><ul><li>${key40}:\
            \ ' + releaseVariables['health40'] + '</li><li>${key41}: ' + releaseVariables['health41']\
            \ + '</li><li>${key42}: ' + releaseVariables['health42'] + '</li></ul></td>'\n\
            \    \nif releaseVariables['env5'] != '':\n    varRow = varRow + '<td><ul><li>${key50}:\
            \ ' + releaseVariables['health50'] + '</li><li>${key51}: ' + releaseVariables['health51']\
            \ + '</li><li>${key52}: ' + releaseVariables['health52'] + '</li></ul></td>'\n\
            \nif releaseVariables['env6'] != '':\n    varRow = varRow + '<td><ul><li>${key60}:\
            \ ${health60}</li><li>${key61}: ${health61}</li><li>${key62}: ${health62}</li></ul></td>'\n\
            \    \nif releaseVariables['env7'] != '':\n    varRow = varRow + '<td><ul><li>${key70}:\
            \ ${health70}</li><li>${key71}: ${health71}</li><li>${key72}: ${health72}</li></ul></td>'\n\
            \    \nvarRow = varRow + varEnd\n\nreleaseVariables['appRow'] = varRow\n\
            print(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: app
        requiresValue: false
        showOnReleaseStart: false
        value: cisl
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrl
      - type: xlrelease.StringVariable
        key: cloudProdUrl
      - type: xlrelease.StringVariable
        key: unitName
      - type: xlrelease.StringVariable
        key: cislPreprod
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv4
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv5
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key11
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key10
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key12
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health10
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health11
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health12
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key20
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key21
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key22
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health20
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health21
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health22
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key30
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key31
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key32
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health30
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health31
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health32
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key40
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key41
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key42
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health40
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health41
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health42
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key50
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key51
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key52
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health50
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health51
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health52
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key60
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key61
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key62
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health60
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health61
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health62
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: key70
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key71
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: key72
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health70
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health71
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: health72
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_CISL_Health_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: CISL Staging Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Preparation
        tasks:
        - name: Prepare variables
          type: xlrelease.ScriptTask
          script: "releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']\r\
            \nreleaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']\r\
            \n\r\nif releaseVariables['projectName'] == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4']\
            \ = releaseVariables['cloudProdUrl']"
        color: '#0079BC'
      - phase: Get Versions EC1 and EW3
        tasks:
        - name: Get Versions EC1 and EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ec1' or releaseVariables['cluster']
            == 'ew3'
          tasks:
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionEnv1'] = 'Error'
              releaseVariables['extensionEnv1'] = 'Error'
              releaseVariables['cislEnv1'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result2: ${extensionEnv1}
              pythonScript.result: ${versionEnv1}
              pythonScript.result3: ${cislEnv1}
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['absEnv1'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv1}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionEnv2'] = 'Error'
              releaseVariables['extensionEnv2'] = 'Error'
              releaseVariables['cislEnv2'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result2: ${extensionEnv2}
              pythonScript.result: ${versionEnv2}
              pythonScript.result3: ${cislEnv2}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['absEnv2'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv2}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionEnv3'] = 'Error'
              releaseVariables['extensionEnv3'] = 'Error'
              releaseVariables['cislEnv3'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv3}
              pythonScript.result3: ${cislEnv3}
              pythonScript.result2: ${extensionEnv3}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['absEnv3'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv3}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionEnv4'] = 'Error'
              releaseVariables['extensionEnv4'] = 'Error'
              releaseVariables['cislEnv4'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv4}
              pythonScript.result3: ${cislEnv4}
              pythonScript.result2: ${extensionEnv4}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['absEnv4'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv4}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionEnv5'] = 'Error'
              releaseVariables['extensionEnv5'] = 'Error'
              releaseVariables['cislEnv5'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv5}
              pythonScript.result3: ${cislEnv5}
              pythonScript.result2: ${extensionEnv5}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['absEnv5'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv5}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionEnv6'] = 'Error'
              releaseVariables['extensionEnv6'] = 'Error'
              releaseVariables['cislEnv6'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv6}
              pythonScript.result3: ${cislEnv6}
              pythonScript.result2: ${extensionEnv6}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['absEnv6'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv6}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['absEnv7'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv7}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionEnv7'] = 'Error'
              releaseVariables['extensionEnv7'] = 'Error'
              releaseVariables['cislEnv7'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv7}
              pythonScript.result3: ${cislEnv7}
              pythonScript.result2: ${extensionEnv7}
          - name: Wait
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Get Versions ASE1
        tasks:
        - name: Get Versions ASE1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ase1'
          tasks:
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionEnv1'] = 'Error'
              releaseVariables['extensionEnv1'] = 'Error'
              releaseVariables['cislEnv1'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result2: ${extensionEnv1}
              pythonScript.result: ${versionEnv1}
              pythonScript.result3: ${cislEnv1}
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['absEnv1'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv1}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionEnv2'] = 'Error'
              releaseVariables['extensionEnv2'] = 'Error'
              releaseVariables['cislEnv2'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result2: ${extensionEnv2}
              pythonScript.result: ${versionEnv2}
              pythonScript.result3: ${cislEnv2}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['absEnv2'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv2}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionEnv3'] = 'Error'
              releaseVariables['extensionEnv3'] = 'Error'
              releaseVariables['cislEnv3'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv3}
              pythonScript.result3: ${cislEnv3}
              pythonScript.result2: ${extensionEnv3}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['absEnv3'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv3}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionEnv4'] = 'Error'
              releaseVariables['extensionEnv4'] = 'Error'
              releaseVariables['cislEnv4'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv4}
              pythonScript.result3: ${cislEnv4}
              pythonScript.result2: ${extensionEnv4}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['absEnv4'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv4}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionEnv5'] = 'Error'
              releaseVariables['extensionEnv5'] = 'Error'
              releaseVariables['cislEnv5'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv5}
              pythonScript.result3: ${cislEnv5}
              pythonScript.result2: ${extensionEnv5}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['absEnv5'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv5}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionEnv6'] = 'Error'
              releaseVariables['extensionEnv6'] = 'Error'
              releaseVariables['cislEnv6'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv6}
              pythonScript.result3: ${cislEnv6}
              pythonScript.result2: ${extensionEnv6}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['absEnv6'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv6}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.applicationBuildNumber
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['absEnv7'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${absEnv7}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${unitName}.allianz.abs.cisl.adapter/${extension}
            jsonPathExpression: $.items[4].value
            jsonPathExpression2: $.extensions[0].value
            jsonPathExpression3: $.cislVersion
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionEnv7'] = 'Error'
              releaseVariables['extensionEnv7'] = 'Error'
              releaseVariables['cislEnv7'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv7}
              pythonScript.result3: ${cislEnv7}
              pythonScript.result2: ${extensionEnv7}
          - name: Wait
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${app}</td>'\r\nvarEnd = '</tr>'\r\
            \nvarRow = varStart\r\n\r\nif releaseVariables['env1'] != '':\r\n    varRow\
            \ = varRow + '<td><ul><li>build version: ${versionEnv1}</li><li>itmp extension:\
            \ ${extensionEnv1}</li><li>CISL Version: ${cislEnv1}</li><li>ABS build:\
            \ ${absEnv1}</li></ul></td>'\r\n    \r\nif releaseVariables['env2'] !=\
            \ '':\r\n    varRow = varRow + '<td><ul><li>build version: ${versionEnv2}</li><li>itmp\
            \ extension: ${extensionEnv2}</li><li>CISL Version: ${cislEnv2}</li><li>ABS\
            \ build: ${absEnv2}</li></ul></td>'\r\n    \r\nif releaseVariables['env3']\
            \ != '':\r\n    varRow = varRow + '<td><ul><li>build version: ${versionEnv3}</li><li>itmp\
            \ extension: ${extensionEnv3}</li><li>CISL Version: ${cislEnv3}</li><li>ABS\
            \ build: ${absEnv3}</li></ul></td>'\r\n    \r\nif releaseVariables['env4']\
            \ != '':\r\n    varRow = varRow + '<td><ul><li>build version: ${versionEnv4}</li><li>itmp\
            \ extension: ${extensionEnv4}</li><li>CISL Version: ${cislEnv4}</li><li>ABS\
            \ build: ${absEnv4}</li></ul></td>'\r\n    \r\nif releaseVariables['env5']\
            \ != '':\r\n    varRow = varRow + '<td><ul><li>build version: ${versionEnv5}</li><li>itmp\
            \ extension: ${extensionEnv5}</li><li>CISL Version: ${cislEnv5}</li><li>ABS\
            \ build: ${absEnv5}</li></ul></td>'\r\n\r\nif releaseVariables['env6']\
            \ != '':\r\n    varRow = varRow + '<td><ul><li>build version: ${versionEnv6}</li><li>itmp\
            \ extension: ${extensionEnv6}</li><li>CISL Version: ${cislEnv6}</li><li>ABS\
            \ build: ${absEnv6}</li></ul></td>'\r\n    \r\nif releaseVariables['env7']\
            \ != '':\r\n    varRow = varRow + '<td><ul><li>build version: ${versionEnv7}</li><li>itmp\
            \ extension: ${extensionEnv7}</li><li>CISL Version: ${cislEnv7}</li><li>ABS\
            \ build: ${absEnv7}</li></ul></td>'\r\n    \r\nvarRow = varRow + varEnd\r\
            \n\r\nreleaseVariables['appRow'] = varRow\r\nprint(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: app
        requiresValue: false
        showOnReleaseStart: false
        value: cisl
      - type: xlrelease.StringVariable
        key: extension
        requiresValue: false
        showOnReleaseStart: false
        value: services/info
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrl
      - type: xlrelease.StringVariable
        key: cloudProdUrl
      - type: xlrelease.StringVariable
        key: unitName
      - type: xlrelease.StringVariable
        key: cislPreprod
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: extensionEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: extensionEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: extensionEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: extensionEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: extensionEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv4
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv5
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: extensionEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: absEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: absEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: absEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: absEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: absEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: absEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: absEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: versionEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: extensionEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_CISL_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: DB Asset Staging Dashboard
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Get Information ${db}
        tasks:
        - name: ${db}
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['db'] != ''
          tasks:
          - name: Get Information ${db}
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Get Information ${db}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db
              value: ${db}
            createdReleaseId: ${releaseId}
            riskProfile: Default risk profile
            template: DBA/Ajai/Populate_DB_dashboard_confluence
            folder: DBA/Ajai
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId}
          - name: Get Variables
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseId']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'output_confluence' in key:
                      releaseVariables['output'] = myVariables[key]
                      print(releaseVariables['output'])
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: db
      - type: xlrelease.StringVariable
        key: releaseId
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_DB_Asset_Staging_Dashboard_scriptUserPassword"
      riskProfile: Default risk profile
    - template: DB Staging Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Get Information ${db1}
        tasks:
        - name: ${db1}
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['db1'] != ''
          tasks:
          - name: Get Information ${db1}
            type: xlrelease.CreateReleaseTask
            variableMapping:
              templateVariables[2].value: ${dbpassword}
            newReleaseTitle: Get Information ${db1}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db
              value: ${db1}
            - type: xlrelease.StringVariable
              key: DBUnit
              value: ${DBUnit}
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            - type: xlrelease.StringVariable
              key: server
              value: ${server}
            createdReleaseId: ${releaseid1}
            riskProfile: Default risk profile
            template: DBA/Ajai/Batch Dashboard OE (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseid1}
          - name: Get Variables
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseid1']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'output' in key:
                      releaseVariables['values1'] = myVariables[key]
                      print(releaseVariables['values1'])
        color: '#0079BC'
      - phase: Get Information ${db2}
        tasks:
        - name: ${db2}
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['db2'] != ''
          tasks:
          - name: Get Information ${db2}
            type: xlrelease.CreateReleaseTask
            variableMapping:
              templateVariables[2].value: ${dbpassword}
            newReleaseTitle: Get Information ${db2}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db
              value: ${db2}
            - type: xlrelease.StringVariable
              key: DBUnit
              value: ${DBUnit}
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            - type: xlrelease.StringVariable
              key: server
              value: ${server}
            createdReleaseId: ${releaseid2}
            riskProfile: Default risk profile
            template: DBA/Ajai/Batch Dashboard OE (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseid2}
          - name: Get Variables
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseid2']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'output' in key:
                      releaseVariables['values2'] = myVariables[key]
                      print(releaseVariables['values2'])
        color: '#0079BC'
      - phase: Get Information ${db3}
        tasks:
        - name: ${db3}
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['db3'] != ''
          tasks:
          - name: Get Information ${db3}
            type: xlrelease.CreateReleaseTask
            variableMapping:
              templateVariables[2].value: ${dbpassword}
            newReleaseTitle: Get Information ${db3}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db
              value: ${db3}
            - type: xlrelease.StringVariable
              key: DBUnit
              value: ${DBUnit}
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            - type: xlrelease.StringVariable
              key: server
              value: ${server}
            createdReleaseId: ${releaseid3}
            riskProfile: Default risk profile
            template: DBA/Ajai/Batch Dashboard OE (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseid3}
          - name: Get Variables
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseid3']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'output' in key:
                      releaseVariables['values3'] = myVariables[key]
                      print(releaseVariables['values3'])
        color: '#0079BC'
      - phase: Get Information ${db4}
        tasks:
        - name: ${db4}
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['db4'] != ''
          tasks:
          - name: Get Information ${db4}
            type: xlrelease.CreateReleaseTask
            variableMapping:
              templateVariables[2].value: ${dbpassword}
            newReleaseTitle: Get Information ${db4}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db
              value: ${db4}
            - type: xlrelease.StringVariable
              key: DBUnit
              value: ${DBUnit}
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            - type: xlrelease.StringVariable
              key: server
              value: ${server}
            createdReleaseId: ${releaseid4}
            riskProfile: Default risk profile
            template: DBA/Ajai/Batch Dashboard OE (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseid4}
          - name: Get Variables
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseid4']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'output' in key:
                      releaseVariables['values4'] = myVariables[key]
                      print(releaseVariables['values4'])
        color: '#0079BC'
      - phase: Get Information ${db5}
        tasks:
        - name: ${db5}
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['db5'] != ''
          tasks:
          - name: Get Information ${db5}
            type: xlrelease.CreateReleaseTask
            variableMapping:
              templateVariables[2].value: ${dbpassword}
            newReleaseTitle: Get Information ${db5}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db
              value: ${db5}
            - type: xlrelease.StringVariable
              key: DBUnit
              value: ${DBUnit}
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            - type: xlrelease.StringVariable
              key: server
              value: ${server}
            createdReleaseId: ${releaseid5}
            riskProfile: Default risk profile
            template: DBA/Ajai/Batch Dashboard OE (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseid5}
          - name: Get Variables
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseid5']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'output' in key:
                      releaseVariables['values5'] = myVariables[key]
                      print(releaseVariables['values5'])
        color: '#0079BC'
      - phase: Get Information ${db6}
        tasks:
        - name: ${db6}
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['db6'] != ''
          tasks:
          - name: Get Information ${db6}
            type: xlrelease.CreateReleaseTask
            variableMapping:
              templateVariables[2].value: ${dbpassword}
            newReleaseTitle: Get Information ${db6}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db
              value: ${db6}
            - type: xlrelease.StringVariable
              key: DBUnit
              value: ${DBUnit}
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            - type: xlrelease.StringVariable
              key: server
              value: ${server}
            createdReleaseId: ${releaseid6}
            riskProfile: Default risk profile
            template: DBA/Ajai/Batch Dashboard OE (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseid6}
          - name: Get Variables
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseid6']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'output' in key:
                      releaseVariables['values6'] = myVariables[key]
                      print(releaseVariables['values6'])
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">db</td>'\r\nvarEnd = '</tr>'\r\
            \nvarRow = varStart\r\n\r\nif releaseVariables['db1'] != '':\r\n    values\
            \ = releaseVariables['values1']\r\n    varRow = varRow + '<td colspan=\"\
            1\"><ul><li>db: ${db1}</li><li>ipp: ' + values.split(',')[0] + '</li><li>dct:\
            \ ' + values.split(',')[2] + '</li><li>gfb: ' + values.split(',')[1] +\
            \ '</li><li>dc: ' + values.split(',')[3] + '</li><li>rl: ' + values.split(',')[4]\
            \ + '</li><li>dd version: ' + values.split(',')[5] + '</li></ul></td>'\r\
            \nelse:\r\n    varRow = varRow + '<td colspan=\"1\">N/A</td>'\r\n    \r\
            \nif releaseVariables['db2'] != '':\r\n    values = releaseVariables['values2']\r\
            \n    varRow = varRow + '<td colspan=\"1\"><ul><li>db: ${db2}</li><li>ipp:\
            \ ' + values.split(',')[0] + '</li><li>dct: ' + values.split(',')[2] +\
            \ '</li><li>gfb: ' + values.split(',')[1] + '</li><li>dc: ' + values.split(',')[3]\
            \ + '</li><li>rl: ' + values.split(',')[4] + '</li><li>dd version: ' +\
            \ values.split(',')[5] + '</li></ul></td>'\r\nelse:\r\n    varRow = varRow\
            \ + '<td colspan=\"1\">N/A</td>'\r\n    \r\n\r\nif releaseVariables['db3']\
            \ != '':\r\n    values = releaseVariables['values3']\r\n    varRow = varRow\
            \ + '<td colspan=\"1\"><ul><li>db: ${db3}</li><li>ipp: ' + values.split(',')[0]\
            \ + '</li><li>dct: ' + values.split(',')[2] + '</li><li>gfb: ' + values.split(',')[1]\
            \ + '</li><li>dc: ' + values.split(',')[3] + '</li><li>rl: ' + values.split(',')[4]\
            \ + '</li><li>dd version: ' + values.split(',')[5] + '</li></ul></td>'\r\
            \nelse:\r\n    varRow = varRow + '<td colspan=\"1\">N/A</td>'\r\n    \r\
            \n\r\nif releaseVariables['db4'] != '':\r\n    values = releaseVariables['values4']\r\
            \n    varRow = varRow + '<td colspan=\"1\"><ul><li>db: ${db4}</li><li>ipp:\
            \ ' + values.split(',')[0] + '</li><li>dct: ' + values.split(',')[2] +\
            \ '</li><li>gfb: ' + values.split(',')[1] + '</li><li>dc: ' + values.split(',')[3]\
            \ + '</li><li>rl: ' + values.split(',')[4] + '</li><li>dd version: ' +\
            \ values.split(',')[5] + '</li></ul></td>'\r\nelse:\r\n    varRow = varRow\
            \ + '<td colspan=\"1\">N/A</td>'\r\n    \r\n\r\nif releaseVariables['db5']\
            \ != '':\r\n    values = releaseVariables['values5']\r\n    varRow = varRow\
            \ + '<td colspan=\"1\"><ul><li>db: ${db5}</li><li>ipp: ' + values.split(',')[0]\
            \ + '</li><li>dct: ' + values.split(',')[2] + '</li><li>gfb: ' + values.split(',')[1]\
            \ + '</li><li>dc: ' + values.split(',')[3] + '</li><li>rl: ' + values.split(',')[4]\
            \ + '</li><li>dd version: ' + values.split(',')[5] + '</li></ul></td>'\r\
            \nelse:\r\n    varRow = varRow + '<td colspan=\"1\">N/A</td>'\r\n\r\n\r\
            \nif releaseVariables['db6'] != '':\r\n    values = releaseVariables['values6']\r\
            \n    varRow = varRow + '<td colspan=\"1\"><ul><li>db: ${db6}</li><li>ipp:\
            \ ' + values.split(',')[0] + '</li><li>dct: ' + values.split(',')[2] +\
            \ '</li><li>gfb: ' + values.split(',')[1] + '</li><li>dc: ' + values.split(',')[3]\
            \ + '</li><li>rl: ' + values.split(',')[4] + '</li><li>dd version: ' +\
            \ values.split(',')[5] + '</li></ul></td>'\r\nelse:\r\n    varRow = varRow\
            \ + '<td colspan=\"1\">N/A</td>'\r\n    \r\nvarRow = varRow + varEnd\r\
            \n\r\nreleaseVariables['appRow'] = varRow\r\nprint(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: app
        requiresValue: false
        showOnReleaseStart: false
        value: db
      - type: xlrelease.StringVariable
        key: db1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: releaseid1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseid2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseid3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseid4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseid5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseid6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: values1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: values2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: values3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: values4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: values5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: values6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: DBUnit
      - type: xlrelease.PasswordStringVariable
        key: dbpassword
        requiresValue: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.StringVariable
        key: server
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_DB_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: GDF BFF Asset Staging Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Get Versions EC1 and EW3
        tasks:
        - name: EC1 and EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ec1' or releaseVariables['cluster']
            == 'ew3'
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['app1'] = ''\r\nif releaseVariables['projectName']\
              \ == 'itmp-iberolatam':\r\n    if releaseVariables['app'] != 'claims-handler-bff':\r\
              \n\t    releaseVariables['app1'] = '/' + releaseVariables['app']\r\n\
              \t\t\r\nreleaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']\r\
              \nreleaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']\r\
              \n\r\nif releaseVariables['projectName'] == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudProdUrl']"
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionEnv1'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv1}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionEnv2'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv2}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionEnv3'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv3}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionEnv4'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv4}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionEnv5'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv5}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionEnv6'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv6}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/${extension}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionEnv7'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv7}
          - name: Sleep
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Get Versions ASE1
        tasks:
        - name: EC1 and EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ase1'
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['app1'] = ''\r\nif releaseVariables['projectName']\
              \ == 'itmp-iberolatam':\r\n    if releaseVariables['app'] != 'claims-handler-bff':\r\
              \n\t    releaseVariables['app1'] = '/' + releaseVariables['app']\r\n\
              \t\t\r\nreleaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']\r\
              \nreleaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']\r\
              \n\r\nif releaseVariables['projectName'] == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudProdUrl']"
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/${extension}
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionEnv1'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv1}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/${extension}
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionEnv2'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv2}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/${extension}
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionEnv3'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv3}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/${extension}
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionEnv4'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv4}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/${extension}
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionEnv5'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv5}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/${extension}
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionEnv6'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv6}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/${extension}
            jsonPathExpression: ${lookupValue}
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionEnv7'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv7}
          - name: Sleep
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${app}</td>'\nvarEnd = '</tr>'\n\
            varRow = varStart\n\nif releaseVariables['env1'] != '':\n    varRow =\
            \ varRow + '<td colspan=\"1\">' + releaseVariables['versionEnv1'] + '</td>'\n\
            \    \nif releaseVariables['env2'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\">' + releaseVariables['versionEnv2'] + '</td>'\n    \n\
            if releaseVariables['env3'] != '':\n    varRow = varRow + '<td colspan=\"\
            1\">' + releaseVariables['versionEnv3'] + '</td>'\n    \nif releaseVariables['env4']\
            \ != '':\n    varRow = varRow + '<td colspan=\"1\">' + releaseVariables['versionEnv4']\
            \ + '</td>'\n    \nif releaseVariables['env5'] != '':\n    varRow = varRow\
            \ + '<td colspan=\"1\">' + releaseVariables['versionEnv5'] + '</td>'\n\
            \    \nif releaseVariables['env6'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\">' + releaseVariables['versionEnv6'] + '</td>'\n    \n\
            if releaseVariables['env7'] != '':\n    varRow = varRow + '<td colspan=\"\
            1\">' + releaseVariables['versionEnv7'] + '</td>'\n    \nvarRow = varRow\
            \ + varEnd\n\nreleaseVariables['appRow'] = varRow\nprint(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: app
      - type: xlrelease.StringVariable
        key: extension
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: outputStage1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrl
      - type: xlrelease.StringVariable
        key: cloudProdUrl
      - type: xlrelease.StringVariable
        key: app1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: lookupValue
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv4
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: versionEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv5
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_GDF_BFF_Asset_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: GDF FE Asset Staging Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Token
        tasks:
        - name: Get Token
          type: xlrelease.ScriptTask
          script: "if releaseVariables['cluster'] == 'ec1':\n    releaseVariables['token']\
            \ = '${global.ec1token}'\n    print('set ec1 token')\n\nif releaseVariables['cluster']\
            \ == 'ew3':\n    releaseVariables['token'] = '${global.ew3token}'\n  \
            \  print('set ew3 token')\n    \nif releaseVariables['cluster'] == 'ase1':\n\
            \    releaseVariables['token'] = '${global.ase1token}'\n    print('set\
            \ ase1 token')"
        color: '#0079BC'
      - phase: Get Versions EC1
        tasks:
        - name: EC1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ec1'
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['app1'] = ''\r\nif releaseVariables['projectName']\
              \ == 'itmp-iberolatam' or releaseVariables['projectName'] == 'itmp-iberolatam-va':\r\
              \n\tif releaseVariables['app'] == 'mo-fe':\r\n\t\treleaseVariables['app1']\
              \ = '/' + releaseVariables['app']\r\n\t\t\r\nreleaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudUrl']\r\nreleaseVariables['cloudUrlEnv5']\
              \ = releaseVariables['cloudProdUrl']\r\nreleaseVariables['cloudUrlEnv6']\
              \ = releaseVariables['cloudUrl']\r\n\r\nif releaseVariables['projectName']\
              \ == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudProdUrl']\r\
              \n    \r\nif releaseVariables['app'] == 'ngx-policy-flows':\r\n    releaseVariables['app1']\
              \ = '/' + releaseVariables['app']"
          - name: ${env1}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env1'] != ''
            tasks:
            - name: Get ${app} ${env1} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv1}
            - name: Get ${app} ${env1} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv1}
            - name: Get ${app} ${env1} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv1}
          - name: ${env2}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env2'] != ''
            tasks:
            - name: Get ${app} ${env2} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv2}
            - name: Get ${app} ${env2} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv2}
            - name: Get ${app} ${env2} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv2}
          - name: ${env3}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env3'] != ''
            tasks:
            - name: Get ${app} ${env3} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv3}
            - name: Get ${app} ${env3} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv3}
            - name: Get ${app} ${env3} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env3}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv3}
          - name: ${env4}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env4'] != ''
            tasks:
            - name: Get ${app} ${env4} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv4}
            - name: Get ${app} ${env4} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv4}
            - name: Get ${app} ${env4} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env4}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv4}
          - name: ${env5}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env5'] != ''
            tasks:
            - name: Get ${app} ${env5} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv5}
            - name: Get ${app} ${env5} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv5}
            - name: Get ${app} ${env5} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env5}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv5}
          - name: ${env6}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env6'] != ''
            tasks:
            - name: Get ${app} ${env6} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv6}
            - name: Get ${app} ${env6} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv6}
            - name: Get ${app} ${env6} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env6}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv6}
          - name: ${env7}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env7'] != ''
            tasks:
            - name: Get ${app} ${env7} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv7}
            - name: Get ${app} ${env7} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv7}
            - name: Get ${app} ${env7} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env7}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv7}
          - name: Sleep
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Get Versions EW3
        tasks:
        - name: EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ew3'
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['app1'] = ''\r\nif releaseVariables['projectName']\
              \ == 'itmp-iberolatam' or releaseVariables['projectName'] == 'itmp-iberolatam-va':\r\
              \n    if releaseVariables['app'] != 'claims-handler-fe':\r\n\t\treleaseVariables['app1']\
              \ = '/' + releaseVariables['app']\r\n\t\t\r\nreleaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudUrl']\r\nreleaseVariables['cloudUrlEnv5']\
              \ = releaseVariables['cloudProdUrl']\r\nreleaseVariables['cloudUrlEnv6']\
              \ = releaseVariables['cloudUrl']\r\n\r\nif releaseVariables['projectName']\
              \ == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudProdUrl']\r\
              \n    \r\nif releaseVariables['app'] == 'ngx-policy-flows':\r\n    releaseVariables['app1']\
              \ = '/' + releaseVariables['app']"
          - name: ${env1}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env1'] != ''
            tasks:
            - name: Get ${app} ${env1} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv1}
            - name: Get ${app} ${env1} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv1}
            - name: Get ${app} ${env1} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv1}
          - name: ${env2}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env2'] != ''
            tasks:
            - name: Get ${app} ${env2} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv2}
            - name: Get ${app} ${env2} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv2}
            - name: Get ${app} ${env2} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv2}
          - name: ${env3}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env3'] != ''
            tasks:
            - name: Get ${app} ${env3} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv3}
            - name: Get ${app} ${env3} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv3}
            - name: Get ${app} ${env3} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env3}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv3}
          - name: ${env4}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env4'] != ''
            tasks:
            - name: Get ${app} ${env4} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv4}
            - name: Get ${app} ${env4} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv4}
            - name: Get ${app} ${env4} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env4}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv4}
          - name: ${env5}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env5'] != ''
            tasks:
            - name: Get ${app} ${env5} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv5}
            - name: Get ${app} ${env5} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv5}
            - name: Get ${app} ${env5} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env5}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv5}
          - name: ${env6}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env6'] != ''
            tasks:
            - name: Get ${app} ${env6} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv6}
            - name: Get ${app} ${env6} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv6}
            - name: Get ${app} ${env6} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env6}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv6}
          - name: ${env7}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env7'] != ''
            tasks:
            - name: Get ${app} ${env7} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv7}
            - name: Get ${app} ${env7} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/config/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv7}
            - name: Get ${app} ${env7} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env7}
              oc_deploymentconfig: ${app}
              docker_image_name: ${app}
              failureHandler: |-
                releaseVariables['osversionEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osversionEnv6}
          - name: Sleep
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Get Versions ASE1
        tasks:
        - name: ASE1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ase1'
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['app1'] = ''\r\nif releaseVariables['projectName']\
              \ == 'itmp-iberolatam':\r\n\tif releaseVariables['app'] == 'mo-fe':\r\
              \n\t\treleaseVariables['app1'] = '/' + releaseVariables['app']\r\n\t\
              \t\r\nreleaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']\r\
              \nreleaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']\r\
              \nreleaseVariables['cloudUrlEnv6'] = releaseVariables['cloudUrl']\r\n\
              \r\nif releaseVariables['projectName'] == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudProdUrl']"
          - name: ${env1}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env1'] != ''
            tasks:
            - name: Get ${app} ${env1} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv1}
            - name: Get ${app} ${env1} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}${app1}/config/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv1'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv1}
          - name: ${env2}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env2'] != ''
            tasks:
            - name: Get ${app} ${env2} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv2}
            - name: Get ${app} ${env2} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}${app1}/config/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv2'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv2}
          - name: ${env3}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env3'] != ''
            tasks:
            - name: Get ${app} ${env3} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv3}
            - name: Get ${app} ${env3} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}${app1}/config/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv3'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv3}
          - name: ${env4}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env4'] != ''
            tasks:
            - name: Get ${app} ${env4} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv4}
            - name: Get ${app} ${env4} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}${app1}/config/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv4'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv4}
          - name: ${env5}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env5'] != ''
            tasks:
            - name: Get ${app} ${env5} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv5}
            - name: Get ${app} ${env5} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}${app1}/config/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv5'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv5}
          - name: ${env6}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env6'] != ''
            tasks:
            - name: Get ${app} ${env6} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/${extension}
              proxyHost: cloud.allianz
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv6}
            - name: Get ${app} ${env6} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}${app1}/config/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv6'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv6}
          - name: ${env7}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env7'] != ''
            tasks:
            - name: Get ${app} ${env7} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['versionEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${versionEnv7}
            - name: Get ${app} ${env7} config
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}${app1}/config/${extension}
              jsonPathExpression: version
              failureHandler: |-
                releaseVariables['configEnv7'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${configEnv7}
          - name: Sleep
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${app}</td>'\nvarEnd = '</tr>'\n\
            varRow = varStart\n\nif releaseVariables['env1'] != '':\n    varRow =\
            \ varRow + '<td colspan=\"1\"><ul><li>app version: ${versionEnv1}</li><li>config\
            \ version: ${configEnv1}</li><li>os version: ${osversionEnv1}</li></ul></td>'\n\
            \    \nif releaseVariables['env2'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\"><ul><li>app version: ${versionEnv2}</li><li>config version:\
            \ ${configEnv2}</li><li>os version: ${osversionEnv2}</li></ul></td>'\n\
            \    \nif releaseVariables['env3'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\"><ul><li>app version: ${versionEnv3}</li><li>config version:\
            \ ${configEnv3}</li><li>os version: ${osversionEnv3}</li></ul></td>'\n\
            \    \nif releaseVariables['env4'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\"><ul><li>app version: ${versionEnv4}</li><li>config version:\
            \ ${configEnv4}</li><li>os version: ${osversionEnv4}</li></ul></td>'\n\
            \    \nif releaseVariables['env5'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\"><ul><li>app version: ${versionEnv5}</li><li>config version:\
            \ ${configEnv5}</li><li>os version: ${osversionEnv5}</li></ul></td>'\n\
            \    \nif releaseVariables['env6'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\"><ul><li>app version: ${versionEnv6}</li><li>config version:\
            \ ${configEnv6}</li><li>os version: ${osversionEnv6}</li></ul></td>'\n\
            \    \nif releaseVariables['env7'] != '':\n    varRow = varRow + '<td\
            \ colspan=\"1\"><ul><li>app version: ${versionEnv7}</li><li>config version:\
            \ ${configEnv7}</li><li>os version: ${osversionEnv7}</li></ul></td>'\n\
            \    \nvarRow = varRow + varEnd\n\nreleaseVariables['appRow'] = varRow\n\
            print(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: app
      - type: xlrelease.StringVariable
        key: extension
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrl
      - type: xlrelease.StringVariable
        key: cloudProdUrl
      - type: xlrelease.StringVariable
        key: app1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv4
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv5
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osversionEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osversionEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osversionEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osversionEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osversionEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.IntegerVariable
        key: attempt
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osversionEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osversionEnv7
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_GDF_FE_Asset_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: OE Staging Dashboard (Migrated)
      description: |-
        Staging dashboard for an OE.
        It will show the versions of the applications mentioned below from intake to prod.
        - cisl
        - mo-fe and mo-bff
        - fnol-fe and fnol-bff
        - rss

        Make sure the confluence page is already created before running this template!
      scheduledStartDate: 2020-07-25T07:00:00Z
      phases:
      - phase: MO
        tasks:
        - name: MO
          type: xlrelease.ParallelGroup
          tasks:
          - name: MO-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: MO-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: MO-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: mo-fe
              - type: xlrelease.StringVariable
                key: extension
                value: package.json
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseId1}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId1}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseId1']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['moferow'] = myVariables[key]
                        print(releaseVariables['moferow'])
          - name: MO-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: MO-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: MO-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: mo-bff
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseId3}
              riskProfile: Default risk profile
              template: ITMP Global/Release/GDF BFF Asset Staging Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId3}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseId3']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['mobffrow'] = myVariables[key]
                        print(releaseVariables['mobffrow'])
        color: '#0079BC'
      - phase: FNOL
        tasks:
        - name: FNOL
          type: xlrelease.ParallelGroup
          tasks:
          - name: FNOL-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: FNOL-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: FNOL-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: fnol-fe
              - type: xlrelease.StringVariable
                key: extension
                value: package.json
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: token
                requiresValue: false
                value: ${token}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              createdReleaseId: ${releaseId2}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId2}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseId2']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['fnolferow'] = myVariables[key]
                        print(releaseVariables['fnolferow'])
          - name: FNOL-MR-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: FNOL-MR-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: FNOL-MR-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: fnol-motor-retail-fe
              - type: xlrelease.StringVariable
                key: extension
                value: version.json
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseIdfnolmrfe}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdfnolmrfe}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdfnolmrfe']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['fnolmrferow'] = myVariables[key]
                        print(releaseVariables['fnolmrferow'])
          - name: FNOL-EXPERT-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: FNOL-EXPERT-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: FNOL-EXPERT-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: fnol-expert-fe
              - type: xlrelease.StringVariable
                key: extension
                value: version.json
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseIdfnolefe}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdfnolefe}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdfnolefe']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['fnoleferow'] = myVariables[key]
                        print(releaseVariables['fnoleferow'])
          - name: FNOL-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: FNOL-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: FNOL-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: fnol-bff
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseId4}
              riskProfile: Default risk profile
              template: ITMP Global/Release/GDF BFF Asset Staging Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId4}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseId4']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['fnolbffrow'] = myVariables[key]
                        print(releaseVariables['fnolbffrow'])
        color: '#0079BC'
      - phase: SME
        tasks:
        - name: SME
          type: xlrelease.ParallelGroup
          tasks:
          - name: SME-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: SME-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: SME-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: sme-fe
              - type: xlrelease.StringVariable
                key: extension
                value: package.json
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: token
                requiresValue: false
                value: ${token}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              createdReleaseId: ${releaseIdSMEFE}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdSMEFE}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdSMEFE']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['smeferow'] = myVariables[key]
                        print(releaseVariables['smeferow'])
          - name: SME-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: SME-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: SME-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: sme-backend-global
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseIdSMEBFF}
              riskProfile: Default risk profile
              template: ITMP Global/Release/GDF BFF Asset Staging Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdSMEBFF}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdSMEBFF']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['smebffrow'] = myVariables[key]
                        print(releaseVariables['smebffrow'])
        color: '#0079BC'
      - phase: CHS
        tasks:
        - name: CHS
          type: xlrelease.ParallelGroup
          tasks:
          - name: CHS-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: CHS-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: CHS-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: claims-handler-fe
              - type: xlrelease.StringVariable
                key: extension
                value: package.json
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: token
                requiresValue: false
                value: ${token}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              createdReleaseId: ${releaseIdCHSFE}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdCHSFE}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdCHSFE']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['chsferow'] = myVariables[key]
                        print(releaseVariables['chsferow'])
          - name: CHS-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: CHS-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: CHS-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: claims-handler-bff
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseIdCHSBFF}
              riskProfile: Default risk profile
              template: ITMP Global/Release/GDF BFF Asset Staging Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdCHSBFF}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdCHSBFF']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['chsbffrow'] = myVariables[key]
                        print(releaseVariables['chsbffrow'])
        color: '#0079BC'
      - phase: PM
        tasks:
        - name: MPA
          type: xlrelease.ParallelGroup
          tasks:
          - name: MPA-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: MPA-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: MPA-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: motor-policy-admin-bff
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseIdMPABFF}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF BFF Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdMPABFF}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdMPABFF']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['mpabffrow'] = myVariables[key]
                        print(releaseVariables['mpabffrow'])
        color: '#0079BC'
      - phase: PAF
        tasks:
        - name: PAF
          type: xlrelease.ParallelGroup
          tasks:
          - name: PF-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: PF-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PF-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: ngx-policy-flows
              - type: xlrelease.StringVariable
                key: extension
                value: version
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseIdPFFE}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPFFE}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPFFE']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['pfferow'] = myVariables[key]
                        print(releaseVariables['pfferow'])
          - name: PAF-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: PAF-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PAF-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: bff-policy-admin-flows
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseIdPAFBFF}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF BFF Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPAFBFF}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPAFBFF']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['pafbffrow'] = myVariables[key]
                        print(releaseVariables['pafbffrow'])
        color: '#0079BC'
      - phase: PS
        tasks:
        - name: PS
          type: xlrelease.ParallelGroup
          tasks:
          - name: PS-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: PS-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PS-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: ngx-policy-search
              - type: xlrelease.StringVariable
                key: extension
                value: version
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseIdPSFE}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPSFE}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPSFE']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['psferow'] = myVariables[key]
                        print(releaseVariables['psferow'])
          - name: PAF-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: PS-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PS-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: bff-policy-search
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseIdPSBFF}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF BFF Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPSBFF}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPSBFF']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['psbffrow'] = myVariables[key]
                        print(releaseVariables['psbffrow'])
        color: '#0079BC'
      - phase: Portfolio Management
        tasks:
        - name: PoM
          type: xlrelease.ParallelGroup
          tasks:
          - name: PoM-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: PoM-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PoM-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: ngx-portfolio-mgmt
              - type: xlrelease.StringVariable
                key: extension
                value: version
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseIdPoMFE}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPoMFE}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPoMFE']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['pomferow'] = myVariables[key]
                        print(releaseVariables['pomferow'])
          - name: PoM-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: PoM-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PoM-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: bff-portfolio-mgmt
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseIdPoMBFF}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF BFF Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPoMBFF}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPoMBFF']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['pombffrow'] = myVariables[key]
                        print(releaseVariables['pombffrow'])
        color: '#0079BC'
      - phase: PM-Others
        tasks:
        - name: PM-Others
          type: xlrelease.ParallelGroup
          tasks:
          - name: PA
            type: xlrelease.SequentialGroup
            tasks:
            - name: PA-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PA-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: ngx-policy-amendment
              - type: xlrelease.StringVariable
                key: extension
                value: version
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseIdPAFE}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPAFE}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPAFE']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['paferow'] = myVariables[key]
                        print(releaseVariables['paferow'])
          - name: PI
            type: xlrelease.SequentialGroup
            tasks:
            - name: PI-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: PI-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: ngx-policy-inquiry
              - type: xlrelease.StringVariable
                key: extension
                value: version
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                value: ${env7}
              createdReleaseId: ${releaseIdPIFE}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIdPIFE}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIdPIFE']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['piferow'] = myVariables[key]
                        print(releaseVariables['piferow'])
        color: '#0079BC'
      - phase: Midcorp-uwwb
        tasks:
        - name: MC-UWWB
          type: xlrelease.ParallelGroup
          tasks:
          - name: MC-UWWB-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: MC-UWWB-FE Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: MC-UWWB-FE Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: midcorp-uwwb-fe
              - type: xlrelease.StringVariable
                key: extension
                value: package.json
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              createdReleaseId: ${releaseIduwwbfe}
              riskProfile: Default risk profile
              template: ITMP Global/Staging Dashboards (Migrated)/GDF FE Asset Staging
                Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIduwwbfe}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIduwwbfe']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['mcuwwbferow'] = myVariables[key]
                        print(releaseVariables['mcuwwbferow'])
          - name: MC-UWWB-BFF
            type: xlrelease.SequentialGroup
            tasks:
            - name: MC-UWWB-BFF Asset
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: MC-UWWB-BFF Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: midcorp-uwwb-bff
              - type: xlrelease.StringVariable
                key: extension
                value: actuator/info
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: build.version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${releaseIduwwbbff}
              riskProfile: Default risk profile
              template: ITMP Global/Release/GDF BFF Asset Staging Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseIduwwbbff}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseIduwwbbff']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['mcuwwbbffrow'] = myVariables[key]
                        print(releaseVariables['mcuwwbbffrow'])
        color: '#0079BC'
      - phase: CISL
        tasks:
        - name: CISL
          type: xlrelease.SequentialGroup
          tasks:
          - name: CISL
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: CISL - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: cloudUrl
              value: ${cloudUrl}
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              value: ${cloudProdUrl}
            - type: xlrelease.StringVariable
              key: unitName
              value: ${unitName}
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: ${env6}
            - type: xlrelease.StringVariable
              key: env7
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            createdReleaseId: ${releaseId5}
            riskProfile: Default risk profile
            template: ITMP Global/Release/CISL Staging Dashboard (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId5}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseId5']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['cislrow'] = myVariables[key]
                      print(releaseVariables['cislrow'])
        color: '#0079BC'
      - phase: RAP
        tasks:
        - name: RAP
          type: xlrelease.SequentialGroup
          tasks:
          - name: RAP
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: RAP - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: configname
              description: name of the application. e.g. rap, cisl
              value: rap
            - type: xlrelease.StringVariable
              key: imagename
              description: Name of the image. e.g. itmprap, itmprss
              value: itmprap
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              value: ${env6}
            - type: xlrelease.StringVariable
              key: session
              requiresValue: false
              value: ${token}
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              description: e.g. ec1, ew3
              value: ${cluster}
            createdReleaseId: ${rapreleaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/Openshift Staging
              Dashboard (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${rapreleaseid}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['rapreleaseid']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['raprow'] = myVariables[key]
                      print(releaseVariables['raprow'])
        color: '#0079BC'
      - phase: Airwave
        tasks:
        - name: Airwave
          type: xlrelease.SequentialGroup
          tasks:
          - name: Airwave Asset
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Airwave Asset - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: app
              value: airwave
            - type: xlrelease.StringVariable
              key: extension
              value: versions.json
            - type: xlrelease.StringVariable
              key: projectName
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: cloudUrl
              value: ${cloudUrl}
            - type: xlrelease.StringVariable
              key: cloudProdUrl
              value: ${cloudProdUrl}
            - type: xlrelease.StringVariable
              key: lookupValue
              value: $
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: ${env6}
            - type: xlrelease.StringVariable
              key: env7
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            createdReleaseId: ${releaseIdairwave}
            riskProfile: Default risk profile
            template: ITMP Global/Release/GDF BFF Asset Staging Dashboard (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseIdairwave}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseIdairwave']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['airwaverow'] = myVariables[key]
                      print(releaseVariables['airwaverow'])
        color: '#0079BC'
      - phase: Infinispan
        tasks:
        - name: Infinispan
          type: xlrelease.ParallelGroup
          tasks:
          - name: Infinispan
            type: xlrelease.SequentialGroup
            tasks:
            - name: Infinispan
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: Infinispan Asset - ${projectName}
              templateVariables:
              - type: xlrelease.StringVariable
                key: app
                value: infinispan-service
              - type: xlrelease.StringVariable
                key: extension
                value: rest/v2/server
              - type: xlrelease.StringVariable
                key: projectName
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: cloudUrl
                value: ${cloudUrl}
              - type: xlrelease.StringVariable
                key: cloudProdUrl
                value: ${cloudProdUrl}
              - type: xlrelease.StringVariable
                key: lookupValue
                value: version
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: env7
                requiresValue: false
              - type: xlrelease.StringVariable
                key: cluster
                value: ${cluster}
              createdReleaseId: ${infreleaseId}
              riskProfile: Default risk profile
              template: ITMP Global/Release/GDF BFF Asset Staging Dashboard (Migrated)
              folder: ITMP Global/Staging Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${infreleaseId}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['infreleaseId']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['infrow'] = myVariables[key]
                        print(releaseVariables['infrow'])
        color: '#0079BC'
      - phase: AOMS
        tasks:
        - name: AOMS
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: AOMS - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            value: ${projectName}
          - type: xlrelease.StringVariable
            key: configname
            description: name of the application. e.g. rap, cisl
            value: aoms-thunderhead
          - type: xlrelease.StringVariable
            key: imagename
            description: Name of the image. e.g. itmprap, itmprss
            value: aoms-thunderhead
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: cluster
            requiresValue: false
            description: e.g. ec1, ew3
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: env7
            requiresValue: false
            inherited: true
          createdReleaseId: ${aomsreleaseid}
          riskProfile: Default risk profile
          template: ITMP Global/Staging Dashboards (Migrated)/Openshift Staging Dashboard
            (Migrated)
          folder: ITMP Global/Staging Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${aomsreleaseid}
        - name: Collect row
          type: xlrelease.ScriptTask
          script: |-
            releaseId = releaseVariables['aomsreleaseid']
            myVariables = releaseApi.getVariableValues(releaseId)

            for key in myVariables:
                if 'appRow' in key:
                    releaseVariables['aomsrow'] = myVariables[key]
                    print(releaseVariables['aomsrow'])
        color: '#0079BC'
      - phase: RL
        tasks:
        - name: RL
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: RL - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: app
            value: radarlive-dpo
          - type: xlrelease.StringVariable
            key: projectName
            value: ${projectName}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: radarlive-nonprod
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: radarlive-nonprod
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: radarlive-nonprod
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: radarlive-prod
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: radarlive-prod
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: radarlive-nonprod
          - type: xlrelease.StringVariable
            key: cluster
            requiresValue: false
            description: e.g. ec1, ew3
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: env7
            requiresValue: false
            inherited: true
          createdReleaseId: ${rlreleaseid}
          riskProfile: Default risk profile
          template: ITMP Global/Staging Dashboards (Migrated)/RL Asset Staging Dashboard
            (Migrated)
          folder: ITMP Global/Staging Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${rlreleaseid}
        - name: Collect row
          type: xlrelease.ScriptTask
          script: |-
            releaseId = releaseVariables['rlreleaseid']
            myVariables = releaseApi.getVariableValues(releaseId)

            for key in myVariables:
                if 'appRow' in key:
                    releaseVariables['rlrow'] = myVariables[key]
                    print(releaseVariables['rlrow'])
        color: '#0079BC'
      - phase: RSS
        tasks:
        - name: RSS
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: RSS Staging Dashboard - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            value: ${projectName}
          - type: xlrelease.StringVariable
            key: cloudUrl
            value: ${cloudUrl}
          - type: xlrelease.StringVariable
            key: cloudProdUrl
            value: ${cloudProdUrl}
          - type: xlrelease.StringVariable
            key: unitName
            value: ${unitName}
          - type: xlrelease.StringVariable
            key: env1
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            value: ${env5}
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          createdReleaseId: ${rssReleaseId}
          riskProfile: Default risk profile
          template: ITMP Global/Release/RSS Staging Dashboard (Migrated)
          folder: ITMP Global/Staging Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${rssReleaseId}
        - name: Collect row
          type: xlrelease.ScriptTask
          script: |-
            releaseId = releaseVariables['rssReleaseId']
            myVariables = releaseApi.getVariableValues(releaseId)

            for key in myVariables:
                if 'appRow' in key:
                    releaseVariables['rssrow'] = myVariables[key]
                    print(releaseVariables['rssrow'])
        color: '#0079BC'
      - phase: DB
        tasks:
        - name: DB
          type: xlrelease.SequentialGroup
          precondition: |-
            releaseVariables['projectName'] == 'itmp-italy'
            # or releaseVariables['projectName'] == 'itmp-iberolatam'
          tasks:
          - name: DB
            type: xlrelease.CreateReleaseTask
            variableMapping:
              templateVariables[7].value: ${dbpassword}
            newReleaseTitle: DB Staging Dashboard - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: db1
              requiresValue: false
              value: ${db1}
            - type: xlrelease.StringVariable
              key: db2
              requiresValue: false
              value: ${db2}
            - type: xlrelease.StringVariable
              key: db3
              requiresValue: false
              value: ${db3}
            - type: xlrelease.StringVariable
              key: db4
              requiresValue: false
              value: ${db4}
            - type: xlrelease.StringVariable
              key: db5
              requiresValue: false
              value: ${db5}
            - type: xlrelease.StringVariable
              key: db6
              requiresValue: false
              value: ${db6}
            - type: xlrelease.StringVariable
              key: DBUnit
              value: ${dbunit}
            - type: xlrelease.PasswordStringVariable
              key: dbpassword
            - type: xlrelease.StringVariable
              key: cluster
              value: ${cluster}
            - type: xlrelease.StringVariable
              key: server
              value: ${dbserver}
            createdReleaseId: ${dbReleaseId}
            riskProfile: Default risk profile
            template: ITMP Global/Staging Dashboards (Migrated)/DB Staging Dashboard
              (Migrated)
            folder: ITMP Global/Staging Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${dbReleaseId}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['dbReleaseId']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['dbrow'] = myVariables[key]
                      print(releaseVariables['dbrow'])
        color: '#0079BC'
      - phase: Confluence
        tasks:
        - name: Prepare HTML
          type: xlrelease.ScriptTask
          script: "varStart = '<p>This page is automatically updated every hour by\
            \ XL Release. Any changes you apply here will be overwritten by XL Release.</p>\
            \ <p>   <br/> </p>'\n\nvarRow = varStart\nvarRow = varRow + '<table class=\"\
            wrapped\"><colgroup>'\n\nif releaseVariables['env1'] != '':\n    varRow\
            \ = varRow + '<col/>'\n    \nif releaseVariables['env2'] != '':\n    varRow\
            \ = varRow + '<col/>'\n        \nif releaseVariables['env3'] != '':\n\
            \    varRow = varRow + '<col/>'\n        \nif releaseVariables['env4']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nif releaseVariables['env5']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nif releaseVariables['env6']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nvarRow = varRow + '</colgroup><tbody><tr><th\
            \ colspan=\"1\">APPLICATION</th>'\n\nif releaseVariables['env1'] != '':\n\
            \    varRow = varRow + '<th>${env1}</th>'\n    \nif releaseVariables['env2']\
            \ != '':\n    varRow = varRow + '<th>${env2}</th>'\n        \nif releaseVariables['env3']\
            \ != '':\n    varRow = varRow + '<th>${env3}</th>'\n        \nif releaseVariables['env4']\
            \ != '':\n    varRow = varRow + '<th>${env4}</th>'\n    \nif releaseVariables['env5']\
            \ != '':\n    varRow = varRow + '<th>${env5}</th>'\n    \nif releaseVariables['env6']\
            \ != '':\n    varRow = varRow + '<th>${env6}</th>'\n    \nvarRow = varRow\
            \ + '</tr>'\nvarRow = varRow + '${raprow} ' + releaseVariables['airwaverow']\
            \ + ' ${cislrow} ${rssrow} ${fnolferow} ${fnolmrferow} ${fnoleferow} ${fnolbffrow}\
            \ ${moferow} ${mobffrow} ${smeferow} ${smebffrow} ${chsferow} ${chsbffrow}\
            \ ${mpabffrow} ${pfferow} ${pafbffrow} ${psferow} ${psbffrow} ${pomferow}\
            \ ${pombffrow} ${paferow} ${piferow} ${dbrow} ' + releaseVariables['mcuwwbferow']\
            \ + ' ' + releaseVariables['mcuwwbbffrow'] + releaseVariables['infrow']\
            \ + ' ${aomsrow} ${rlrow}'\nvarRow = varRow + '</tbody> </table>'\n  \
            \  \nreleaseVariables['appRow'] = varRow\nprint(releaseVariables['appRow'])"
        - name: Update Dashboard
          type: confluence.updateWikiPages
          confluenceServer: ITMP Confluence
          spaceKey: ${spaceKey}
          newPageTitle: ${newPageTitle}
          newPageText: ${appRow}
          variableMapping:
            pythonScript.pageTitles: ${pageTitles}
        color: '#0079BC'
      tags:
      - staging dashboard
      variables:
      - type: xlrelease.StringVariable
        key: releaseId1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: projectName
        description: 'name of the project. This is used to create the url. Example:
          itmp-iberolatam, itmp-italy, itmp-aal'
      - type: xlrelease.StringVariable
        key: cloudUrl
        description: URL used for the specific network. This value will be used to
          create the urls. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
      - type: xlrelease.StringVariable
        key: cloudProdUrl
        description: URL used for the specific network. This value will be used to
          create the urls for prod environments. e.g. apps.crp.ec1.aws.aztec.cloud.allianz
      - type: xlrelease.StringVariable
        key: releaseId2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: spaceKey
        description: Value is used to connect to the correct space in Confluence.
          Default vaue is set on NANCY
        value: NANCY
      - type: xlrelease.ListStringVariable
        key: pageTitles
        description: Only add the name of the page you want to use as staging dashboard
      - type: xlrelease.StringVariable
        key: newPageTitle
        description: Value should be the same as the name you added to the titles
          list
      - type: xlrelease.StringVariable
        key: fnolferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: moferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: mobffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: fnolbffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cislrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: unitName
        description: Name specific to an OE. e.g. bga (for Spain), bgb (for Italy),
          bgc (for Australia).
      - type: xlrelease.StringVariable
        key: rssReleaseId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: rssrow
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdSMEFE
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdSMEBFF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: smebffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: smeferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: rapreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: raprow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
        requiresValue: false
      - type: xlrelease.StringVariable
        key: aomsreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: aomsrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdCHSFE
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdCHSBFF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: chsbffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: chsferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: rlreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: rlrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: db1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: dbunit
        requiresValue: false
      - type: xlrelease.PasswordStringVariable
        key: dbpassword
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: db6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: dbserver
        requiresValue: false
      - type: xlrelease.StringVariable
        key: dbReleaseId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dbrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: infreleaseId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIduwwbfe
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIduwwbbff
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: mcuwwbferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: mcuwwbbffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdfnolmrfe
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdfnolefe
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: fnoleferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: fnolmrferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdairwave
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: airwaverow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdMPABFF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: mpabffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdPFFE
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdPAFBFF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: pafbffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: pfferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdPSFE
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdPSBFF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: psbffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: psferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdPoMFE
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdPoMBFF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: pombffrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: pomferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdPAFE
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: releaseIdPIFE
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: paferow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: piferow
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_OE_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: Openshift Staging Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Get Session
        tasks:
        - name: Get Session
          type: xlrelease.ScriptTask
          script: "if releaseVariables['cluster'] == 'ec1':\n    releaseVariables['session']\
            \ = '${global.ec1token}'\n    print('set ec1 token')\n\nif releaseVariables['cluster']\
            \ == 'ew3':\n    releaseVariables['session'] = '${global.ew3token}'\n\
            \    print('set ew3 token')\n    \nif releaseVariables['cluster'] == 'ase1':\n\
            \    releaseVariables['session'] = '${global.ase1token}'\n    print('set\
            \ ase1 token')"
        color: '#0079BC'
      - phase: Get Versions EC1
        tasks:
        - name: EC1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ec1'
          tasks:
          - name: Get ${configname} ${env1} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env1}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionenv1'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv1}
          - name: Get ${configname} ${env2} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env2}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionenv2'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv2}
          - name: Get ${configname} ${env3} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env3}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionenv3'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv3}
          - name: Get ${configname} ${env4} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env4}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionenv4'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv4}
          - name: Get ${configname} ${env5} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env5}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionenv5'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv5}
          - name: Get ${configname} ${env6} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env6}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionenv6'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv6}
          - name: Get ${configname} ${env7} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env7}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionenv7'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv7}
          - name: Wait
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Get versions EW3
        tasks:
        - name: EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ew3'
          tasks:
          - name: Get ${configname} ${env1} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env1}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionenv1'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv1}
          - name: namespace change AOMS SPAIN
            type: xlrelease.ScriptTask
            script: |-
              if releaseVariables['configname'] =='aoms-thunderhead' and releaseVariables['projectName']=='itmp-iberolatam' :
                  releaseVariables['projectName']='aoms-iberolatam'
                  print releaseVariables['projectName']
          - name: Get ${configname} ${env2} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env2}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionenv2'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv2}
          - name: namespace change AOMS SPAIN (copy)
            type: xlrelease.ScriptTask
            script: |-
              if releaseVariables['projectName']=='aoms-iberolatam':
                  releaseVariables['projectName']='itmp-iberolatam'
                  print releaseVariables['projectName']
          - name: Get ${configname} ${env3} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env3}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionenv3'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv3}
          - name: Get ${configname} ${env4} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env4}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionenv4'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv4}
          - name: Get ${configname} ${env5} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env5}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionenv5'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv5}
          - name: Get ${configname} ${env6} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env6}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionenv6'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv6}
          - name: Get ${configname} ${env7} version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${session}
            oc_namespace: ${projectName}-${env7}
            oc_deploymentconfig: ${configname}
            docker_image_name: ${imagename}
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionenv7'] = 'Error'


              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.tag_name: ${versionenv7}
          - name: Wait
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${configname}</td>'\r\nvarEnd\
            \ = '</tr>'\r\nvarRow = varStart\r\n\r\nif releaseVariables['env1'] !=\
            \ '':\r\n    varRow = varRow + '<td>${versionenv1}</td>'\r\n    \r\nif\
            \ releaseVariables['env2'] != '':\r\n    varRow = varRow + '<td>${versionenv2}</td>'\r\
            \n    \r\nif releaseVariables['env3'] != '':\r\n    varRow = varRow +\
            \ '<td>${versionenv3}</td>'\r\n    \r\nif releaseVariables['env4'] !=\
            \ '':\r\n    varRow = varRow + '<td>${versionenv4}</td>'\r\n    \r\nif\
            \ releaseVariables['env5'] != '':\r\n    varRow = varRow + '<td>${versionenv5}</td>'\r\
            \n    \r\nif releaseVariables['env6'] != '':\r\n    varRow = varRow +\
            \ '<td>${versionenv6}</td>'\r\n    \r\nif releaseVariables['env7'] !=\
            \ '':\r\n    varRow = varRow + '<td>${versionenv7}</td>'\r\n    \r\nvarRow\
            \ = varRow + varEnd\r\n\r\nreleaseVariables['appRow'] = varRow\r\nprint(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: configname
        description: name of the application. e.g. rap, cisl
      - type: xlrelease.StringVariable
        key: imagename
        description: Name of the image. e.g. itmprap, itmprss
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: versionenv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionenv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: versionenv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: versionenv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: versionenv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: versionenv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: session
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
        requiresValue: false
        description: e.g. ec1, ew3
        value: ec1
      - type: xlrelease.IntegerVariable
        key: attempt
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionenv7
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_Openshift_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: RL Asset Staging Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: EC1 and EW3
        tasks:
        - name: EC1 and EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ec1' or releaseVariables['cluster']
            == 'ew3'
          tasks:
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionEnv1'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv1}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionEnv2'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv2}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionEnv3'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv3}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionEnv4'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv4}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionEnv5'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv5}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionEnv6'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv6}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionEnv7'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv7}
          - name: Sleep
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
          - name: Get versions
            type: xlrelease.ScriptTask
            script: "# environment 1\nstart1 = releaseVariables['versionEnv1'].find('ProductVersion')\n\
              if start1 > 0:\n    end1 = start1 + 35\n    releaseVariables['versionEnv1']\
              \ = releaseVariables['versionEnv1'][start1:end1]\n    \n# environment\
              \ 2\nstart2 = releaseVariables['versionEnv2'].find('ProductVersion')\n\
              if start2 > 0:\n    end2 = start2 + 35\n    releaseVariables['versionEnv2']\
              \ = releaseVariables['versionEnv2'][start2:end2]\n\n\n# environment\
              \ 3\nstart3 = releaseVariables['versionEnv3'].find('ProductVersion')\n\
              if start3 > 0:\n    end3 = start3 + 35\n    releaseVariables['versionEnv3']\
              \ = releaseVariables['versionEnv3'][start3:end3]\n\n\n# environment\
              \ 4\nstart4 = releaseVariables['versionEnv4'].find('ProductVersion')\n\
              if start4 > 0:\n    end4 = start4 + 35\n    releaseVariables['versionEnv4']\
              \ = releaseVariables['versionEnv4'][start4:end4]\n\n\n# environment\
              \ 5\nstart5 = releaseVariables['versionEnv5'].find('ProductVersion')\n\
              if start5 > 0:\n    end5 = start5 + 35\n    releaseVariables['versionEnv5']\
              \ = releaseVariables['versionEnv5'][start5:end5]\n\n\n# environment\
              \ 6\nstart6 = releaseVariables['versionEnv6'].find('ProductVersion')\n\
              if start6 > 0:\n    end6 = start6 + 35\n    releaseVariables['versionEnv6']\
              \ = releaseVariables['versionEnv6'][start6:end6]\n    \n# environment\
              \ 7\nstart7 = releaseVariables['versionEnv7'].find('ProductVersion')\n\
              if start7 > 0:\n    end7 = start7 + 35\n    releaseVariables['versionEnv7']\
              \ = releaseVariables['versionEnv7'][start7:end7]"
        color: '#0079BC'
      - phase: ASE1
        tasks:
        - name: ASE1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == 'ase1'
          tasks:
          - name: Get ${app} ${env1} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env1}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            jsonPathExpression: $
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['versionEnv1'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv1}
          - name: Get ${app} ${env2} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env2}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            jsonPathExpression: $
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['versionEnv2'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv2}
          - name: Get ${app} ${env3} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env3}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            jsonPathExpression: $
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['versionEnv3'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv3}
          - name: Get ${app} ${env4} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env4}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            proxyHost: loud.allianz
            jsonPathExpression: $
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['versionEnv4'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv4}
          - name: Get ${app} ${env5} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env5}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            jsonPathExpression: $
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['versionEnv5'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv5}
          - name: Get ${app} ${env6} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env6}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            jsonPathExpression: $
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['versionEnv6'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv6}
          - name: Get ${app} ${env7} version
            type: webhook.JsonWebhook
            URL: https://${app}-${projectName}-${env7}.apps.crp.${cluster}.aws.aztec.cloud.allianz/
            jsonPathExpression: $
            precondition: releaseVariables['env7'] != ''
            failureHandler: |-
              releaseVariables['versionEnv7'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionEnv7}
          - name: Sleep
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
          - name: Get versions
            type: xlrelease.ScriptTask
            script: "# environment 1\nstart1 = releaseVariables['versionEnv1'].find('ProductVersion')\n\
              if start1 > 0:\n    end1 = start1 + 35\n    releaseVariables['versionEnv1']\
              \ = releaseVariables['versionEnv1'][start1:end1]\n    \n# environment\
              \ 2\nstart2 = releaseVariables['versionEnv2'].find('ProductVersion')\n\
              if start2 > 0:\n    end2 = start2 + 35\n    releaseVariables['versionEnv2']\
              \ = releaseVariables['versionEnv2'][start2:end2]\n\n\n# environment\
              \ 3\nstart3 = releaseVariables['versionEnv3'].find('ProductVersion')\n\
              if start3 > 0:\n    end3 = start3 + 35\n    releaseVariables['versionEnv3']\
              \ = releaseVariables['versionEnv3'][start3:end3]\n\n\n# environment\
              \ 4\nstart4 = releaseVariables['versionEnv4'].find('ProductVersion')\n\
              if start4 > 0:\n    end4 = start4 + 35\n    releaseVariables['versionEnv4']\
              \ = releaseVariables['versionEnv4'][start4:end4]\n\n\n# environment\
              \ 5\nstart5 = releaseVariables['versionEnv5'].find('ProductVersion')\n\
              if start5 > 0:\n    end5 = start5 + 35\n    releaseVariables['versionEnv5']\
              \ = releaseVariables['versionEnv5'][start5:end5]\n\n\n# environment\
              \ 6\nstart6 = releaseVariables['versionEnv6'].find('ProductVersion')\n\
              if start6 > 0:\n    end6 = start6 + 35\n    releaseVariables['versionEnv6']\
              \ = releaseVariables['versionEnv6'][start6:end6]\n    \n# environment\
              \ 7\nstart7 = releaseVariables['versionEnv7'].find('ProductVersion')\n\
              if start7 > 0:\n    end7 = start7 + 35\n    releaseVariables['versionEnv7']\
              \ = releaseVariables['versionEnv7'][start7:end7]"
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${app}</td>'\nvarEnd = '</tr>'\n\
            varRow = varStart\n\nif releaseVariables['env1'] != '':\n    varRow =\
            \ varRow + '<td colspan=\"1\"><ul><li>${versionEnv1}</li><li>environment:\
            \ ${env1}</li></ul></td>'\n    \nif releaseVariables['env2'] != '':\n\
            \    varRow = varRow + '<td colspan=\"1\"><ul><li>${versionEnv2}</li><li>environment:\
            \ ${env2}</li></ul></td>'\n    \nif releaseVariables['env3'] != '':\n\
            \    varRow = varRow + '<td colspan=\"1\"><ul><li>${versionEnv3}</li><li>environment:\
            \ ${env3}</li></ul></td>'\n    \nif releaseVariables['env4'] != '':\n\
            \    varRow = varRow + '<td colspan=\"1\"><ul><li>${versionEnv4}</li><li>environment:\
            \ ${env4}</li></ul></td>'\n    \nif releaseVariables['env5'] != '':\n\
            \    varRow = varRow + '<td colspan=\"1\"><ul><li>${versionEnv5}</li><li>environment:\
            \ ${env5}</li></ul></td>'\n    \nif releaseVariables['env6'] != '':\n\
            \    varRow = varRow + '<td colspan=\"1\"><ul><li>${versionEnv6}</li><li>environment:\
            \ ${env6}</li></ul></td>'\n    \nif releaseVariables['env7'] != '':\n\
            \    varRow = varRow + '<td colspan=\"1\"><ul><li>${versionEnv7}</li><li>environment:\
            \ ${env7}</li></ul></td>'\n    \nvarRow = varRow + varEnd\n\nreleaseVariables['appRow']\
            \ = varRow\nprint(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: app
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: versionEnv7
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_RL_Asset_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: RSS Staging Dashboard (Migrated)
      scheduledStartDate: 2020-06-22T07:00:00Z
      phases:
      - phase: Get Token
        tasks:
        - name: Get Token
          type: xlrelease.ScriptTask
          script: "if releaseVariables['cluster'] == 'ec1':\n    releaseVariables['token']\
            \ = '${global.ec1token}'\n    print('set ec1 token')\n\nif releaseVariables['cluster']\
            \ == 'ew3':\n    releaseVariables['token'] = '${global.ew3token}'\n  \
            \  print('set ew3 token')\n    \nif releaseVariables['cluster'] == 'ase1':\n\
            \    releaseVariables['token'] = '${global.ase1token}'\n    print('set\
            \ ase1 token')"
        color: '#0079BC'
      - phase: Get Versions
        tasks:
        - name: EC1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == "ec1"
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']\r\
              \nreleaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']\r\
              \n\r\nif releaseVariables['projectName'] == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudProdUrl']"
          - name: ${env1}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env1'] != ''
            tasks:
            - name: Get ${app} ${env1} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv1'] = 'Error'
                print(releaseVariables['rssEnv1'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv1}
            - name: Get ${app} ${env1} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv1'] = 'Error'
                print(releaseVariables['osenv1'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv1}
          - name: ${env2}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env2'] != ''
            tasks:
            - name: Get ${app} ${env2} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv2'] = 'Error'
                print(releaseVariables['rssEnv2'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv2}
            - name: Get ${app} ${env2} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv2'] = 'Error'
                print(releaseVariables['osenv2'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv2}
          - name: ${env3}
            type: xlrelease.SequentialGroup
            tasks:
            - name: Get ${app} ${env3} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              precondition: releaseVariables['env3'] != ''
              failureHandler: |-
                releaseVariables['rssEnv3'] = 'Error'
                print(releaseVariables['rssEnv3'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv3}
            - name: Get ${app} ${env3} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env3}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv3'] = 'Error'
                print(releaseVariables['osenv3'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv3}
          - name: ${env4}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env4'] != ''
            tasks:
            - name: Get ${app} ${env4} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv4'] = 'Error'
                print(releaseVariables['rssEnv4'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv4}
            - name: Get ${app} ${env4} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env4}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv4'] = 'Error'
                print(releaseVariables['osenv4'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv4}
          - name: ${env5}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env5'] != ''
            tasks:
            - name: Get ${app} ${env5} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv5'] = 'Error'
                print(releaseVariables['rssEnv5'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv5}
            - name: Get ${app} ${env5} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env5}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv5'] = 'Error'
                print(releaseVariables['osenv5'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv5}
          - name: ${env6}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env6'] != ''
            tasks:
            - name: Get ${app} ${env6} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv6'] = 'Error'
                print(releaseVariables['rssEnv6'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv6}
            - name: Get ${app} ${env6} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env6}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv6'] = 'Error'
                print(releaseVariables['osenv6'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv6}
          - name: ${env7}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env7'] != ''
            tasks:
            - name: Get ${app} ${env7} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv7'] = 'Error'
                print(releaseVariables['rssEnv7'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv7}
            - name: Get ${app} ${env7} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env7}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv7'] = 'Error'
                print(releaseVariables['osenv7'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv6}
          - name: Wait
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Get Versions
        tasks:
        - name: EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == "ew3"
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']\r\
              \nreleaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']\r\
              \n\r\nif releaseVariables['projectName'] == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudProdUrl']"
          - name: ${env1}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env1'] != ''
            tasks:
            - name: Get ${app} ${env1} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv1'] = 'Error'
                print(releaseVariables['rssEnv1'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv1}
            - name: Get ${app} ${env1} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv1'] = 'Error'
                print(releaseVariables['osenv1'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv1}
          - name: ${env2}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env2'] != ''
            tasks:
            - name: Get ${app} ${env2} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv2'] = 'Error'
                print(releaseVariables['rssEnv2'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv2}
            - name: Get ${app} ${env2} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv2'] = 'Error'
                print(releaseVariables['osenv2'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv2}
          - name: ${env3}
            type: xlrelease.SequentialGroup
            tasks:
            - name: Get ${app} ${env3} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              precondition: releaseVariables['env3'] != ''
              failureHandler: |-
                releaseVariables['rssEnv3'] = 'Error'
                print(releaseVariables['rssEnv3'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv3}
            - name: Get ${app} ${env3} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env3}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv3'] = 'Error'
                print(releaseVariables['osenv3'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv3}
          - name: ${env4}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env4'] != ''
            tasks:
            - name: Get ${app} ${env4} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv4'] = 'Error'
                print(releaseVariables['rssEnv4'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv4}
            - name: Get ${app} ${env4} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env4}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv4'] = 'Error'
                print(releaseVariables['osenv4'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv4}
          - name: ${env5}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env5'] != ''
            tasks:
            - name: Get ${app} ${env5} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv5'] = 'Error'
                print(releaseVariables['rssEnv5'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv5}
            - name: Get ${app} ${env5} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env5}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv5'] = 'Error'
                print(releaseVariables['osenv5'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv5}
          - name: ${env6}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env6'] != ''
            tasks:
            - name: Get ${app} ${env6} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv6'] = 'Error'
                print(releaseVariables['rssEnv6'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv6}
            - name: Get ${app} ${env6} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env6}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv6'] = 'Error'
                print(releaseVariables['osenv6'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv6}
          - name: ${env7}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env7'] != ''
            tasks:
            - name: Get ${app} ${env7} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${app}/${extension}
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv7'] = 'Error'
                print(releaseVariables['rssEnv7'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv7}
            - name: Get ${app} ${env7} os version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${token}
              oc_namespace: ${projectName}-${env7}
              oc_deploymentconfig: ${app}
              docker_image_name: itmp${app}
              failureHandler: |-
                releaseVariables['osenv7'] = 'Error'
                print(releaseVariables['osenv7'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${osenv6}
          - name: Wait
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Get Versions
        tasks:
        - name: ASE1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == "ase1"
          tasks:
          - name: Prepare variables
            type: xlrelease.ScriptTask
            script: "releaseVariables['cloudUrlEnv4'] = releaseVariables['cloudUrl']\r\
              \nreleaseVariables['cloudUrlEnv5'] = releaseVariables['cloudProdUrl']\r\
              \n\r\nif releaseVariables['projectName'] == 'itmp-aal':\r\n    releaseVariables['cloudUrlEnv4']\
              \ = releaseVariables['cloudProdUrl']"
          - name: ${env1}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env1'] != ''
            tasks:
            - name: Get ${app} ${env1} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env1}.${cloudUrl}/${app}/${extension}
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv1'] = 'Error'
                print(releaseVariables['rssEnv1'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv1}
          - name: ${env2}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env2'] != ''
            tasks:
            - name: Get ${app} ${env2} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env2}.${cloudUrl}/${app}/${extension}
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv2'] = 'Error'
                print(releaseVariables['rssEnv2'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv2}
          - name: ${env3}
            type: xlrelease.SequentialGroup
            tasks:
            - name: Get ${app} ${env3} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env3}.${cloudUrl}/${app}/${extension}
              jsonPathExpression: $
              precondition: releaseVariables['env3'] != ''
              failureHandler: |-
                releaseVariables['rssEnv3'] = 'Error'
                print(releaseVariables['rssEnv3'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv3}
          - name: ${env4}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env4'] != ''
            tasks:
            - name: Get ${app} ${env4} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env4}.${cloudUrlEnv4}/${app}/${extension}
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv4'] = 'Error'
                print(releaseVariables['rssEnv4'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv4}
          - name: ${env5}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env5'] != ''
            tasks:
            - name: Get ${app} ${env5} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env5}.${cloudUrlEnv5}/${app}/${extension}
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv5'] = 'Error'
                print(releaseVariables['rssEnv5'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv5}
          - name: ${env6}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env6'] != ''
            tasks:
            - name: Get ${app} ${env6} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env6}.${cloudUrl}/${app}/${extension}
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv6'] = 'Error'
                print(releaseVariables['rssEnv6'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv6}
          - name: ${env7}
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env7'] != ''
            tasks:
            - name: Get ${app} ${env7} version
              type: webhook.JsonWebhook
              URL: https://${app}-${projectName}-${env7}.${cloudUrl}/${app}/${extension}
              jsonPathExpression: $
              failureHandler: |-
                releaseVariables['rssEnv7'] = 'Error'
                print(releaseVariables['rssEnv7'])

                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${rssEnv7}
          - name: Wait
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(5)
        color: '#0079BC'
      - phase: Create HTML Row
        tasks:
        - name: Print
          type: xlrelease.ScriptTask
          script: |-
            print(releaseVariables['rssEnv1'])
            print(releaseVariables['rssEnv2'])
            print(releaseVariables['rssEnv3'])
            print(releaseVariables['rssEnv4'])
            print(releaseVariables['rssEnv5'])
            print(releaseVariables['rssEnv6'])
            print(releaseVariables['rssEnv7'])
        - name: Create Row Variable
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${app}</td>'\r\nvarEnd = '</tr>'\r\
            \nvarRow = varStart\r\n\r\nif releaseVariables['env1'] != '':\r\n    varRow\
            \ = varRow + '<td colspan=\"1\"><ul><li>ABS Version: ${rssEnv1}</li><li>os\
            \ version: ${osenv1}</li></ul></td>'\r\n    \r\nif releaseVariables['env2']\
            \ != '':\r\n    varRow = varRow + '<td colspan=\"1\"><ul><li>ABS Version:\
            \ ${rssEnv2}</li><li>os version: ${osenv2}</li></ul></td>'\r\n    \r\n\
            if releaseVariables['env3'] != '':\r\n    varRow = varRow + '<td colspan=\"\
            1\"><ul><li>ABS Version: ${rssEnv3}</li><li>os version: ${osenv3}</li></ul></td>'\r\
            \n    \r\nif releaseVariables['env4'] != '':\r\n    varRow = varRow +\
            \ '<td colspan=\"1\"><ul><li>ABS Version: ${rssEnv4}</li><li>os version:\
            \ ${osenv4}</li></ul></td>'\r\n    \r\nif releaseVariables['env5'] !=\
            \ '':\r\n    varRow = varRow + '<td colspan=\"1\"><ul><li>ABS Version:\
            \ ${rssEnv5}</li><li>os version: ${osenv5}</li></ul></td>'\r\n    \r\n\
            if releaseVariables['env6'] != '':\r\n    varRow = varRow + '<td colspan=\"\
            1\"><ul><li>ABS Version: ${rssEnv6}</li><li>os version: ${osenv6}</li></ul></td>'\r\
            \n    \r\nif releaseVariables['env7'] != '':\r\n    varRow = varRow +\
            \ '<td colspan=\"1\"><ul><li>ABS Version: ${rssEnv7}</li><li>os version:\
            \ ${osenv7}</li></ul></td>'\r\n    \r\nvarRow = varRow + varEnd\r\n\r\n\
            releaseVariables['appRow'] = varRow\r\nprint(releaseVariables['appRow'])"
      variables:
      - type: xlrelease.StringVariable
        key: app
        requiresValue: false
        showOnReleaseStart: false
        value: rss
      - type: xlrelease.StringVariable
        key: extension
        requiresValue: false
        showOnReleaseStart: false
        value: config/version
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrl
      - type: xlrelease.StringVariable
        key: cloudProdUrl
      - type: xlrelease.StringVariable
        key: unitName
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: rssEnv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: rssEnv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: rssEnv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: rssEnv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: rssEnv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv4
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cloudUrlEnv5
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osenv1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osenv2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osenv3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osenv4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osenv5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.IntegerVariable
        key: attempt
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: rssEnv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osenv6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.StringVariable
        key: env7
        requiresValue: false
      - type: xlrelease.StringVariable
        key: rssEnv7
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: osenv7
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_RSS_Staging_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
  - directory: Config Dashboards (Migrated)
    children:
    - directory: OE Config Dashboards
      children:
      - template: AAL Config Dashboard
        scheduledStartDate: 2021-01-29T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: AAL Config Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: AAL Config Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              value: test
            - type: xlrelease.StringVariable
              key: env4
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              value: prod
            - type: xlrelease.StringVariable
              key: env6
              value: hotfix
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp-aal
            - type: xlrelease.StringVariable
              key: cluster
              value: ec1
            - type: xlrelease.StringVariable
              key: cislpagetitle
              value: 1. AAL CISL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: cislpagetitles
              value:
              - 1. AAL CISL Config Dashboard
            - type: xlrelease.StringVariable
              key: rappagetitle
              value: 2. AAL RAP Config Dashboard
            - type: xlrelease.ListStringVariable
              key: rappagetitles
              value:
              - 2. AAL RAP Config Dashboard
            - type: xlrelease.StringVariable
              key: pdmpagetitle
              value: 3. AAL PDM Config Dashboard
            - type: xlrelease.ListStringVariable
              key: pdmpagetitles
              value:
              - 3. AAL PDM Config Dashboard
            - type: xlrelease.StringVariable
              key: fnolconfigtitle
              value: 2. AAL FNOL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: fnolconfigtitles
              value:
              - 2. AAL FNOL Config Dashboard
            - type: xlrelease.StringVariable
              key: moconfigtitle
              value: 1. AAL MO Config Dashboard
            - type: xlrelease.ListStringVariable
              key: moconfigtitles
              value:
              - 1. AAL MO Config Dashboard
            - type: xlrelease.StringVariable
              key: smeconfigtitle
              value: 3. AAL SME Config Dashboard
            - type: xlrelease.ListStringVariable
              key: smeconfigtitles
              value:
              - 3. AAL SME Config Dashboard
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Global/Config Dashboards (Migrated)/Generic Config Dashboard
              (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)/OE Config Dashboards
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
        variables:
        - type: xlrelease.StringVariable
          key: releaseId1
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_AAL_Config_Dashboard_scriptUserPassword"
        riskProfile: Default risk profile
      - template: AGCS Config Dashboard
        scheduledStartDate: 2021-01-29T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: AGCS Config Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: AGCS Config Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              value: test
            - type: xlrelease.StringVariable
              key: env4
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              value: prod
            - type: xlrelease.StringVariable
              key: env6
              value: hotfix
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp-agcs
            - type: xlrelease.StringVariable
              key: cluster
              value: ec1
            - type: xlrelease.StringVariable
              key: cislpagetitle
              value: 1. AGCS CISL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: cislpagetitles
              value:
              - 1. AGCS CISL Config Dashboard
            - type: xlrelease.StringVariable
              key: rappagetitle
              value: 2. AGCS RAP Config Dashboard
            - type: xlrelease.ListStringVariable
              key: rappagetitles
              value:
              - 2. AGCS RAP Config Dashboard
            - type: xlrelease.StringVariable
              key: pdmpagetitle
              value: 3. AGCS PDM Config Dashboard
            - type: xlrelease.ListStringVariable
              key: pdmpagetitles
              value:
              - 3. AGCS PDM Config Dashboard
            - type: xlrelease.StringVariable
              key: fnolconfigtitle
              value: 2. AGCS FNOL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: fnolconfigtitles
              value:
              - 2. AGCS FNOL Config Dashboard
            - type: xlrelease.StringVariable
              key: moconfigtitle
              value: 1. AGCS MO Config Dashboard
            - type: xlrelease.ListStringVariable
              key: moconfigtitles
              value:
              - 1. AGCS MO Config Dashboard
            - type: xlrelease.StringVariable
              key: smeconfigtitle
              value: 3. AGCS SME Config Dashboard
            - type: xlrelease.ListStringVariable
              key: smeconfigtitles
              value:
              - 3. AGCS SME Config Dashboard
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Global/Config Dashboards (Migrated)/Generic Config Dashboard
              (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)/OE Config Dashboards
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
        variables:
        - type: xlrelease.StringVariable
          key: releaseId1
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_AGCS_Config_Dashboard_scriptUserPassword"
        riskProfile: Default risk profile
      - template: France Config Dashboard
        scheduledStartDate: 2021-01-29T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: France Config Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: France Config Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              value: test
            - type: xlrelease.StringVariable
              key: env4
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              value: prod
            - type: xlrelease.StringVariable
              key: env6
              value: hotfix
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp-france
            - type: xlrelease.StringVariable
              key: cluster
              value: ew3
            - type: xlrelease.StringVariable
              key: cislpagetitle
              value: 1. France CISL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: cislpagetitles
              value:
              - 1. France CISL Config Dashboard
            - type: xlrelease.StringVariable
              key: rappagetitle
              value: 2. France RAP Config Dashboard
            - type: xlrelease.ListStringVariable
              key: rappagetitles
              value:
              - 2. France RAP Config Dashboard
            - type: xlrelease.StringVariable
              key: pdmpagetitle
              value: 3. France PDM Config Dashboard
            - type: xlrelease.ListStringVariable
              key: pdmpagetitles
              value:
              - 3. France PDM Config Dashboard
            - type: xlrelease.StringVariable
              key: fnolconfigtitle
              value: 2. France FNOL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: fnolconfigtitles
              value:
              - 2. France FNOL Config Dashboard
            - type: xlrelease.StringVariable
              key: moconfigtitle
              value: 1. France MO Config Dashboard
            - type: xlrelease.ListStringVariable
              key: moconfigtitles
              value:
              - 1. France MO Config Dashboard
            - type: xlrelease.StringVariable
              key: smeconfigtitle
              value: 3. France SME Config Dashboard
            - type: xlrelease.ListStringVariable
              key: smeconfigtitles
              value:
              - 3. France SME Config Dashboard
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Global/Config Dashboards (Migrated)/Generic Config Dashboard
              (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)/OE Config Dashboards
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
        variables:
        - type: xlrelease.StringVariable
          key: releaseId1
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_France_Config_Dashboard_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Germany Config Dashboard
        scheduledStartDate: 2021-01-29T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Germany Config Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Germany Config Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              value: test
            - type: xlrelease.StringVariable
              key: env4
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              value: prod
            - type: xlrelease.StringVariable
              key: env6
              value: hotfix
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp-germany
            - type: xlrelease.StringVariable
              key: cluster
              value: ec1
            - type: xlrelease.StringVariable
              key: cislpagetitle
              value: 1. Germany CISL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: cislpagetitles
              value:
              - 1. Germany CISL Config Dashboard
            - type: xlrelease.StringVariable
              key: rappagetitle
              value: 2. Germany RAP Config Dashboard
            - type: xlrelease.ListStringVariable
              key: rappagetitles
              value:
              - 2. Germany RAP Config Dashboard
            - type: xlrelease.StringVariable
              key: pdmpagetitle
              value: 3. Germany PDM Config Dashboard
            - type: xlrelease.ListStringVariable
              key: pdmpagetitles
              value:
              - 3. Germany PDM Config Dashboard
            - type: xlrelease.StringVariable
              key: fnolconfigtitle
              value: 2. Germany FNOL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: fnolconfigtitles
              value:
              - 2. Germany FNOL Config Dashboard
            - type: xlrelease.StringVariable
              key: moconfigtitle
              value: 1. Germany MO Config Dashboard
            - type: xlrelease.ListStringVariable
              key: moconfigtitles
              value:
              - 1. Germany MO Config Dashboard
            - type: xlrelease.StringVariable
              key: smeconfigtitle
              value: 3. Germany SME Config Dashboard
            - type: xlrelease.ListStringVariable
              key: smeconfigtitles
              value:
              - 3. Germany SME Config Dashboard
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Global/Config Dashboards (Migrated)/Generic Config Dashboard
              (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)/OE Config Dashboards
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
        variables:
        - type: xlrelease.StringVariable
          key: releaseId1
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Germany_Config_Dashboard_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Iberolatam Config Dashboard
        scheduledStartDate: 2021-01-29T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Iberolatam Config Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Iberolatam Config Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              value: test
            - type: xlrelease.StringVariable
              key: env4
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              value: prod
            - type: xlrelease.StringVariable
              key: env6
              value: hotfix
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp-iberolatam
            - type: xlrelease.StringVariable
              key: cluster
              value: ew3
            - type: xlrelease.StringVariable
              key: cislpagetitle
              value: 1. Iberolatam CISL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: cislpagetitles
              value:
              - 1. Iberolatam CISL Config Dashboard
            - type: xlrelease.StringVariable
              key: rappagetitle
              value: 2. Iberolatam RAP Config Dashboard
            - type: xlrelease.ListStringVariable
              key: rappagetitles
              value:
              - 2. Iberolatam RAP Config Dashboard
            - type: xlrelease.StringVariable
              key: pdmpagetitle
              value: 3. Iberolatam PDM Config Dashboard
            - type: xlrelease.ListStringVariable
              key: pdmpagetitles
              value:
              - 3. Iberolatam PDM Config Dashboard
            - type: xlrelease.StringVariable
              key: fnolconfigtitle
              value: 2. Iberolatam FNOL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: fnolconfigtitles
              value:
              - 2. Iberolatam FNOL Config Dashboard
            - type: xlrelease.StringVariable
              key: moconfigtitle
              value: 1. Iberolatam MO Config Dashboard
            - type: xlrelease.ListStringVariable
              key: moconfigtitles
              value:
              - 1. Iberolatam MO Config Dashboard
            - type: xlrelease.StringVariable
              key: smeconfigtitle
              value: 3. Iberolatam SME Config Dashboard
            - type: xlrelease.ListStringVariable
              key: smeconfigtitles
              value:
              - 3. Iberolatam SME Config Dashboard
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Global/Config Dashboards (Migrated)/Generic Config Dashboard
              (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)/OE Config Dashboards
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
        variables:
        - type: xlrelease.StringVariable
          key: releaseId1
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Iberolatam_Config_Dashboard_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Italy Config Dashboard
        scheduledStartDate: 2021-01-29T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Italy Config Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Italy Config Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              value: test
            - type: xlrelease.StringVariable
              key: env4
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              value: prod
            - type: xlrelease.StringVariable
              key: env6
              value: hotfix
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp-italy
            - type: xlrelease.StringVariable
              key: cluster
              value: ew3
            - type: xlrelease.StringVariable
              key: cislpagetitle
              value: 1. Italy CISL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: cislpagetitles
              value:
              - 1. Italy CISL Config Dashboard
            - type: xlrelease.StringVariable
              key: rappagetitle
              value: 2. Italy RAP Config Dashboard
            - type: xlrelease.ListStringVariable
              key: rappagetitles
              value:
              - 2. Italy RAP Config Dashboard
            - type: xlrelease.StringVariable
              key: pdmpagetitle
              value: 3. Italy PDM Config Dashboard
            - type: xlrelease.ListStringVariable
              key: pdmpagetitles
              value:
              - 3. Italy PDM Config Dashboard
            - type: xlrelease.StringVariable
              key: fnolconfigtitle
              value: 2. Italy FNOL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: fnolconfigtitles
              value:
              - 2. Italy FNOL Config Dashboard
            - type: xlrelease.StringVariable
              key: moconfigtitle
              value: 1. Italy MO Config Dashboard
            - type: xlrelease.ListStringVariable
              key: moconfigtitles
              value:
              - 1. Italy MO Config Dashboard
            - type: xlrelease.StringVariable
              key: smeconfigtitle
              value: 3. Italy SME Config Dashboard
            - type: xlrelease.ListStringVariable
              key: smeconfigtitles
              value:
              - 3. Italy SME Config Dashboard
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Global/Config Dashboards (Migrated)/Generic Config Dashboard
              (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)/OE Config Dashboards
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
        variables:
        - type: xlrelease.StringVariable
          key: releaseId1
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Italy_Config_Dashboard_scriptUserPassword"
        riskProfile: Default risk profile
      - template: UK Config Dashboard
        scheduledStartDate: 2021-01-29T08:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: UK Config Dashboard
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: UK Config Dashboard
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              value: intake
            - type: xlrelease.StringVariable
              key: env2
              value: dev
            - type: xlrelease.StringVariable
              key: env3
              value: test
            - type: xlrelease.StringVariable
              key: env4
              value: preprod
            - type: xlrelease.StringVariable
              key: env5
              value: prod
            - type: xlrelease.StringVariable
              key: env6
              value: hotfix
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp-uk
            - type: xlrelease.StringVariable
              key: cluster
              value: ec1
            - type: xlrelease.StringVariable
              key: cislpagetitle
              value: 1. UK CISL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: cislpagetitles
              value:
              - 1. UK CISL Config Dashboard
            - type: xlrelease.StringVariable
              key: rappagetitle
              value: 2. UK RAP Config Dashboard
            - type: xlrelease.ListStringVariable
              key: rappagetitles
              value:
              - 2. UK RAP Config Dashboard
            - type: xlrelease.StringVariable
              key: pdmpagetitle
              value: 3. UK PDM Config Dashboard
            - type: xlrelease.ListStringVariable
              key: pdmpagetitles
              value:
              - 3. UK PDM Config Dashboard
            - type: xlrelease.StringVariable
              key: fnolconfigtitle
              value: 2. UK FNOL Config Dashboard
            - type: xlrelease.ListStringVariable
              key: fnolconfigtitles
              value:
              - 2. UK FNOL Config Dashboard
            - type: xlrelease.StringVariable
              key: moconfigtitle
              value: 1. UK MO Config Dashboard
            - type: xlrelease.ListStringVariable
              key: moconfigtitles
              value:
              - 1. UK MO Config Dashboard
            - type: xlrelease.StringVariable
              key: smeconfigtitle
              value: 3. UK SME Config Dashboard
            - type: xlrelease.ListStringVariable
              key: smeconfigtitles
              value:
              - 3. UK SME Config Dashboard
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Global/Config Dashboards (Migrated)/Generic Config Dashboard
              (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)/OE Config Dashboards
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
        variables:
        - type: xlrelease.StringVariable
          key: releaseId1
          requiresValue: false
          showOnReleaseStart: false
        abortOnFailure: true
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_UK_Config_Dashboard_scriptUserPassword"
        riskProfile: Default risk profile
    - template: ABS Asset Config Dashboard (Migrated)
      scheduledStartDate: 2020-07-25T07:00:00Z
      phases:
      - phase: ABS
        tasks:
        - name: ABS
          type: xlrelease.SequentialGroup
          tasks:
          - name: registry
            type: xlrelease.SequentialGroup
            tasks:
            - name: registry Config
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${configmapname} registry config
              templateVariables:
              - type: xlrelease.StringVariable
                key: env1
                requiresValue: false
                value: ${env1}
              - type: xlrelease.StringVariable
                key: env2
                requiresValue: false
                value: ${env2}
              - type: xlrelease.StringVariable
                key: env3
                requiresValue: false
                value: ${env3}
              - type: xlrelease.StringVariable
                key: env4
                requiresValue: false
                value: ${env4}
              - type: xlrelease.StringVariable
                key: env5
                requiresValue: false
                value: ${env5}
              - type: xlrelease.StringVariable
                key: env6
                requiresValue: false
                value: ${env6}
              - type: xlrelease.StringVariable
                key: namespace
                value: ${projectName}
              - type: xlrelease.StringVariable
                key: configmapname
                value: ${configmapname}
              - type: xlrelease.StringVariable
                key: token
                requiresValue: false
                value: ${token}
              - type: xlrelease.StringVariable
                key: cluster
                description: ec1, ew3
                value: ${cluster}
              createdReleaseId: ${releaseId1}
              riskProfile: Default risk profile
              template: ITMP Product/Config Dashboards (Migrated)/Config Template
                (Migrated)
              folder: ITMP Global/Config Dashboards (Migrated)
            - name: Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId1}
            - name: Collect row
              type: xlrelease.ScriptTask
              script: |-
                releaseId = releaseVariables['releaseId1']
                myVariables = releaseApi.getVariableValues(releaseId)

                for key in myVariables:
                    if 'appRow' in key:
                        releaseVariables['htmlrow'] = myVariables[key]
                        print(releaseVariables['htmlrow'])
        color: '#0079BC'
      - phase: Confluence
        tasks:
        - name: Prepare HTML
          type: xlrelease.ScriptTask
          script: "varStart = '<h1>ABS</h1><p>This page is automatically updated every\
            \ hour and every deployment by XL Release. Any manual changes you apply\
            \ here will be overwritten by XL Release.</p>'\n\nvarRow = varStart\n\
            varRow = varRow + '<table class=\"wrapped\"><colgroup>'\n\nif releaseVariables['env1']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nif releaseVariables['env2']\
            \ != '':\n    varRow = varRow + '<col/>'\n        \nif releaseVariables['env3']\
            \ != '':\n    varRow = varRow + '<col/>'\n        \nif releaseVariables['env4']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nif releaseVariables['env5']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nvarRow = varRow + '</colgroup><tbody><tr><th\
            \ colspan=\"1\">APPLICATION</th>'\n\nif releaseVariables['env1'] != '':\n\
            \    varRow = varRow + '<th>${env1}</th>'\n    \nif releaseVariables['env2']\
            \ != '':\n    varRow = varRow + '<th>${env2}</th>'\n        \nif releaseVariables['env3']\
            \ != '':\n    varRow = varRow + '<th>${env3}</th>'\n        \nif releaseVariables['env4']\
            \ != '':\n    varRow = varRow + '<th>${env4}</th>'\n    \nif releaseVariables['env5']\
            \ != '':\n    varRow = varRow + '<th>${env5}</th>'\n    \nif releaseVariables['env6']\
            \ != '':\n    varRow = varRow + '<th>${env6}</th>'\n    \nvarRow = varRow\
            \ + '</tr>'\nvarRow = varRow + releaseVariables['htmlrow']\nvarRow = varRow\
            \ + '</tbody> </table>'\n    \nreleaseVariables['appRow'] = varRow\nprint(releaseVariables['appRow'])"
        - name: Update Dashboard
          type: confluence.updateWikiPages
          confluenceServer: ITMP Confluence
          spaceKey: ${spaceKey}
          newPageTitle: ${newPageTitle}
          newPageText: ${appRow}
          variableMapping:
            pythonScript.pageTitles: ${pageTitles}
        color: '#0079BC'
      tags:
      - staging dashboard
      variables:
      - type: xlrelease.StringVariable
        key: releaseId1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: projectName
        description: 'name of the project. This is used to create the url. Example:
          itmp-iberolatam, itmp-italy, itmp-aal'
      - type: xlrelease.StringVariable
        key: spaceKey
        showOnReleaseStart: false
        description: Value is used to connect to the correct space in Confluence.
          Default vaue is set on NANCY
        value: NANCY
      - type: xlrelease.ListStringVariable
        key: pageTitles
        description: Only add the name of the page you want to use as staging dashboard
      - type: xlrelease.StringVariable
        key: newPageTitle
        description: Value should be the same as the name you added to the titles
          list
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configmapname
      - type: xlrelease.StringVariable
        key: htmlrow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_ABS_Asset_Config_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: BMP Asset Config Dashboard (Migrated)
      scheduledStartDate: 2020-07-25T07:00:00Z
      phases:
      - phase: BFF
        tasks:
        - name: ${app}-bff
          type: xlrelease.SequentialGroup
          tasks:
          - name: ${app}-bff
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: ${app}-bff - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: ${env6}
            - type: xlrelease.StringVariable
              key: namespace
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: configmapname
              value: ${app}-bff
            - type: xlrelease.StringVariable
              key: token
              requiresValue: false
              value: ${token}
            - type: xlrelease.StringVariable
              key: cluster
              description: ec1, ew3
              value: ${cluster}
            createdReleaseId: ${releaseId1}
            riskProfile: Default risk profile
            template: ITMP Product/Config Dashboards (Migrated)/Config Template (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId1}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseId1']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['bffrow'] = myVariables[key]
                      print(releaseVariables['bffrow'])
        - name: ${app}-bff-cisl-conf
          type: xlrelease.SequentialGroup
          tasks:
          - name: ${app}-bff-cisl-conf
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: ${app}-bff-cisl - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: ${env6}
            - type: xlrelease.StringVariable
              key: namespace
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: configmapname
              value: ${app}-bff-cisl-conf
            - type: xlrelease.StringVariable
              key: token
              requiresValue: false
              value: ${token}
            - type: xlrelease.StringVariable
              key: cluster
              description: ec1, ew3
              value: ${cluster}
            createdReleaseId: ${releaseId2}
            riskProfile: Default risk profile
            template: ITMP Product/Config Dashboards (Migrated)/Config Template (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId2}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseId2']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['appbffcislconfrow'] = myVariables[key]
                      print(releaseVariables['appbffcislconfrow'])
        - name: bff-cisl-conf
          type: xlrelease.SequentialGroup
          tasks:
          - name: bff-cisl-conf
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: bff-cisl - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: ${env6}
            - type: xlrelease.StringVariable
              key: namespace
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: configmapname
              value: bff-cisl-conf
            - type: xlrelease.StringVariable
              key: token
              requiresValue: false
              value: ${token}
            - type: xlrelease.StringVariable
              key: cluster
              description: ec1, ew3
              value: ${cluster}
            createdReleaseId: ${releaseIdbffcislconf}
            riskProfile: Default risk profile
            template: ITMP Product/Config Dashboards (Migrated)/Config Template (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseIdbffcislconf}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseIdbffcislconf']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['bffcislconfrow'] = myVariables[key]
                      print(releaseVariables['bffcislconfrow'])
        color: '#0079BC'
      - phase: FE
        tasks:
        - name: ${app}-fe-environment
          type: xlrelease.SequentialGroup
          tasks:
          - name: ${app}-fe-environment
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: ${app}-fe-environment - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: ${env6}
            - type: xlrelease.StringVariable
              key: namespace
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: configmapname
              value: ${app}-fe-environment
            - type: xlrelease.StringVariable
              key: token
              requiresValue: false
              value: ${token}
            - type: xlrelease.StringVariable
              key: cluster
              description: ec1, ew3
              value: ${cluster}
            createdReleaseId: ${releaseId3}
            riskProfile: Default risk profile
            template: ITMP Product/Config Dashboards (Migrated)/Config Template (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId3}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseId3']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['feenvrow'] = myVariables[key]
                      print(releaseVariables['feenvrow'])
        - name: ${app}-fe-headers
          type: xlrelease.SequentialGroup
          tasks:
          - name: ${app}-fe-headers
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: ${app}-fe-header-config - ${projectName}
            templateVariables:
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: env3
              requiresValue: false
              value: ${env3}
            - type: xlrelease.StringVariable
              key: env4
              requiresValue: false
              value: ${env4}
            - type: xlrelease.StringVariable
              key: env5
              requiresValue: false
              value: ${env5}
            - type: xlrelease.StringVariable
              key: env6
              requiresValue: false
              value: ${env6}
            - type: xlrelease.StringVariable
              key: namespace
              value: ${projectName}
            - type: xlrelease.StringVariable
              key: configmapname
              value: ${app}-fe-header-config
            - type: xlrelease.StringVariable
              key: token
              requiresValue: false
              value: ${token}
            - type: xlrelease.StringVariable
              key: cluster
              description: ec1, ew3
              value: ${cluster}
            createdReleaseId: ${releaseId4}
            riskProfile: Default risk profile
            template: ITMP Product/Config Dashboards (Migrated)/Config Template (Migrated)
            folder: ITMP Global/Config Dashboards (Migrated)
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId4}
          - name: Collect row
            type: xlrelease.ScriptTask
            script: |-
              releaseId = releaseVariables['releaseId4']
              myVariables = releaseApi.getVariableValues(releaseId)

              for key in myVariables:
                  if 'appRow' in key:
                      releaseVariables['feheadrow'] = myVariables[key]
                      print(releaseVariables['feheadrow'])
        color: '#0079BC'
      - phase: Confluence
        tasks:
        - name: Prepare HTML
          type: xlrelease.ScriptTask
          script: "varStart = '<h1>BMP Journeys</h1><p>This page is automatically\
            \ updated every hour and every deployment by XL Release. Any manual changes\
            \ you apply here will be overwritten by XL Release.</p>'\n\nvarRow = varStart\n\
            varRow = varRow + '<table class=\"wrapped\"><colgroup>'\n\nif releaseVariables['env1']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nif releaseVariables['env2']\
            \ != '':\n    varRow = varRow + '<col/>'\n        \nif releaseVariables['env3']\
            \ != '':\n    varRow = varRow + '<col/>'\n        \nif releaseVariables['env4']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nif releaseVariables['env5']\
            \ != '':\n    varRow = varRow + '<col/>'\n    \nvarRow = varRow + '</colgroup><tbody><tr><th\
            \ colspan=\"1\">APPLICATION</th>'\n\nif releaseVariables['env1'] != '':\n\
            \    varRow = varRow + '<th>${env1}</th>'\n    \nif releaseVariables['env2']\
            \ != '':\n    varRow = varRow + '<th>${env2}</th>'\n        \nif releaseVariables['env3']\
            \ != '':\n    varRow = varRow + '<th>${env3}</th>'\n        \nif releaseVariables['env4']\
            \ != '':\n    varRow = varRow + '<th>${env4}</th>'\n    \nif releaseVariables['env5']\
            \ != '':\n    varRow = varRow + '<th>${env5}</th>'\n    \nif releaseVariables['env6']\
            \ != '':\n    varRow = varRow + '<th>${env6}</th>'\n    \nvarRow = varRow\
            \ + '</tr>'\nvarRow = varRow + releaseVariables['feenvrow'] + releaseVariables['feheadrow']\
            \ + releaseVariables['bffrow'] + releaseVariables['appbffcislconfrow']\
            \ + releaseVariables['bffcislconfrow']\nvarRow = varRow + '</tbody> </table>'\n\
            \    \nreleaseVariables['appRow'] = varRow\nprint(releaseVariables['appRow'])"
        - name: Update Dashboard
          type: confluence.updateWikiPages
          confluenceServer: ITMP Confluence
          spaceKey: ${spaceKey}
          newPageTitle: ${newPageTitle}
          newPageText: ${appRow}
          variableMapping:
            pythonScript.pageTitles: ${pageTitles}
        color: '#0079BC'
      tags:
      - staging dashboard
      variables:
      - type: xlrelease.StringVariable
        key: releaseId1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: projectName
        description: 'name of the project. This is used to create the url. Example:
          itmp-iberolatam, itmp-italy, itmp-aal'
      - type: xlrelease.StringVariable
        key: spaceKey
        showOnReleaseStart: false
        description: Value is used to connect to the correct space in Confluence.
          Default vaue is set on NANCY
        value: NANCY
      - type: xlrelease.ListStringVariable
        key: pageTitles
        description: Only add the name of the page you want to use as staging dashboard
      - type: xlrelease.StringVariable
        key: newPageTitle
        description: Value should be the same as the name you added to the titles
          list
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.StringVariable
        key: app
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - mo
          - fnol
          - sme
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
      - type: xlrelease.StringVariable
        key: releaseId5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseIdbffcislconf
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_BMP_Asset_Config_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: Config Template (Migrated)
      scheduledStartDate: 2021-01-17T08:00:00Z
      phases:
      - phase: Get Token
        tasks:
        - name: Get Token
          type: xlrelease.ScriptTask
          script: "if releaseVariables['cluster'] == 'ec1':\n    releaseVariables['token']\
            \ = '${global.ec1token}'\n    print('set ec1 token')\n\nif releaseVariables['cluster']\
            \ == 'ew3':\n    releaseVariables['token'] = '${global.ew3token}'\n  \
            \  print('set ew3 token')\n    \nif releaseVariables['cluster'] == 'ase1':\n\
            \    releaseVariables['token'] = '${global.ase1token}'\n    print('set\
            \ ase1 token')"
        color: '#0079BC'
      - phase: EC1
        tasks:
        - name: EC1
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == "ec1"
          tasks:
          - name: ${configmapname} - ${env1} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env1}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['output1'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output1}
          - name: ${configmapname} - ${env2} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env2}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['output2'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output2}
          - name: ${configmapname} - ${env3} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env3}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['output3'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output3}
          - name: ${configmapname} - ${env4} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env4}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['output4'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output4}
          - name: ${configmapname} - ${env5} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env5}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['output5'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output5}
          - name: ${configmapname} - ${env6} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EC1 Openshift cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env6}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['output6'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output6}
        color: '#0079BC'
      - phase: EW3
        tasks:
        - name: EW3
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['cluster'] == "ew3"
          tasks:
          - name: ${configmapname} - ${env1} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env1}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env1'] != ''
            failureHandler: |-
              releaseVariables['output1'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output1}
          - name: ${configmapname} - ${env2} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env2}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env2'] != ''
            failureHandler: |-
              releaseVariables['output2'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output2}
          - name: ${configmapname} - ${env3} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env3}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env3'] != ''
            failureHandler: |-
              releaseVariables['output3'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output3}
          - name: ${configmapname} - ${env4} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env4}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env4'] != ''
            failureHandler: |-
              releaseVariables['output4'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output4}
          - name: ${configmapname} - ${env5} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env5}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env5'] != ''
            failureHandler: |-
              releaseVariables['output5'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output5}
          - name: ${configmapname} - ${env6} Configmap
            type: allianz.GetConfigMapFromOpenshift
            server: EW3 Openshift Cluster
            oc_session_token: ${token}
            oc_namespace: ${namespace}-${env6}
            oc_configmap: ${configmapname}
            precondition: releaseVariables['env6'] != ''
            failureHandler: |-
              releaseVariables['output6'] = 'Error'

              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.configmap_content: ${output6}
        color: '#0079BC'
      - phase: Create HTML Rows
        tasks:
        - name: Process Outputs
          type: xlrelease.ScriptTask
          script: |-
            clean1 = releaseVariables['output1'].replace("&", "&amp;").replace("<", "&lt;")
            clean2 = releaseVariables['output2'].replace("&", "&amp;").replace("<", "&lt;")
            clean3 = releaseVariables['output3'].replace("&", "&amp;").replace("<", "&lt;")
            clean4 = releaseVariables['output4'].replace("&", "&amp;").replace("<", "&lt;")
            clean5 = releaseVariables['output5'].replace("&", "&amp;").replace("<", "&lt;")
            clean6 = releaseVariables['output6'].replace("&", "&amp;").replace("<", "&lt;")

            if 'cisl-registry' in releaseVariables['configmapname'] or 'rap' in releaseVariables['configmapname'] or 'pdm' in releaseVariables['configmapname']:
                print("cisl, rap or pdm")
                releaseVariables['list1'] = clean1.split("\n")
                releaseVariables['list2'] = clean2.split("\n")
                releaseVariables['list3'] = clean3.split("\n")
                releaseVariables['list4'] = clean4.split("\n")
                releaseVariables['list5'] = clean5.split("\n")
                releaseVariables['list6'] = clean6.split("\n")
            else:
                print("bmp journey")
                releaseVariables['list1'] = clean1.split(',')
                releaseVariables['list2'] = clean2.split(',')
                releaseVariables['list3'] = clean3.split(',')
                releaseVariables['list4'] = clean4.split(',')
                releaseVariables['list5'] = clean5.split(',')
                releaseVariables['list6'] = clean6.split(',')

            #print(releaseVariables['list1'])
            print(releaseVariables['list2'])
            #print(releaseVariables['list3'])
            #print(releaseVariables['list4'])
            #print(releaseVariables['list5'])
            #print(releaseVariables['list6'])
        - name: Create HTML
          type: xlrelease.ScriptTask
          script: "varStart = '<tr><td colspan=\"1\">${configmapname}</td>'\r\nvarEnd\
            \ = '</tr>'\r\nvarRow = varStart\r\n\r\nif releaseVariables['env1'] !=\
            \ '':\r\n    varRow = varRow + '<td>'\r\n    for item in releaseVariables['list1']:\r\
            \n        varRow = varRow + item + '<br/>'\r\n    varRow = varRow + '</td>'\r\
            \n    \r\nif releaseVariables['env2'] != '':\r\n    varRow = varRow +\
            \ '<td>'\r\n    for item in releaseVariables['list2']:\r\n        varRow\
            \ = varRow + item + '<br/>'\r\n    varRow = varRow + '</td>'\r\n    \r\
            \nif releaseVariables['env3'] != '':\r\n    varRow = varRow + '<td>'\r\
            \n    for item in releaseVariables['list3']:\r\n        varRow = varRow\
            \ + item + '<br/>'\r\n    varRow = varRow + '</td>'\r\n    \r\nif releaseVariables['env4']\
            \ != '':\r\n    varRow = varRow + '<td>'\r\n    for item in releaseVariables['list4']:\r\
            \n        varRow = varRow + item + '<br/>'\r\n    varRow = varRow + '</td>'\r\
            \n    \r\nif releaseVariables['env5'] != '':\r\n    varRow = varRow +\
            \ '<td>'\r\n    for item in releaseVariables['list5']:\r\n        varRow\
            \ = varRow + item + '<br/>'\r\n    varRow = varRow + '</td>'\r\n    \r\
            \nif releaseVariables['env6'] != '':\r\n    varRow = varRow + '<td>'\r\
            \n    for item in releaseVariables['list6']:\r\n        varRow = varRow\
            \ + item + '<br/>'\r\n    varRow = varRow + '</td>'\r\n    \r\nvarRow\
            \ = varRow + varEnd\r\n\r\nreleaseVariables['appRow'] = varRow\r\nprint(releaseVariables['appRow'])"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: env1
      - type: xlrelease.StringVariable
        key: env2
      - type: xlrelease.StringVariable
        key: env3
      - type: xlrelease.StringVariable
        key: env4
      - type: xlrelease.StringVariable
        key: env5
      - type: xlrelease.StringVariable
        key: env6
      - type: xlrelease.StringVariable
        key: namespace
      - type: xlrelease.StringVariable
        key: configmapname
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
      - type: xlrelease.StringVariable
        key: output1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: output2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: output3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: output4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: output5
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: output6
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: appRow
        requiresValue: false
        showOnReleaseStart: false
        multiline: true
      - type: xlrelease.StringVariable
        key: cluster
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_Config_Template__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: Generic BMP Config Dashboard (Migrated)
      scheduledStartDate: 2020-07-25T07:00:00Z
      phases:
      - phase: MO
        tasks:
        - name: MO Config
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[1].value: ${moconfigtitles}
          newReleaseTitle: MO Config - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            description: 'name of the project. This is used to create the url. Example:
              itmp-iberolatam, itmp-italy, itmp-aal'
            value: ${projectName}
          - type: xlrelease.ListStringVariable
            key: pageTitles
            description: Only add the name of the page you want to use as staging
              dashboard
          - type: xlrelease.StringVariable
            key: newPageTitle
            description: Value should be the same as the name you added to the titles
              list
            value: ${moconfigtitle}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: app
            value: mo
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          createdReleaseId: ${releaseId1}
          riskProfile: Default risk profile
          template: ITMP Global/Config Dashboards (Migrated)/BMP Asset Config Dashboard
            (Migrated)
          folder: ITMP Global/Config Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${releaseId1}
        color: '#0079BC'
      - phase: FNOL
        tasks:
        - name: FNOL Config
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[1].value: ${fnolconfigtitles}
          newReleaseTitle: FNOL Config - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            description: 'name of the project. This is used to create the url. Example:
              itmp-iberolatam, itmp-italy, itmp-aal'
            value: ${projectName}
          - type: xlrelease.ListStringVariable
            key: pageTitles
            description: Only add the name of the page you want to use as staging
              dashboard
          - type: xlrelease.StringVariable
            key: newPageTitle
            description: Value should be the same as the name you added to the titles
              list
            value: ${fnolconfigtitle}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: app
            value: fnol
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          createdReleaseId: ${releaseId2}
          riskProfile: Default risk profile
          template: ITMP Global/Config Dashboards (Migrated)/BMP Asset Config Dashboard
            (Migrated)
          folder: ITMP Global/Config Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${releaseId2}
        color: '#0079BC'
      - phase: SME
        tasks:
        - name: SME Config
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[1].value: ${smeconfigtitles}
          newReleaseTitle: SME Config - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            description: 'name of the project. This is used to create the url. Example:
              itmp-iberolatam, itmp-italy, itmp-aal'
            value: ${projectName}
          - type: xlrelease.ListStringVariable
            key: pageTitles
            description: Only add the name of the page you want to use as staging
              dashboard
          - type: xlrelease.StringVariable
            key: newPageTitle
            description: Value should be the same as the name you added to the titles
              list
            value: ${smeconfigtitle}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: app
            value: sme
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          createdReleaseId: ${releaseId2}
          riskProfile: Default risk profile
          template: ITMP Global/Config Dashboards (Migrated)/BMP Asset Config Dashboard
            (Migrated)
          folder: ITMP Global/Config Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${releaseId2}
        color: '#0079BC'
      tags:
      - staging dashboard
      variables:
      - type: xlrelease.StringVariable
        key: releaseId1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: projectName
        description: 'name of the project. This is used to create the url. Example:
          itmp-iberolatam, itmp-italy, itmp-aal'
      - type: xlrelease.StringVariable
        key: spaceKey
        showOnReleaseStart: false
        description: Value is used to connect to the correct space in Confluence.
          Default vaue is set on NANCY
        value: NANCY
      - type: xlrelease.StringVariable
        key: env1
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env2
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env3
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env4
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env5
        requiresValue: false
      - type: xlrelease.StringVariable
        key: env6
        requiresValue: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.ListStringVariable
        key: fnolconfigtitles
      - type: xlrelease.StringVariable
        key: fnolconfigtitle
      - type: xlrelease.ListStringVariable
        key: moconfigtitles
      - type: xlrelease.StringVariable
        key: moconfigtitle
      - type: xlrelease.ListStringVariable
        key: smeconfigtitles
      - type: xlrelease.StringVariable
        key: smeconfigtitle
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_Generic_BMP_Config_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
    - template: Generic Config Dashboard (Migrated)
      scheduledStartDate: 2021-01-19T08:00:00Z
      phases:
      - phase: BMP
        tasks:
        - name: BMP
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[8].value: ${fnolconfigtitles}
            templateVariables[10].value: ${moconfigtitles}
            templateVariables[12].value: ${smeconfigtitles}
          newReleaseTitle: BMP Config Dashboard - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            description: 'name of the project. This is used to create the url. Example:
              itmp-iberolatam, itmp-italy, itmp-aal'
            value: ${projectName}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          - type: xlrelease.ListStringVariable
            key: fnolconfigtitles
          - type: xlrelease.StringVariable
            key: fnolconfigtitle
            value: ${fnolconfigtitle}
          - type: xlrelease.ListStringVariable
            key: moconfigtitles
          - type: xlrelease.StringVariable
            key: moconfigtitle
            value: ${moconfigtitle}
          - type: xlrelease.ListStringVariable
            key: smeconfigtitles
          - type: xlrelease.StringVariable
            key: smeconfigtitle
            value: ${smeconfigtitle}
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          createdReleaseId: ${releaseId1}
          riskProfile: Default risk profile
          template: ITMP Global/Config Dashboards (Migrated)/Generic BMP Config Dashboard
            (Migrated)
          folder: ITMP Global/Config Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${releaseId1}
        color: '#0079BC'
      - phase: CISL
        tasks:
        - name: CISL
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[1].value: ${cislpagetitles}
          newReleaseTitle: CISL Config Dashboard - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            description: 'name of the project. This is used to create the url. Example:
              itmp-iberolatam, itmp-italy, itmp-aal'
            value: ${projectName}
          - type: xlrelease.ListStringVariable
            key: pageTitles
            description: Only add the name of the page you want to use as staging
              dashboard
          - type: xlrelease.StringVariable
            key: newPageTitle
            description: Value should be the same as the name you added to the titles
              list
            value: ${cislpagetitle}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: configmapname
            value: cisl-registry
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          createdReleaseId: ${releaseId2}
          riskProfile: Default risk profile
          template: ITMP Global/Config Dashboards (Migrated)/ABS Asset Config Dashboard
            (Migrated)
          folder: ITMP Global/Config Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${releaseId2}
        color: '#0079BC'
      - phase: RAP
        tasks:
        - name: RAP
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[1].value: ${rappagetitles}
          newReleaseTitle: RAP Config Dashboard - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            description: 'name of the project. This is used to create the url. Example:
              itmp-iberolatam, itmp-italy, itmp-aal'
            value: ${projectName}
          - type: xlrelease.ListStringVariable
            key: pageTitles
            description: Only add the name of the page you want to use as staging
              dashboard
          - type: xlrelease.StringVariable
            key: newPageTitle
            description: Value should be the same as the name you added to the titles
              list
            value: ${rappagetitle}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: configmapname
            value: rap-registry
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          createdReleaseId: ${releaseId3}
          riskProfile: Default risk profile
          template: ITMP Global/Config Dashboards (Migrated)/ABS Asset Config Dashboard
            (Migrated)
          folder: ITMP Global/Config Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${releaseId3}
        color: '#0079BC'
      - phase: PDM
        tasks:
        - name: PDM
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[1].value: ${pdmpagetitles}
          newReleaseTitle: PDM Config Dashboard - ${projectName}
          templateVariables:
          - type: xlrelease.StringVariable
            key: projectName
            description: 'name of the project. This is used to create the url. Example:
              itmp-iberolatam, itmp-italy, itmp-aal'
            value: ${projectName}
          - type: xlrelease.ListStringVariable
            key: pageTitles
            description: Only add the name of the page you want to use as staging
              dashboard
          - type: xlrelease.StringVariable
            key: newPageTitle
            description: Value should be the same as the name you added to the titles
              list
            value: ${pdmpagetitle}
          - type: xlrelease.StringVariable
            key: env1
            requiresValue: false
            value: ${env1}
          - type: xlrelease.StringVariable
            key: env2
            requiresValue: false
            value: ${env2}
          - type: xlrelease.StringVariable
            key: env3
            requiresValue: false
            value: ${env3}
          - type: xlrelease.StringVariable
            key: env4
            requiresValue: false
            value: ${env4}
          - type: xlrelease.StringVariable
            key: env5
            requiresValue: false
            value: ${env5}
          - type: xlrelease.StringVariable
            key: env6
            requiresValue: false
            value: ${env6}
          - type: xlrelease.StringVariable
            key: configmapname
            value: pdm-conf
          - type: xlrelease.StringVariable
            key: cluster
            value: ${cluster}
          - type: xlrelease.StringVariable
            key: token
            requiresValue: false
            value: ${token}
          createdReleaseId: ${releaseId4}
          riskProfile: Default risk profile
          template: ITMP Global/Config Dashboards (Migrated)/ABS Asset Config Dashboard
            (Migrated)
          folder: ITMP Global/Config Dashboards (Migrated)
        - name: Wait
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${releaseId4}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: env1
      - type: xlrelease.StringVariable
        key: env2
      - type: xlrelease.StringVariable
        key: env3
      - type: xlrelease.StringVariable
        key: env4
      - type: xlrelease.StringVariable
        key: env5
      - type: xlrelease.StringVariable
        key: env6
      - type: xlrelease.StringVariable
        key: projectName
      - type: xlrelease.StringVariable
        key: releaseId1
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId2
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId3
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: releaseId4
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: cluster
      - type: xlrelease.StringVariable
        key: cislpagetitle
      - type: xlrelease.ListStringVariable
        key: cislpagetitles
      - type: xlrelease.StringVariable
        key: rappagetitle
      - type: xlrelease.ListStringVariable
        key: rappagetitles
      - type: xlrelease.StringVariable
        key: pdmpagetitle
      - type: xlrelease.ListStringVariable
        key: pdmpagetitles
      - type: xlrelease.StringVariable
        key: fnolconfigtitle
      - type: xlrelease.ListStringVariable
        key: fnolconfigtitles
      - type: xlrelease.StringVariable
        key: moconfigtitle
      - type: xlrelease.ListStringVariable
        key: moconfigtitles
      - type: xlrelease.StringVariable
        key: smeconfigtitle
      - type: xlrelease.ListStringVariable
        key: smeconfigtitles
      - type: xlrelease.StringVariable
        key: token
        requiresValue: false
        showOnReleaseStart: false
      abortOnFailure: true
      scriptUsername: gjhfk9f
      scriptUserPassword: !value "xlrelease_Release_Generic_Config_Dashboard__Migrated__scriptUserPassword"
      riskProfile: Default risk profile
  - directory: Release
    children:
    - template: XLR_New_Template_Creation
      description: This Template allows you to create a Global Deployment template
        for the new component
      scheduledStartDate: 2021-07-20T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: XLR Template creation
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: XLRelease/job/XL-Release-new-template-creation
          jobParameters: |-
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            KEEPASS_SECRET_NAME=${KEEPASS_SECRET_NAME}
            XL_APP_URL=${XL_APP_URL}
            GITHUB_ORG=${folder.GIT_ORG}
            GITHUB_BRANCH=${GITHUB_BRANCH}
            TEMPLATE_TYPE=${TEMPLATE_TYPE}
            APP_NAME=${APP_NAME}
            JOB_PATH=${JOB_PATH}
            JENKINS_PARAMETER=${JENKINS_PARAMETER}
      variables:
      - type: xlrelease.StringVariable
        key: KEEPASS_SECRET_NAME
      - type: xlrelease.StringVariable
        key: XL_APP_URL
      - type: xlrelease.StringVariable
        key: GITHUB_BRANCH
      - type: xlrelease.StringVariable
        key: TEMPLATE_TYPE
      - type: xlrelease.StringVariable
        key: APP_NAME
      - type: xlrelease.StringVariable
        key: JENKINS_PARAMETER
      - type: xlrelease.StringVariable
        key: JOB_PATH
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_XLR_New_Template_Creation_scriptUserPassword"
      riskProfile: Default risk profile
  - directory: Development
    children:
    - template: ABS_Application_Logs
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: Log_Retrival
        tasks:
        - name: ABS_Application_Log
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Application_Log
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            EMAIL_LIST=${EMAIL_LIST}
          description: Job will provide the respective application live logs from
            openshift container.
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: 'Application Type eg: rap or cisl'
      - type: xlrelease.StringVariable
        key: STAGE
        description: 'Environment stage name eg: dev or test or intake'
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
        description: Mail id to which the log should be delivered.
      riskProfile: Default risk profile
    - template: ABS_Application_Restart
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Application_Restart
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Application_Restart
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
          description: Job will restart the respective application based.
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: 'Application Type eg: rap or cisl'
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      riskProfile: Default risk profile
    - template: ABS_Jacoco_Report
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: Log_Retrival
        tasks:
        - name: ABS_Jacoco_Report
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Jacoco_Report
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            EMAIL_LIST=${EMAIL_LIST}
          description: Job will deliver the jacoco report for the specified environment
            and will be delivered to the mailID.
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: 'Application Type eg: rap or cisl'
      - type: xlrelease.StringVariable
        key: STAGE
        description: 'Environment stage name eg: dev or test or intake'
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
        description: Mail id to which the log should be delivered.
      riskProfile: Default risk profile
    - template: ABS_Math_Logs
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: Math_log_retrival
        tasks:
        - name: Math_logs
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Math_trace_log
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            LOG_TYPE=${LOG_TYPE}
            EMAIL_LIST=${EMAIL_LIST}
          description: Job will retrive math logs or trace file form the specified
            trace location. This is used until RSS replaces MRM
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: 'Application Type eg: rap or cisl'
      - type: xlrelease.StringVariable
        key: LOG_TYPE
        description: 'Math log type eg: math_trace or mrm log'
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
        description: Mail id to which the log should be delivered.
      riskProfile: Default risk profile
    - template: ABS_Sonarqube_Quality_Report
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: Log_Retrival
        tasks:
        - name: ABS_Sonar_Report
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Sonar-Report
          jobParameters: |-
            APP_NAME=${APP_NAME}
            emailRecipients=${EMAIL_LIST}
          description: Job will deliver the sonar report for the specified application
            and will be delivered to the mailID.
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
        description: Mail id to which the log should be delivered.
      - type: xlrelease.StringVariable
        key: APP_NAME
      riskProfile: Default risk profile
    - template: AOMS_Application_Restart
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: AOMS_Restart
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Application_Restart
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
          description: Job will restart AOMS applications
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: Application Type specific to AOMS
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      riskProfile: Default risk profile
    - template: CISL_Registry_Deploy
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Registry_Deploy
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/cisl-registry-deploy
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            GIT_BRANCH=${GitBranch}
            STAGE=${STAGE}
            CONFIG_TYPE=${CONFIG_TYPE}
          description: deploy cisl registry
      variables:
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch from where registry should be picked
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      riskProfile: Default risk profile
    - template: Feature_Branch_Creation
      scheduledStartDate: 2020-07-09T03:30:00Z
      phases:
      - phase: Branch_Creation
        tasks:
        - name: Branch_Creation
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/abs-branch-create
          jobParameters: |-
            BRANCH_TYPE=${BRANCH_TYPE}
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            VERSION_TAG=${VERSION_TAG or SOURCE_BRANCH}
            TARGET_BRANCH=${TARGET_BRANCH}
          description: for feature branch creation.
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: BRANCH_TYPE
      - type: xlrelease.StringVariable
        key: VERSION_TAG or SOURCE_BRANCH
      - type: xlrelease.StringVariable
        key: TARGET_BRANCH
      riskProfile: Default risk profile
    - template: GDF_Application_Restart
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Application_Restart
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Application_Restart
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
          description: used for restarting GDF applications
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: Application Type specific to GDF components
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      riskProfile: Default risk profile
    - template: New_Branch_Creation
      scheduledStartDate: 2020-07-09T03:30:00Z
      phases:
      - phase: Branch_Creation
        tasks:
        - name: Branch_Creation
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/abs-branch-create
          jobParameters: |-
            BRANCH_TYPE=${BRANCH_TYPE}
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            VERSION_TAG=${VERSION_TAG}
            TARGET_BRANCH=${TARGET_BRANCH}
          description: used for branch creation
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: BRANCH_TYPE
      - type: xlrelease.StringVariable
        key: VERSION_TAG
      - type: xlrelease.StringVariable
        key: TARGET_BRANCH
        requiresValue: false
        showOnReleaseStart: false
      riskProfile: Default risk profile
    - template: Openshift_File_Retrieval_ASE1_ASIA
      scheduledStartDate: 2021-03-23T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Openshift File Retrieval
          type: jenkins.Build
          jenkinsServer: Jenkins ITMP Asia ASE1
          jobName: ITMP-ABS/job/openshift_get_file
          jobParameters: |-
            PROJECT_NAME_PREFIX=${PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            LOG_PATH=${LOG_PATH}
            EMAIL_LIST=${EMAIL_LIST}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
      - type: xlrelease.StringVariable
        key: LOG_PATH
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: PROJECT_NAME_PREFIX
        showOnReleaseStart: false
        value: itmp-asia
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Openshift_File_Retrieval_ASE1_ASIA_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Openshift_File_Retrieval_EC1
      scheduledStartDate: 2021-03-23T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Openshift File Retrieval
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/openshift_get_file
          jobParameters: |-
            PROJECT_NAME_PREFIX=${PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            LOG_PATH=${LOG_PATH}
            EMAIL_LIST=${EMAIL_LIST}
          description: Used for Openshift file retrieval if we defined the correct
            path..
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
      - type: xlrelease.StringVariable
        key: LOG_PATH
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: PROJECT_NAME_PREFIX
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Openshift_File_Retrieval_EC1_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Openshift_File_Retrieval_EW3_Iberolatam
      scheduledStartDate: 2021-03-23T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Openshift File Retrieval
          type: jenkins.Build
          jenkinsServer: Jenkins ITMP Iberolatam
          jobName: ITMP-ABS/job/openshift_get_file
          jobParameters: |-
            PROJECT_NAME_PREFIX=${PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            LOG_PATH=${LOG_PATH}
            EMAIL_LIST=${EMAIL_LIST}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
      - type: xlrelease.StringVariable
        key: LOG_PATH
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: PROJECT_NAME_PREFIX
        showOnReleaseStart: false
        value: itmp-iberolatam
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Openshift_File_Retrieval_EW3_Iberolatam_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Openshift_File_Retrieval_EW3_Italy
      scheduledStartDate: 2021-03-23T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Openshift File Retrieval
          type: jenkins.Build
          jenkinsServer: Jenkins ITMP Italy
          jobName: ITMP-ABS/job/openshift_get_file
          jobParameters: |-
            PROJECT_NAME_PREFIX=${PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            LOG_PATH=${LOG_PATH}
            EMAIL_LIST=${EMAIL_LIST}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
      - type: xlrelease.StringVariable
        key: LOG_PATH
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: PROJECT_NAME_PREFIX
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Openshift_File_Retrieval_EW3_Italy_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Openshift_Orbit_Log_Retrieval_EC1
      scheduledStartDate: 2021-03-23T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Openshift File Retrieval
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/openshift_get_file
          jobParameters: |-
            PROJECT_NAME_PREFIX=${PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            LOG_PATH=${LOG_PATH}
            FILE_NAME=${FILE_NAME}
            EMAIL_LIST=${EMAIL_LIST}
          description: Used for Openshift file retrieval if we defined the correct
            path..
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
      - type: xlrelease.StringVariable
        key: LOG_PATH
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: PROJECT_NAME_PREFIX
      - type: xlrelease.StringVariable
        key: FILE_NAME
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Openshift_Orbit_Log_Retrieval_EC1_scriptUserPassword"
      riskProfile: Default risk profile
    - template: RADARLIVE_Application_Logs
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: Log_Retrival
        tasks:
        - name: RADARLIVE_Application_Log
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Application_Log
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
            CONTAINER=
            EMAIL_LIST=${EMAIL_LIST}
          description: used for getting radarlive pod live logs
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: 'Application type eg: radarlive-dpoandschedulemanager'
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      - type: xlrelease.StringVariable
        key: CONTAINER
        description: 'name of radarlive conatiner for which log requires eg: radarlive-dpo'
      - type: xlrelease.StringVariable
        key: EMAIL_LIST
        description: Mail id to which the log should be delivered.
      riskProfile: Default risk profile
    - template: RADARLIVE_Application_Restart
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Application_Restart
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/Application_Restart
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            APPLICATION_TYPE=${APPLICATION_TYPE}
            STAGE=${STAGE}
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION_TYPE
        description: Application Type
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      riskProfile: Default risk profile
    - template: RAP_Registry_Deploy
      scheduledStartDate: 2020-06-25T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Registry_Deploy
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/rap-registry-deploy
          jobParameters: |-
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            GIT_BRANCH=${GitBranch}
            STAGE=${STAGE}
            CONFIG_TYPE=${CONFIG_TYPE}
          description: used for rap registry deploy
      variables:
      - type: xlrelease.StringVariable
        key: STAGE
        description: Environment stage name
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git branch from where registry should be picked
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      riskProfile: Default risk profile
    - template: Reboot_Application
      scheduledStartDate: 2021-02-18T08:00:00Z
      phases:
      - phase: Reboot
        tasks:
        - name: Reboot
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP - Scheduled Restart
          jobParameters: |-
            CLUSTER=aws-ec1
            OE=${OE}
            APPLICATION=${APPLICATION}
            STAGE=${STAGE}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - rap
          - cisl
          - rss
          - mo-bff
          - mo-fe
          - fnol-bff
          - fnol-fe
          - aoms-thunderhead
      - type: xlrelease.StringVariable
        key: STAGE
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - dev
          - test
          - preprod
          - hotfix
          - sandbox
          - intake
          - demo
          - dev20
          - hotfix2
          - temp
          - upgrade
          - perf
          - coreupgrade
      - type: xlrelease.StringVariable
        key: OE
        value: it-master-platform
      riskProfile: Default risk profile
    - template: TargetPlatform_Pluginlist
      scheduledStartDate: 2021-04-09T03:30:00Z
      phases:
      - phase: Plugin list extraction
        tasks:
        - name: P2 plugin list
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/abs-targetplatform-pluginlist
          jobParameters: |-
            APP_NAME=${APP_NAME}
            VERSION=${VERSION}
            UNIT_NAME=${folder.UNIT_NAME}
            emailRecipients=${emailRecipients}
          description: |-
            Job will extract the list of plugins, for the specified application and version.
            Plugin list will be send via mail if mailID mentioned.
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APP_NAME
      - type: xlrelease.StringVariable
        key: VERSION
      - type: xlrelease.StringVariable
        key: emailRecipients
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_TargetPlatform_Pluginlist_scriptUserPassword"
      riskProfile: Default risk profile
  - directory: Build
    children:
    - template: AIRWAVE Build
      scheduledStartDate: 2021-07-07T03:30:00Z
      phases:
      - phase: Airwave Build
        tasks:
        - name: Trigger builds
          type: xlrelease.ParallelGroup
          tasks:
          - name: Airwave Build
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-ABS/job/abs-airwave-build
            jobParameters: |-
              UNIT_NAME=${folder.UNIT_NAME}
              PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
              ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
              AIRCONF_CONFIG_GIT_TAG=${AIRWAVE_ABS_GIT_BRANCH}
            precondition: not releaseVariables['SKIP_AIRWAVE_BUILD']
            variableMapping:
              pythonScript.buildNumber: ${AIRWAVE_VERSION}
          - name: Facade Build
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-ABS/job/facade-XLRelease-build
            jobParameters: |-
              GIT_ORG=${folder.GIT_ORG}
              GIT_REPO=${folder.GIT_REPO}
              GIT_BRANCH=${FACADE_ABS_GIT_BRANCH}
              UNIT_NAME=${folder.UNIT_NAME}
              ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
              PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
              SKIP_SONAR_BUILD=${SKIP_FACADE_SONAR_BUILD}
              SKIP_TEST_COVERAGE_BUILD=${SKIP_FACADE_TEST_COVERAGE_BUILD}
            precondition: not releaseVariables['SKIP_FACADE_BUILD']
            variableMapping:
              pythonScript.buildNumber: ${FACADE_VERSION}
        - name: Get Versions From Jenkins build
          type: xlrelease.ParallelGroup
          tasks:
          - name: Get Airwave Version From Jenkins
            type: jenkins.ConsoleOutFindString
            server: Service Owner Jenkins global
            jobPath: /job/ITMP-ABS/job/abs-airwave-build
            buildNumber: ${AIRWAVE_VERSION}
            leftSearch: 'New Build Number:'
            precondition: not releaseVariables['SKIP_AIRWAVE_BUILD']
            variableMapping:
              pythonScript.searchResult: ${AIRWAVE_VERSION}
          - name: Get Facade Version From Jenkins
            type: jenkins.ConsoleOutFindString
            server: Service Owner Jenkins global
            jobPath: /job/ITMP-ABS/job/facade-XLRelease-build
            buildNumber: ${FACADE_VERSION}
            leftSearch: 'New Build Number:'
            precondition: not releaseVariables['SKIP_FACADE_BUILD']
            variableMapping:
              pythonScript.searchResult: ${FACADE_VERSION}
        - name: Airwave + facade Docker image
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/facade-XLRelease-build-dockerimage
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${FACADE_ABS_GIT_BRANCH}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            VERSION=${FACADE_VERSION}
            ITMP_AIRWAVE_VERSION=${AIRWAVE_VERSION}
      variables:
      - type: xlrelease.BooleanVariable
        key: SKIP_AIRWAVE_BUILD
        description: Check, if the airwave build need to be skipped. Provide AIRWAVE_VERSION,
          if checked to consider for Docker image creation.
      - type: xlrelease.StringVariable
        key: AIRWAVE_ABS_GIT_BRANCH
        value: master
      - type: xlrelease.StringVariable
        key: AIRWAVE_VERSION
        requiresValue: false
        description: Needed only when AIRWAVE_BUILD is SKIPPED. Else, consider the
          normal version generation.
      - type: xlrelease.BooleanVariable
        key: SKIP_FACADE_BUILD
        description: Check, if the facade build need to be skipped. Provide FACADE_VERSION,
          if checked, to consider for Docker image creation.
      - type: xlrelease.StringVariable
        key: FACADE_ABS_GIT_BRANCH
        requiresValue: false
        description: Specify the ABS GIT branch from which FACADE build need to be
          taken. Not Applicable if SKIP_FACADE_BUILD is checked
        value: master
      - type: xlrelease.StringVariable
        key: FACADE_VERSION
        requiresValue: false
        description: Needed only when FACADE_BUILD is SKIPPED. Else, consider the
          normal version generation.
      - type: xlrelease.StringVariable
        key: SKIP_FACADE_TEST_COVERAGE_BUILD
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - "YES"
          - "NO"
        value: "YES"
      - type: xlrelease.StringVariable
        key: SKIP_FACADE_SONAR_BUILD
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - "NO"
          - "YES"
        value: "NO"
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_AIRWAVE_Build_scriptUserPassword"
      riskProfile: Default risk profile
    - template: CISL Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: CISL_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/cisl-adapter-XLRelease-build
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            SKIP_SONAR_BUILD=${SKIP_SONAR_BUILD}
            SKIP_TEST_COVERAGE_BUILD=${SKIP_TEST_COVERAGE_BUILD}
          variableMapping:
            pythonScript.buildNumber: ${CISLBuildNumber}
        - name: GetBuildVersion
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/cisl-adapter-XLRelease-build
          buildNumber: ${CISLBuildNumber}
          leftSearch: 'New Build Number:'
          variableMapping:
            pythonScript.searchResult: ${CISLBuildVersion}
        - name: CISL_DockerBuild
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/cisl-adapter-XLRelease-build-dockerimage
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            VERSION=${CISLBuildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: CISLBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CISLBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CISLDeployVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "YES"
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release647dd998d58940c4941bd1b21aa89a55
      riskProfile: Default risk profile
    - template: CISL Docker Image Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: CISL_DockerBuild
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/cisl-adapter-XLRelease-build-dockerimage
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            VERSION=${CISLBuildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: CISLBuildVersion
        description: Version of CISL war file
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
        value: master
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release647dd998d58940c4941bd1b21aa89a55
      riskProfile: Default risk profile
    - template: CONFIGSUITE Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      dueDate: 2020-06-16T16:07:36.515Z
      phases:
      - phase: Build
        tasks:
        - name: Configsuite_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/configsuite-XLRelease-build
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            SKIP_SONAR_BUILD=${SKIP_SONAR_BUILD}
            SKIP_TEST_COVERAGE_BUILD=${SKIP_TEST_COVERAGE_BUILD}
          variableMapping:
            pythonScript.buildNumber: ${CSBuildNumber}
        - name: GetBuildVersion
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/configsuite-XLRelease-build
          buildNumber: ${CSBuildNumber}
          leftSearch: 'New Build Number:'
          variableMapping:
            pythonScript.searchResult: ${CSBuildVersion}
        - name: NexusURL
          type: jenkins.WaitForCompletion
          server: Service Owner Jenkins global
          jobName: ITMP-ABS/job/configsuite-XLRelease-build
          buildNumber: ${CSBuildNumber}
          description: https://nexus-${folder.ADP_TOOLCHAIN}.apps.crp.ec1.aws.aztec.cloud.allianz/repository/${NexusRepo}/${folder.UNIT_NAME}/allianz/abs/configsuite/${folder.UNIT_NAME}.allianz.abs.configsuite.assembly/${CSBuildVersion}/${folder.UNIT_NAME}.allianz.abs.configsuite.assembly-${CSBuildVersion}-aspect.zip
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
      - type: xlrelease.StringVariable
        key: CSBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CSBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: NexusRepo
        requiresValue: false
        showOnReleaseStart: false
        value: itmp-abs
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release647dd998d58940c4941bd1b21aa89a55
      riskProfile: Default risk profile
    - template: FACADE Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: FACADE_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/cisl-adapter-XLRelease-build
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            SKIP_SONAR_BUILD=${SKIP_SONAR_BUILD}
            SKIP_TEST_COVERAGE_BUILD=${SKIP_TEST_COVERAGE_BUILD}
          variableMapping:
            pythonScript.buildNumber: ${FACADEBuildNumber}
        - name: GetBuildVersion
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/facade-XLRelease-build
          buildNumber: ${FACADEBuildNumber}
          leftSearch: 'New Build Number:'
          variableMapping:
            pythonScript.searchResult: ${FACADEBuildVersion}
        - name: FACADE_DockerBuild
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/facade-XLRelease-build-dockerimage
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            VERSION=${FACADEBuildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: FACADEBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FACADEBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FACADEDeployVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
        value: "YES"
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release647dd998d58940c4941bd1b21aa89a55
      riskProfile: Default risk profile
    - template: FNOL-BFF Build
      scheduledStartDate: 2020-05-28T03:30:00Z
      dueDate: 2020-06-16T16:07:37.980Z
      phases:
      - phase: New Phase
        tasks:
        - name: FNOL-BFF
          type: xlrelease.SequentialGroup
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              version: ${buildVersion}
            application: '[GDF] FNOL BFF'
            environment: DEV
          tasks:
          - name: FNOL-BFF Build
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ${jenkinsJob}
            variableMapping:
              pythonScript.buildNumber: ${buildNumber}
          - name: Get Build Version
            type: jenkins.ConsoleOutFindString
            server: Service Owner Jenkins global
            jobPath: job/${jenkinsJob}
            buildNumber: ${buildNumber}
            leftSearch: -DnewVersion=
            variableMapping:
              pythonScript.searchResult: ${buildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: jenkinsJob
        showOnReleaseStart: false
        value: ITMP-Core/job/fnol-bff-build
      - type: xlrelease.StringVariable
        key: buildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: buildVersion
        requiresValue: false
        showOnReleaseStart: false
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Releaseef79c4ee0e364e59aeea4695239f1028
      riskProfile: Default risk profile
    - template: FNOL-FE Build
      scheduledStartDate: 2020-05-28T03:30:00Z
      dueDate: 2020-06-16T16:07:37.980Z
      phases:
      - phase: New Phase
        tasks:
        - name: FNOL-FE Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: job/${jenkinsJob}
          variableMapping:
            pythonScript.buildNumber: ${buildNumber}
        - name: Get Build Output
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: job/${jenkinsJob}
          buildNumber: ${buildNumber}
          leftSearch: Tag image
          variableMapping:
            pythonScript.searchResult: ${buildOutput}
      variables:
      - type: xlrelease.StringVariable
        key: buildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: jenkinsJob
        showOnReleaseStart: false
        value: ITMP-Core/job/fnol-fe-build
      - type: xlrelease.StringVariable
        key: buildOutput
        requiresValue: false
        showOnReleaseStart: false
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Releaseef79c4ee0e364e59aeea4695239f1028
      riskProfile: Default risk profile
    - template: FNOL-FE Bundle
      scheduledStartDate: 2020-05-28T03:30:00Z
      dueDate: 2020-06-16T16:07:37.980Z
      phases:
      - phase: Bundle
        tasks:
        - name: FNOL-FE Bundle Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-Core/job/fnol-fe-bundle
          jobParameters: |-
            OC_BUILD_BUNDLE_BASE_TAG=${BUNDLE_BASE_TAG}
            OC_BUILD_CONFIG_GHE_ORG=${folder.GIT_ORG}
            OC_BUILD_CONFIG_REPO_TAG_NAME=${CONFIG_REPO_TAG_NAME}
            OC_BUILD_VERSION=${OC_BUILD_VERSION}
          variableMapping:
            pythonScript.buildNumber: ${FNOLFEBuildNumber}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: buildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: jenkinsJob
        showOnReleaseStart: false
        value: ITMP-Core/job/fnol-fe-build
      - type: xlrelease.StringVariable
        key: buildOutput
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FNOLFEVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FNOLFEBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: BUNDLE_BASE_TAG
        description: Openshift image base tag. For instance core-dev
      - type: xlrelease.StringVariable
        key: CONFIG_REPO_TAG_NAME
        description: GHE Organization where config repo is
      - type: xlrelease.StringVariable
        key: OC_BUILD_VERSION
        description: Openshift image tag name. Need to be unique
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Releaseef79c4ee0e364e59aeea4695239f1028
      riskProfile: Default risk profile
    - template: Merge_PullRequest_Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      dueDate: 2020-06-16T16:07:36.515Z
      phases:
      - phase: Build
        tasks:
        - name: Merge_PullRequest_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/abs-pull-request
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${folder.GIT_BRANCH}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
          description: This job will check for eligible open Pull requests on ABS
            repository and will merge locally. Perform build & deploy to Openshift
            temporarily to see if everything works. IF everything works and application
            launches, it will be merged to the respective base branch.
        color: '#0079BC'
      tags:
      - mergepr
      abortOnFailure: true
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release647dd998d58940c4941bd1b21aa89a55
      riskProfile: Default risk profile
    - template: MIDCORP-BFF Build
      scheduledStartDate: 2020-12-09T03:30:00Z
      phases:
      - phase: Build
        tasks:
        - name: Midcorp-bff_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/midcorp-bff-build
          jobParameters: PROJECT=${PROJECT}
          variableMapping:
            pythonScript.buildNumber: ${midcorpbffBuild}
        - name: Get Build Version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/midcorp-bff-build
          buildNumber: ${midcorpbffBuild}
          leftSearch: Tag image midcorp-bff with  version
          rightSearch: to null
          variableMapping:
            pythonScript.searchResult: ${midcorpbffBuildVersion}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: PROJECT
        value: midcorp-bff
      - type: xlrelease.StringVariable
        key: midcorpbffBuild
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorpbffBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      riskProfile: Default risk profile
    - template: MIDCORP-FE Build
      scheduledStartDate: 2020-12-09T03:30:00Z
      phases:
      - phase: Build
        tasks:
        - name: Midcorp-fe_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/midcorp-fe-build
          jobParameters: PROJECT=${PROJECT}
          variableMapping:
            pythonScript.buildNumber: ${midcorpfeBuild}
        - name: Get Build Version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/midcorp-fe-build
          buildNumber: ${midcorpfeBuild}
          leftSearch: Tag image midcorp-fe with  version
          rightSearch: to null
          variableMapping:
            pythonScript.searchResult: ${midcorpfeBuildVersion}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: midcorpfeBuild
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: PROJECT
        value: midcorp-fe
      - type: xlrelease.StringVariable
        key: midcorpfeBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      riskProfile: Default risk profile
    - template: MIDCORP-FE Bundle
      scheduledStartDate: 2021-04-19T03:30:00Z
      phases:
      - phase: Bundle Build
        tasks:
        - name: Midcorp-fe Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/midcorp-fe-build
          jobParameters: GIT_BRANCH=${GIT_BRANCH}
          variableMapping:
            pythonScript.buildStatus: ${feBuildID}
            pythonScript.buildNumber: ${midcorpfeBuild}
        - name: Get Midcorp-fe Build version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/midcorp-fe-build
          buildNumber: ${midcorpfeBuild}
          leftSearch: Tag image midcorp-fe with  version
          rightSearch: to null
          variableMapping:
            pythonScript.searchResult: ${midcorpfeBuildVersion}
        - name: Midcorp-Config Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/midcorp-config-build
          variableMapping:
            pythonScript.buildStatus: ${configBuildID}
            pythonScript.buildNumber: ${midcorpfeConfig}
        - name: Get Midcorp-Config Build version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/midcorp-config-build
          buildNumber: ${midcorpfeConfig}
          leftSearch: Publishing version
          variableMapping:
            pythonScript.searchResult: ${midcorpConfigVersion}
        - name: Midcorp Bundle Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/midcorp-fe-bundle
          jobParameters: |-
            OC_BUILD_BUNDLE_BASE_TAG=${midcorpfeBuildVersion}
            OC_BUILD_CONFIG_VERSION=${midcorpConfigVersion}
            OC_BUILD_VERSION=midcorp-fe-${midcorpfeBuildVersion}-config-${midcorpConfigVersion}
          variableMapping:
            pythonScript.buildStatus: ${BundleID}
            pythonScript.buildNumber: ${midcorpfeBundle}
        - name: Get Final Bundle Version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/midcorp-fe-bundle
          buildNumber: ${midcorpfeBundle}
          leftSearch: IMAGE_VERSION=
          variableMapping:
            pythonScript.searchResult: ${midcorpfeBundleVersion}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: GIT_BRANCH
      - type: xlrelease.StringVariable
        key: feBuildID
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorpfeBuild
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorpfeBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorpfeConfig
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configBuildID
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorpConfigVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorpfeBundle
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: BundleID
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorpfeBundleVersion
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_MIDCORP_FE_Bundle_scriptUserPassword"
      riskProfile: Default risk profile
    - template: MO-BFF Build
      scheduledStartDate: 2020-05-28T03:30:00Z
      dueDate: 2020-06-16T16:07:37.980Z
      phases:
      - phase: New Phase
        tasks:
        - name: MO-BFF
          type: xlrelease.SequentialGroup
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              version: ${buildVersion}
            application: '[GDF] MO BFF'
            environment: DEV
          tasks:
          - name: MO-BFF Build
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ${jenkinsJob}
            variableMapping:
              pythonScript.buildNumber: ${buildNumber}
          - name: Get Build Version
            type: jenkins.ConsoleOutFindString
            server: Service Owner Jenkins global
            jobPath: job/${jenkinsJob}
            buildNumber: ${buildNumber}
            leftSearch: -DnewVersion=
            variableMapping:
              pythonScript.searchResult: ${buildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: jenkinsJob
        showOnReleaseStart: false
        value: ITMP-Core/job/mo-bff-build
      - type: xlrelease.StringVariable
        key: buildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: buildVersion
        requiresValue: false
        showOnReleaseStart: false
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Releaseef79c4ee0e364e59aeea4695239f1028
      riskProfile: Default risk profile
    - template: MO-FE Build
      scheduledStartDate: 2020-05-28T03:30:00Z
      dueDate: 2020-06-16T16:07:39.326Z
      phases:
      - phase: New Phase
        tasks:
        - name: MO-FE Bundle build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-Core/job/mo-fe-build
          variableMapping:
            pythonScript.buildNumber: ${MOFEBuildNumber}
        - name: GetBuildVersion
          type: jenkins.ConsoleOutFindString
          server: ITMP Jenkins
          jobPath: ITMP-Core/job/mo-fe-bundle
          buildNumber: ${MOFEBuildNumber}
          leftSearch: Next version is
          variableMapping:
            pythonScript.searchResult: ${MOFEBuildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: MOFEBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOFEBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release82411134180d4185a5c3edc8674de981
      riskProfile: Default risk profile
    - template: MO-FE Bundle
      scheduledStartDate: 2020-05-28T03:30:00Z
      dueDate: 2020-06-16T16:07:39.326Z
      phases:
      - phase: Bundle
        tasks:
        - name: MO-FE Bundle build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-Core/job/mo-fe-bundle
          jobParameters: |-
            OC_BUILD_BUNDLE_BASE_TAG=${BUNDLE_BASE_TAG}
            OC_BUILD_CONFIG_GHE_ORG=${folder.GIT_ORG}
            OC_BUILD_CONFIG_REPO_TAG_NAME=${CONFIG_REPO_TAG_NAME}
            OC_BUILD_VERSION=${OC_BUILD_VERSION}
          variableMapping:
            pythonScript.buildNumber: ${MOFEBuildNumber}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: MOFEBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOFEBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: BUNDLE_BASE_TAG
        description: Openshift image base tag. For instance core-dev
      - type: xlrelease.StringVariable
        key: CONFIG_REPO_TAG_NAME
        description: GHE Organization where config repo is
      - type: xlrelease.StringVariable
        key: OC_BUILD_VERSION
        description: Openshift image tag name. Need to be unique
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release82411134180d4185a5c3edc8674de981
      riskProfile: Default risk profile
    - template: PAT-BFF Build
      scheduledStartDate: 2021-06-28T03:30:00Z
      phases:
      - phase: Build
        tasks:
        - name: PAT-BFF Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-PAT/job/pat-bff-build
          jobParameters: PROJECT=${PROJECT}
          variableMapping:
            pythonScript.buildNumber: ${patbffBuild}
        - name: Get Build Version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-PAT/job/pat-bff-build
          buildNumber: ${patbffBuild}
          leftSearch: Tag image pat-bff with  version
          rightSearch: to null
          variableMapping:
            pythonScript.searchResult: ${patbffBuildVersion}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: PROJECT
        requiresValue: false
        showOnReleaseStart: false
        value: pat-bff
      - type: xlrelease.StringVariable
        key: patbffBuild
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: patbffBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_PAT_BFF_Build_scriptUserPassword"
      riskProfile: Default risk profile
    - template: PAT-FE Build
      scheduledStartDate: 2021-06-28T03:30:00Z
      phases:
      - phase: Build
        tasks:
        - name: PAT-FE Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-PAT/job/pat-fe-build
          jobParameters: PROJECT=${PROJECT}
          variableMapping:
            pythonScript.buildNumber: ${patfeBuild}
        - name: Get Build Version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-PAT/job/pat-fe-build
          buildNumber: ${patfeBuild}
          leftSearch: Tag image pat-fe with  version
          rightSearch: to core-dev
          variableMapping:
            pythonScript.searchResult: ${patfeBuildVersion}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: patfeBuild
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: PROJECT
        requiresValue: false
        showOnReleaseStart: false
        value: pat-fe
      - type: xlrelease.StringVariable
        key: patfeBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_PAT_FE_Build_scriptUserPassword"
      riskProfile: Default risk profile
    - template: RAP Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: RAP_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/rap-XLRelease-build
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            SKIP_SONAR_BUILD=${SKIP_SONAR_BUILD}
            SKIP_TEST_COVERAGE_BUILD=${SKIP_TEST_COVERAGE_BUILD}
          variableMapping:
            pythonScript.buildNumber: ${RAPBuildNumber}
        - name: GetBuildVersion
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/rap-XLRelease-build
          buildNumber: ${RAPBuildNumber}
          leftSearch: 'New Build Number:'
          variableMapping:
            pythonScript.searchResult: ${RAPBuildVersion}
        - name: RAP_DockerBuild
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/rap-XLRelease-build-dockerimage
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            VERSION=${RAPBuildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: RAPBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: RAPBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release97cba7f956024d3487cc30f7f9e35202
      riskProfile: Default risk profile
    - template: RAP Docker Image Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: RAP_DockerBuild
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/rap-XLRelease-build-dockerimage
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            VERSION=${RAPBuildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: RAPBuildVersion
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
        value: master
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release97cba7f956024d3487cc30f7f9e35202
      riskProfile: Default risk profile
    - template: RCP Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      dueDate: 2020-06-16T16:07:36.515Z
      phases:
      - phase: Build
        tasks:
        - name: RCP_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/rcp-XLRelease-build
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            SKIP_SONAR_BUILD=${SKIP_SONAR_BUILD}
            SKIP_TEST_COVERAGE_BUILD=${SKIP_TEST_COVERAGE_BUILD}
          variableMapping:
            pythonScript.buildNumber: ${RCPBuildNumber}
        - name: GetBuildVersion
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/rcp-XLRelease-build
          buildNumber: ${RCPBuildNumber}
          leftSearch: 'New Build Number:'
          variableMapping:
            pythonScript.searchResult: ${RCPBuildVersion}
        - name: NexusURL
          type: jenkins.WaitForCompletion
          server: Service Owner Jenkins global
          jobName: ITMP-ABS/job/rcp-XLRelease-build
          buildNumber: ${RCPBuildNumber}
          description: https://nexus-${folder.ADP_TOOLCHAIN}.apps.crp.ec1.aws.aztec.cloud.allianz/repository/${NexusRepo}/${folder.UNIT_NAME}/allianz/abs/rcp/${folder.UNIT_NAME}.allianz.abs.rcp.assembly/${RCPBuildVersion}/${folder.UNIT_NAME}.allianz.abs.rcp.assembly-${RCPBuildVersion}-aspect.zip
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
      - type: xlrelease.StringVariable
        key: SKIP_SONAR_BUILD
      - type: xlrelease.StringVariable
        key: RCPBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: RCPBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: NexusRepo
        requiresValue: false
        showOnReleaseStart: false
        value: itmp-abs
      - type: xlrelease.StringVariable
        key: SKIP_TEST_COVERAGE_BUILD
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release647dd998d58940c4941bd1b21aa89a55
      riskProfile: Default risk profile
    - template: RSS Build
      scheduledStartDate: 2020-05-22T03:30:00Z
      dueDate: 2020-06-16T16:07:39.775Z
      phases:
      - phase: New Phase
        tasks:
        - name: RSS_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/abs-rss-build
          jobParameters: |-
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            GIT_BRANCH=${GitBranch}
            UNIT_NAME=${folder.UNIT_NAME}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            DEPLOY_AFTER_BUILD=${DEPLOY_AFTER_BUILD}
          variableMapping:
            pythonScript.buildNumber: ${RSSBuildNumber}
        - name: GetBuildVersion
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: /job/ITMP-ABS/job/abs-rss-build
          buildNumber: ${RSSBuildNumber}
          leftSearch: 'New Build Number:'
          variableMapping:
            pythonScript.searchResult: ${RSSBuildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: GitBranch
        description: Git Branch for Build
      - type: xlrelease.StringVariable
        key: DEPLOY_AFTER_BUILD
        showOnReleaseStart: false
        value: "NO"
      - type: xlrelease.StringVariable
        key: RSSBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: RSSBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release97cba7f956024d3487cc30f7f9e35202
      riskProfile: Default risk profile
    - template: SME-Backend-Global Build
      scheduledStartDate: 2020-06-04T03:30:00Z
      dueDate: 2020-06-16T16:07:40.865Z
      phases:
      - phase: New Phase
        tasks:
        - name: SME-Backend-Global Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-Core/job/sme-backend-global-build
          variableMapping:
            pythonScript.buildNumber: ${buildNumber}
        - name: Get Build Version
          type: jenkins.ConsoleOutFindString
          server: ITMP Jenkins
          jobPath: job/${jenkinsJob}
          buildNumber: ${buildNumber}
          leftSearch: -DnewVersion=
          variableMapping:
            pythonScript.searchResult: ${buildVersion}
      variables:
      - type: xlrelease.StringVariable
        key: buildJob
        showOnReleaseStart: false
        value: ITMP-Core/job/sme-backend-global-build
      - type: xlrelease.StringVariable
        key: buildNumber
      - type: xlrelease.StringVariable
        key: jenkinsJob
      - type: xlrelease.StringVariable
        key: buildVersion
        requiresValue: false
        showOnReleaseStart: false
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Releasec13c74634b94426eb256d983db41c1e8
      riskProfile: Default risk profile
    - template: SME-FE Build
      scheduledStartDate: 2020-06-04T03:30:00Z
      dueDate: 2020-06-16T16:07:41.313Z
      phases:
      - phase: New Phase
        tasks:
        - name: sme-fe Build
          type: jenkins.Build
          jenkinsServer: ITMP Jenkins
          jobName: ITMP-Core/job/sme-fe-build
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release6349810de21344088e8a4566f5afb855
      riskProfile: Default risk profile
    - template: SME-FE Bundle
      scheduledStartDate: 2020-05-28T03:30:00Z
      dueDate: 2020-06-16T16:07:39.326Z
      phases:
      - phase: Bundle
        tasks:
        - name: SME-FE Bundle build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-Core/job/sme-fe-bundle
          jobParameters: |-
            OC_BUILD_BUNDLE_BASE_TAG=${BUNDLE_BASE_TAG}
            OC_BUILD_CONFIG_GHE_ORG=${folder.GIT_ORG}
            OC_BUILD_CONFIG_REPO_TAG_NAME=${CONFIG_REPO_TAG_NAME}
            OC_BUILD_VERSION=${OC_BUILD_VERSION}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: MOFEBuildNumber
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOFEBuildVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: BUNDLE_BASE_TAG
        description: Openshift image base tag. For instance core-dev
      - type: xlrelease.StringVariable
        key: CONFIG_REPO_TAG_NAME
        description: Tag name or branch of the config repository
      - type: xlrelease.StringVariable
        key: OC_BUILD_VERSION
        description: Openshift image tag name. Need to be unique
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
        parentTemplate: Applications/Folder049cbbca6af447ae88be4c387e558ace/Foldere551aead4d1447d099d781613377764a/Release82411134180d4185a5c3edc8674de981
      riskProfile: Default risk profile
    - template: TargetPlatform_Build
      scheduledStartDate: 2020-07-03T03:30:00Z
      phases:
      - phase: TargetPlatform_Build
        tasks:
        - name: TargetPlatform_Build
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP-ABS/job/abs-targetplatform-generator
          jobParameters: |-
            APP_NAME=${APP_NAME}
            UNIT_NAME=${folder.UNIT_NAME}
            PROJECT_NAME_PREFIX=${folder.PROJECT_NAME_PREFIX}
            ADP_TOOLCHAIN=${folder.ADP_TOOLCHAIN}
            GIT_ORG=${folder.GIT_ORG}
            GIT_REPO=${folder.GIT_REPO}
            VERSION_TAG=${VERSION_TAG}
          description: job will build the respective ITMP specific target platforms
            for the given version we specify on parameters
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: APP_NAME
      - type: xlrelease.StringVariable
        key: VERSION_TAG
      riskProfile: Default risk profile
  - directory: Deploy
    children:
    - directory: In Progress
    - template: Deploy AIMS global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy AIMS to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy AIMS  to ${OE} ${STAGE}\",\n       \"description\": \"\"\
              ,\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\t\t\"\
              ${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"${JiraAssignedTeamFieldId}\"\
              \ : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\t\t},\n        \"${JiraImplementationLayerFieldId}\"\
              \ : {\n            \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${AIMSJiraIssueId}
          - name: Set Jira AIMS issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${AIMSJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira AIMS issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${AIMSJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy AIMS
        tasks:
        - name: Deploy and Check AIMS
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy AIMS
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-AIMS/job/aims-deploy-dev
            jobParameters: |-
              CLUSTER=${CLUSTER}
              OE=${OE}
              STAGE=${STAGE}
              AIMSVERSIO=${AIMSVERSION}
              GIT_BRANCH=master
              CUSTOMER_ACCOUNTS_REPOSITORY_REF=master
              INFRASTRUCTURE_REPOSITORY_REF=master
              CONFIGURATION_REPOSITORY_REF=master
              CUSTOMER_CODE=${CUSTOMER_CODE}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test AIMS isAlive
            type: webhook.JsonWebhook
            URL: https://cisl-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.cisl.adapter/services/healthChecks
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira AIMS issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${AIMSJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for AIMS deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${AIMSJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: AIMSJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: AIMSVERSION
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_AIMS_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy AIRWAVE global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy AIRWAVE to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy AIRWAVE ${FACADE_VERSION} to ${OE} ${STAGE}\",\n       \"\
              description\": \"\",\n       \"issuetype\": {\n          \"name\": \"\
              Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\t\t\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\
              \n\t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n      \
              \      \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${AIRWAVEJiraIssueId}
          - name: Set Jira AIRWAVE issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${AIRWAVEJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira AIRWAVE issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${AIRWAVEJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Airwave
        tasks:
        - name: Deploy and Check AIRWAVE
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy AIRWAVE
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Airwave/job/airwave-deploy
            jobParameters: |-
              GIT_BRANCH=master
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              VERSION_TAG=${FACADE_VERSION}
              CONFIGVERSIONTAG=${FACADE_VERSION}
              UNIT_NAME=${UNIT_NAME}
              TEMPLATE_BRANCH=master
              AUTO_APPLY=true
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test FACADE isAlive
            type: webhook.JsonWebhook
            URL: https://airwave-${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.facade/services/healthChecks
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira AIRWAVE issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${AIRWAVEJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for AIRWAVE deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${AIRWAVEJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: FACADE_VERSION
        description: Final Combined docker image version of Airwave + Facade
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: AIRWAVEJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_AIRWAVE_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CHR global
      description: This template deploys the CHR component
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Create support ticket
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy CHR to ${OE} ${STAGE}'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy CHR ${version} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"${jiraAssignedTeam}\"\
              \n\t\t},\n \"${JiraImplementationLayerFieldId}\" : {\n            \"\
              value\" : \"${JiraImplementationLayer}\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${CHRJiraIssueId}
              pythonScript.password: ${JiraPassword}
          - name: Set Jira CHR issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${CHRJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
          - name: Set Jira CHR issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${CHRJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
        color: '#0079BC'
      - phase: Deploy and Verify
        tasks:
        - name: Deploy and check CHR
          type: xlrelease.SequentialGroup
          tasks:
          - name: Deploy CHR
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-CHR/job/claims-handler-routing-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              CUSTOMER_CODE=${customercode}
              CLAIMSHANDLER_IMAGE_VERSION=${version}
              AUTO_APPLY=TRUE
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
        color: '#0079BC'
      - phase: Complete
        tasks:
        - name: Set Jira CHR issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          username: ${JiraUsername}
          issueId: ${CHRJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
          variableMapping:
            pythonScript.password: ${JiraPassword}
        - name: Wait for CHR deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${CHRJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: CLUSTER
        description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
          | aws-ase2 = Sydney | ap2 = On-Premise Australia
      - type: xlrelease.StringVariable
        key: version
        description: Application version to be deployed
      - type: xlrelease.StringVariable
        key: CHRJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: customercode
        description: e.g. bga, bgb, bgc, bmp...
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
      - type: xlrelease.StringVariable
        key: JiraUsername
        requiresValue: false
      - type: xlrelease.PasswordStringVariable
        key: JiraPassword
        requiresValue: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CHR_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CHS global
      description: This template deploys the CHS component
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Create support ticket
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy CHS to ${OE} ${STAGE}'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy CHS FE ${CHSFEVersion} or CHS BFF {CHSBFFVersion} to ${OE}\
              \ ${STAGE}\",\n       \"description\": \"\",\n       \"issuetype\":\
              \ {\n          \"name\": \"Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\"\
              \ : \"${JiraDeploymentEpic}\",\n\t\t\"${JiraAssignedTeamFieldId}\" :\
              \ {\n\t\t\t\"value\" : \"${jiraAssignedTeam}\"\n\t\t},\n \"${JiraImplementationLayerFieldId}\"\
              \ : {\n            \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.password: ${JiraPassword}
              pythonScript.issueId: ${CHSJiraIssueId}
          - name: Set Jira CHS issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${CHSJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
          - name: Set Jira CHS issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${CHSJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
        color: '#0079BC'
      - phase: Deploy and Verify
        tasks:
        - name: Deploy and check CHS
          type: xlrelease.SequentialGroup
          tasks:
          - name: Deploy CHS
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-APPS/job/chs-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              BFF_VERSION=${CHSBFFVersion}
              FE_VERSION=${CHSFEVersion}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
        color: '#0079BC'
      - phase: Complete
        tasks:
        - name: Set Jira CHS issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          username: ${JiraUsername}
          issueId: ${CHSJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
          variableMapping:
            pythonScript.password: ${JiraPassword}
        - name: Wait for CHS deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${CHSJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: CLUSTER
        description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
          | aws-ase2 = Sydney | ap2 = On-Premise Australia
      - type: xlrelease.StringVariable
        key: CHSJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
      - type: xlrelease.StringVariable
        key: JiraUsername
        requiresValue: false
      - type: xlrelease.PasswordStringVariable
        key: JiraPassword
        requiresValue: false
      - type: xlrelease.StringVariable
        key: CHSBFFVersion
      - type: xlrelease.StringVariable
        key: CHSFEVersion
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CHS_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CISL global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy CISL to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy CISL ${CISLVersion} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${CISLJiraIssueId}
          - name: Set Jira CISL issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${CISLJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira CISL issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${CISLJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Cisl
        tasks:
        - name: Deploy and Check CISL
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy CISL
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-ABS/job/cisl-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              OE=${OE}
              STAGE=${STAGE}
              VERSION=${CISLVersion}
              GIT_BRANCH=master
              CONFIG_TYPE=${CONFIG_TYPE}
              CONFIGVERSIONTAG=${CISLVersion}
              UNIT_NAME=${UNIT_NAME}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test CISL isAlive
            type: webhook.JsonWebhook
            URL: https://cisl-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.cisl.adapter/services/healthChecks
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira CISL issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${CISLJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for CISL deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${CISLJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CISLVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: CISLJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CISL_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy claims-task-routing global
      description: This template deploys the claims-task-routing component
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Create support ticket
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy claims-task-routing to ${OE} ${STAGE}'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy claims-task-routing FE ${claims-task-routingFEVersion} or\
              \ claims-task-routing BFF {claims-task-routingBFFVersion} to ${OE} ${STAGE}\"\
              ,\n       \"description\": \"\",\n       \"issuetype\": {\n        \
              \  \"name\": \"Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\t\t\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"${jiraAssignedTeam}\"\
              \n\t\t},\n \"${JiraImplementationLayerFieldId}\" : {\n            \"\
              value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.password: ${JiraPassword}
              pythonScript.issueId: ${claims-task-routingJiraIssueId}
          - name: Set Jira claims-task-routing issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${claims-task-routingJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
          - name: Set Jira claims-task-routing issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${claims-task-routingJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
        color: '#0079BC'
      - phase: Deploy and Verify
        tasks:
        - name: Deploy and check claims-task-routing
          type: xlrelease.SequentialGroup
          tasks:
          - name: Deploy claims-task-routing
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-APPS/job/claims-task-routing-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              BFF_VERSION=${claims-task-routingBFFVersion}
              FE_VERSION=${claims-task-routingFEVersion}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
        color: '#0079BC'
      - phase: Complete
        tasks:
        - name: Set Jira claims-task-routing issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          username: ${JiraUsername}
          issueId: ${claims-task-routingJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
          variableMapping:
            pythonScript.password: ${JiraPassword}
        - name: Wait for claims-task-routing deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${claims-task-routingJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: CLUSTER
        description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
          | aws-ase2 = Sydney | ap2 = On-Premise Australia
      - type: xlrelease.StringVariable
        key: claims-task-routingJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
      - type: xlrelease.StringVariable
        key: JiraUsername
        requiresValue: false
      - type: xlrelease.PasswordStringVariable
        key: JiraPassword
        requiresValue: false
      - type: xlrelease.StringVariable
        key: claims-task-routingBFFVersion
      - type: xlrelease.StringVariable
        key: claims-task-routingFEVersion
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_claims_task_routing_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Claims Tracker global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy Claims Tracker to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Claims Tracker  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${Claims TrackerJiraIssueId}
          - name: Set Jira Claims Tracker issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Claims TrackerJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira Claims Tracker issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Claims TrackerJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Claims Tracker
        tasks:
        - name: Deploy and Check Claims Tracker
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy Claims Tracker
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Claims-Tracker/job/claims-tracker-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              VERSION=${Version}
              GIT_BRANCH=master
              CUSTOMER_CODE=bmp
              INFRASTRUCTURE=${INF}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test Claims Tracker isAlive
            type: webhook.JsonWebhook
            URL: https://Claims Tracker-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.Claims
              Tracker.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira Claims Tracker issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${Claims TrackerJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for Claims Tracker deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${Claims TrackerJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: Claims TrackerJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Claims_Tracker_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CLAMAV global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy CLAMAV to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy CLAMAV ${CLAMAVVersion} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${CLAMAVJiraIssueId}
          - name: Set Jira CLAMAV issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${CLAMAVJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira CLAMAV issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${CLAMAVJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy CLAMAV
        tasks:
        - name: Deploy and Check CLAMAV
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy CLAMAV
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-ClamAV/job/clamav-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              OE=${OE}
              STAGE=${STAGE}
              VERSION_TAG=${CLAMAVVersion}
              GIT_BRANCH=master
              UNIT_NAME=${UNIT_NAME}
              AUTO_APPLY=TRUE
              #please change when available
              #CUSTOMER_CODE=bmp
              CUSTOMER_CODE=itmp
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test CLAMAV isAlive
            type: webhook.JsonWebhook
            URL: https://CLAMAV-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.CLAMAV.adapter/services/healthChecks
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira CLAMAV issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${CLAMAVJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for CLAMAV deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${CLAMAVJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLAMAVVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: CLAMAVJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CLAMAV_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CTR global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy CTR to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy CTR ${CTRVersion} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${CTRJiraIssueId}
          - name: Set Jira CTR issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${CTRJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira CTR issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${CTRJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy CTR
        tasks:
        - name: Deploy and Check CTR
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy CTR
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Insurance-Automation/job/ia-claim-task-routing
            jobParameters: |-
              STAGE=${STAGE}
              OE=${OE}
              VERSION=${CTRVersion}
              CUSTOMER_CODE=${CUSTOMER_CODE}
              VANILLA=no
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test CTR isAlive
            type: webhook.JsonWebhook
            URL: https://cisl-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.cisl.adapter/services/healthChecks
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira CTR issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${CTRJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for CTR deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${CTRJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CTRVersion
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: CTRJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CTR_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Customer Portal global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy Customer Portal to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Customer Portal  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${Customer PortalJiraIssueId}
          - name: Set Jira Customer Portal issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Customer PortalJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira Customer Portal issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Customer PortalJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Customer Portal
        tasks:
        - name: Deploy and Check Customer Portal
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy Customer Portal
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-CP/job/cp-deploy/
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              CUSTOMER_CODE=bmp
              VERSION=${version}
              AUTO_APPLY=True
              INFRASTRUCTURE=${INF}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test Customer Portal isAlive
            type: webhook.JsonWebhook
            URL: https://Customer Portal-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.Customer
              Portal.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira Customer Portal issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${Customer PortalJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for Customer Portal deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${Customer PortalJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: Customer PortalJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: version
      - type: xlrelease.StringVariable
        key: INF
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Customer_Portal_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Elastic Indexer Service global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy Elastic Indexer Service to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Elastic Indexer Service  to ${OE} ${STAGE}\",\n       \"\
              description\": \"\",\n       \"issuetype\": {\n          \"name\": \"\
              Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\t\t\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\
              \n\t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n      \
              \      \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${Elastic Indexer ServiceJiraIssueId}
          - name: Set Jira Elastic Indexer Service issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Elastic Indexer ServiceJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira Elastic Indexer Service issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Elastic Indexer ServiceJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Elastic Indexer Service
        tasks:
        - name: Deploy and Check Elastic Indexer Service
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy Elastic Indexer Service
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-ABS/job/elasticindexerservice-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              GIT_BRANCH=master
              CUSTOMER_CODE=${global.UNITMAP}
              VERSION=${VERSION}
              CONFIG_TYPE=properties
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test Elastic Indexer Service isAlive
            type: webhook.JsonWebhook
            URL: https://Elastic Indexer Service-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.Elastic
              Indexer Service.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira Elastic Indexer Service issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${Elastic Indexer ServiceJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for Elastic Indexer Service deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${Elastic Indexer ServiceJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: Elastic Indexer ServiceJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: VERSION
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Elastic_Indexer_Service_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Elastic Search Service global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy Elastic Search Service to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Elastic Search Service  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${Elastic Search ServiceJiraIssueId}
          - name: Set Jira Elastic Search Service issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Elastic Search ServiceJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira Elastic Search Service issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Elastic Search ServiceJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Elastic Search Service
        tasks:
        - name: Deploy and Check Elastic Search Service
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy Elastic Search Service
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Elasticsearch/job/elasticsearch-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=aws-ec1
              OE=${OE}
              GIT_BRANCH=master
              CUSTOMER_CODE=${CUSTOMER_CODE}
              VANILLA=no
              VERSION_TAG=${VERSION_TAG}
              AUTO_APPLY=true
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test Elastic Search Service isAlive
            type: webhook.JsonWebhook
            URL: https://Elastic Search Service-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.Elastic
              Search Service.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira Elastic Search Service issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${Elastic Search ServiceJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for Elastic Search Service deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${Elastic Search ServiceJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: Elastic Search ServiceJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
      - type: xlrelease.StringVariable
        key: VERSION_TAG
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Elastic_Search_Service_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy FNOL global
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Deploy FNOL
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy FNOL to <STAGE>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy FNOL-${INF} ${FNOLVersion} to ${OE} ${STAGE}\",\n       \"\
              description\": \"\",\n       \"issuetype\": {\n          \"name\": \"\
              Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\t\t\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\
              \n\t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n      \
              \      \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${FNOLJiraIssueId}
          - name: Set Jira FNOL issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${FNOLJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
          - name: Set Jira FNOL issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${FNOLJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
        - name: Deploy and check FNOL
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: |-
              releaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1] + "." + releaseVariables['CLUSTER'].split('-')[0]
              if releaseVariables['OE'] == "it-master-platform":
                  releaseVariables['OEPREFIX'] = ''
              else:
                  releaseVariables['OEPREFIX'] = 'itmp-'
              if releaseVariables['INF'] == "bff":
                  releaseVariables['healthUrl'] == "actuator/info"
          - name: Deploy FNOL-${INF}
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-APPS/job/fnol-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              INFRASTRUCTURE=${INF}
              VERSION=${FNOLVersion}
              GIT_BRANCH=master
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
          - name: Test FNOL-${INF} isAlive
            type: webhook.JsonWebhook
            URL: https://fnol-${INF}-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${healthUrl}
        - name: Set Jira FNOL issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${FNOLJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
        - name: Wait for FNOL deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${FNOLJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: FNOLJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: FNOLVersion
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: CLUSTER
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: healthUrl
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_FNOL_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy GDF Asset Dynamic
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Deploy ${app}
        tasks:
        - name: GDF
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['app'] != "mo-fe" and releaseVariables['app']
            != "mo-bff" and releaseVariables['app'] != "fnol-fe" and releaseVariables['app']
            != "fnol-bff" and releaseVariables['app'] !="sme-backend-global" and releaseVariables['app']
            !="sme-fe"
          tasks:
          - name: Set Stage
            type: xlrelease.ScriptTask
            script: |-
              releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
              releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
          - name: Provide ${app} Version
            type: xlrelease.UserInputTask
            precondition: releaseVariables['appVersion'] == ''
            variables:
            - appVersion
          - name: Deploy ${app}
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Core/job/${app}-deploy
            jobParameters: |-
              PROJECT=${app}
              OC_DEPLOY_VERSION=${appVersion}
              OC_DEPLOY_PROJECT_NAME=${OE}-${STAGE}
            taskRecoverOp: SKIP_TASK
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
          - name: Set alive url
            type: xlrelease.ScriptTask
            script: |-
              if  releaseVariables['app'] == 'mo-bff' or releaseVariables['app'] == 'fnol-bff' or releaseVariables['app'] == 'sme-backend-global' or releaseVariables['app'] == 'claims-handler-bff':
                  releaseVariables['healthUrl'] = 'actuator/health'
        color: '#0079BC'
      - phase: Deploy ${app}
        tasks:
        - name: DEVOPS
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['app'] == "mo-fe" or releaseVariables['app']
            == "mo-bff" or releaseVariables['app'] == "fnol-fe" or releaseVariables['app']
            == "fnol-bff" or releaseVariables['app'] =="sme-backend-global" or releaseVariables['app']
            =="sme-fe"
          tasks:
          - name: Set Stage, App and INF
            type: xlrelease.ScriptTask
            script: |-
              releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
              releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()

              releaseVariables['appShort'] = releaseVariables['app'].split('-')[0]
              releaseVariables['INF'] = releaseVariables['app'].split('-')[1]
              if releaseVariables['app'] == "sme-backend-global":
                  releaseVariables['INF'] = "bff"
          - name: Provide ${app} Version
            type: xlrelease.UserInputTask
            precondition: releaseVariables['appVersion'] == ''
            variables:
            - appVersion
          - name: Deploy ${app}
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-APPS/job/${appShort}-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              INFRASTRUCTURE=${INF}
              VERSION=${appVersion}
              GIT_BRANCH=${configbranch}
            taskRecoverOp: SKIP_TASK
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
          - name: Set alive url
            type: xlrelease.ScriptTask
            script: |-
              if  releaseVariables['app'] == 'mo-bff' or releaseVariables['app'] == 'fnol-bff' or releaseVariables['app'] == 'sme-backend-global' or releaseVariables['app'] == 'claims-handler-bff':
                  releaseVariables['healthUrl'] = 'actuator/health'
        color: '#0079BC'
      - phase: Update Dashboard
        tasks:
        - name: Update Dashboard
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Update Dashboard
          createdReleaseId: ${dashboardreleaseid}
          riskProfile: Default risk profile
          template: ITMP Product/Staging Dashboards (Migrated)/ITMP BMP Staging Dashboard
            (Migrated)
          folder: ITMP Product/Staging Dashboards (Migrated)
        - name: Wait for Dashboard
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${dashboardreleaseid}
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
        showOnReleaseStart: false
        value: ${folder.OE}
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: app
      - type: xlrelease.StringVariable
        key: appVersion
      - type: xlrelease.StringVariable
        key: INF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: appShort
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configbranch
        requiresValue: false
        description: branch from which to take the deployment configuration
        value: master
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_GDF_Asset_Dynamic_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy householdexpert global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy householdexpert to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy householdexpert ${householdexpertVersion} to ${OE} ${STAGE}\"\
              ,\n       \"description\": \"\",\n       \"issuetype\": {\n        \
              \  \"name\": \"Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\t\t\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\
              \n\t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n      \
              \      \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${householdexpertJiraIssueId}
          - name: Set Jira householdexpert issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${householdexpertJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira householdexpert issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${householdexpertJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy householdexpert
        tasks:
        - name: Deploy and Check householdexpert
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy householdexpert
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-House-QandB/job/householdexpert-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              INFRASTRUCTURE=${inf}
              GIT_BRANCH=master
              VERSION=${householdexpertVersion}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test householdexpert isAlive
            type: webhook.JsonWebhook
            URL: https://householdexpert-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.householdexpert.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira householdexpert issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${householdexpertJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for householdexpert deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${householdexpertJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: householdexpertJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: householdexpertVersion
      - type: xlrelease.StringVariable
        key: inf
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_householdexpert_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Infinispan global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy Infinispan to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Infinispan  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${InfinispanJiraIssueId}
          - name: Set Jira Infinispan issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${InfinispanJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira Infinispan issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${InfinispanJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Infinispan
        tasks:
        - name: Deploy and Check Infinispan
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy Infinispan
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Infinispan/job/iss-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              VERSION_TAG=${InfinispanVersion}
              GIT_BRANCH=master
              CUSTOMER_CODE=bmp
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test Infinispan isAlive
            type: webhook.JsonWebhook
            URL: https://Infinispan-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.Infinispan.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira Infinispan issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${InfinispanJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for Infinispan deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${InfinispanJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: InfinispanJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: InfinispanVersion
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Infinispan_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy midcorp-uwwb global
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Deploy midcorp-uwwb
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy midcorp-uwwb to <STAGE>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy MOTORRETAIL-${INF} MOTORRETAILVersion to ${OE} ${STAGE}\"\
              ,\n       \"description\": \"\",\n       \"issuetype\": {\n        \
              \  \"name\": \"Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\t\t\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\
              \n\t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n      \
              \      \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${midcorp-uwwbJiraIssueId}
          - name: Set Jira midcorp-uwwb issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${midcorp-uwwbJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
          - name: Set Jira midcorp-uwwb issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${midcorp-uwwbJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
        - name: Deploy and check midcorp-uwwb
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: |-
              releaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1] + "." + releaseVariables['CLUSTER'].split('-')[0]
              if releaseVariables['OE'] == "it-master-platform":
                  releaseVariables['OEPREFIX'] = ''
              else:
                  releaseVariables['OEPREFIX'] = 'itmp-'
              if releaseVariables['INF'] == "bff":
                  releaseVariables['healthUrl'] == "actuator/info"
          - name: Deploy midcorp-uwwb-${INF}
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-POLICY-MANAGEMENT/job/midcorp-uwwb-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              INFRASTRUCTURE=${INF}
              VERSION=${Version}
              GIT_BRANCH=master
              CUSTOMER_CODE=${CUSTOMER_CODE}
              AUTO_APPLY=${AUTO_APPLY}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
          - name: Test midcorp-uwwb-${INF} isAlive
            type: webhook.JsonWebhook
            URL: https://midcorp-uwwb-${INF}-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${healthUrl}
        - name: Set Jira midcorp-uwwb issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${midcorp-uwwbJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
        - name: Wait for MOTORRETAIL deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${midcorp-uwwbJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: Version
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: CLUSTER
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: healthUrl
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: midcorp-uwwbJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        showOnReleaseStart: false
        value: bmp
      - type: xlrelease.StringVariable
        key: AUTO_APPLY
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_midcorp_uwwb_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy MO global
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Deploy MO
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy MO to <STAGE>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy MO-${INF} ${MOVersion} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${MOJiraIssueId}
          - name: Set Jira MO issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${MOJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
          - name: Set Jira MO issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${MOJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
        - name: Deploy and check MO
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: |-
              releaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1] + "." + releaseVariables['CLUSTER'].split('-')[0]
              if releaseVariables['OE'] == "it-master-platform":
                  releaseVariables['OEPREFIX'] = ''
              else:
                  releaseVariables['OEPREFIX'] = 'itmp-'
          - name: Deploy MO-${INF}
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-APPS/job/mo-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              INFRASTRUCTURE=${INF}
              VERSION=${MOVersion}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
          - name: Test MO-${INF} isAlive
            type: webhook.JsonWebhook
            URL: https://mo-${INF}-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/
        - name: Set Jira MO issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${MOJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
        - name: Wait for MO deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${MOJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: CLUSTER
      - type: xlrelease.StringVariable
        key: MOJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOVersion
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
      - type: xlrelease.StringVariable
        key: OEPREFIX
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_MO_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Motor-Expert global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy Motor-Expert to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Motor-Expert  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${Motor-ExpertJiraIssueId}
          - name: Set Jira Motor-Expert issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Motor-ExpertJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira Motor-Expert issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Motor-ExpertJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Motor-Expert
        tasks:
        - name: Deploy and Check Motor-Expert
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy Motor-Expert
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP - Motor QandB/job/motorexpert-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              INFRASTRUCTURE=
              GIT_BRANCH=master
              CUSTOMER_CODE=${global.UNITMAP}
              BFF_VERSION=${Motor-ExpertBFFVersion}
              FE_VERSION=${Motor-ExpertFEVersion}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test Motor-Expert isAlive
            type: webhook.JsonWebhook
            URL: https://Motor-Expert-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.Motor-Expert.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira Motor-Expert issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${Motor-ExpertJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for Motor-Expert deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${Motor-ExpertJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: Motor-ExpertJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: Motor-ExpertFEVersion
      - type: xlrelease.StringVariable
        key: Motor-ExpertBFFVersion
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Motor_Expert_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy MotorPolicyAdmin global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy MotorPolicyAdmin to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy MotorPolicyAdmin  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${MotorPolicyAdminJiraIssueId}
          - name: Set Jira MotorPolicyAdmin issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${MotorPolicyAdminJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira MotorPolicyAdmin issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${MotorPolicyAdminJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy MotorPolicyAdmin
        tasks:
        - name: Deploy and Check MotorPolicyAdmin
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy MotorPolicyAdmin
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-POLICY-ADMIN-SERVICES/job/motor-policy-admin-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CHANNEL=${CHANNEL}
              CLUSTER=${CLUSTER}
              OE=${OE}
              VERSION=${Version}
              GIT_BRANCH=master
              CUSTOMER_CODE=bmp
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test MotorPolicyAdmin isAlive
            type: webhook.JsonWebhook
            URL: https://MotorPolicyAdmin-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.MotorPolicyAdmin.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira MotorPolicyAdmin issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${MotorPolicyAdminJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for MotorPolicyAdmin deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${MotorPolicyAdminJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: MotorPolicyAdminJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: Version
      - type: xlrelease.StringVariable
        key: CHANNEL
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_MotorPolicyAdmin_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Motor-Retail global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy Motor-Retail to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Motor-Retail  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${Motor-RetailJiraIssueId}
          - name: Set Jira Motor-Retail issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Motor-RetailJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira Motor-Retail issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${Motor-RetailJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy Motor-Retail
        tasks:
        - name: Deploy and Check Motor-Retail
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy Motor-Retail
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP - Motor QandB/job/motorretail-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              INFRASTRUCTURE=${inf}
              GIT_BRANCH=master
              VERSION=${Motor-RetailVersion}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test Motor-Retail isAlive
            type: webhook.JsonWebhook
            URL: https://Motor-Retail-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.Motor-Retail.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira Motor-Retail issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${Motor-RetailJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for Motor-Retail deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${Motor-RetailJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: Motor-RetailJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: Motor-RetailVersion
      - type: xlrelease.StringVariable
        key: inf
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Motor_Retail_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy NBO global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy NBO to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy NBO ${NBOVersion} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${NBOJiraIssueId}
          - name: Set Jira NBO issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${NBOJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira NBO issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${NBOJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy NBO
        tasks:
        - name: Deploy and Check NBO
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy NBO
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Insurance-Automation/job/ia-next-best-offer
            jobParameters: |-
              STAGE=${STAGE}
              OE=${OE}
              VERSION=${NBOVersion}
              CUSTOMER_CODE=${CUSTOMER_CODE}
              VANILLA=no
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test NBO isAlive
            type: webhook.JsonWebhook
            URL: https://cisl-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.cisl.adapter/services/healthChecks
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira NBO issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${NBOJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for NBO deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${NBOJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: NBOVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: NBOJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_NBO_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy PAT global
      description: This template deploys the CHS component
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Create support ticket
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy PAT-${INF} to ${OE}'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy PAT-${INF}: ${VERSION} to ${OE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"${jiraAssignedTeam}\"\
              \n\t\t},\n \"${JiraImplementationLayerFieldId}\" : {\n            \"\
              value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${PATJiraIssueId}
          - name: Set Jira PAT issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${PATJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
          - name: Set Jira PAT issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${PATJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy and Verify
        tasks:
        - name: Deploy and check PAT
          type: xlrelease.SequentialGroup
          tasks:
          - name: Deploy PAT
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Camunda/job/pat-deploy
            jobParameters: |-
              GIT_BRANCH=${GIT_BRANCH}
              INFRASTRUCTURE=${INF}
              VERSION=${VERSION}
              AUTO_APPLY=True
              SERVICES_BRANCH=${SERVICES_BRANCH}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
        color: '#0079BC'
      - phase: Complete
        tasks:
        - name: Set Jira PAT issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${PATJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
        - name: Wait for PAT deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${PATJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
      - type: xlrelease.StringVariable
        key: PATJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: GIT_BRANCH
        showOnReleaseStart: false
        value: master
      - type: xlrelease.StringVariable
        key: VERSION
      - type: xlrelease.StringVariable
        key: SERVICES_BRANCH
        showOnReleaseStart: false
        value: master
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: AUTO_APPLY
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_PAT_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-amendment global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy policy-amendment to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy policy-amendment  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${policy-amendmentJiraIssueId}
          - name: Set Jira policy-amendment issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-amendmentJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira policy-amendment issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-amendmentJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy policy-amendment
        tasks:
        - name: Deploy and Check policy-amendment
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy policy-amendment
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-POLICY-ADMIN-SERVICES/job/itmp-policy-amendment-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              CONTAINER_VERSION=${policy-amendmentVersion}
              GIT_BRANCH=master
              CUSTOMER_CODE=bmp
              AUTO_APPLY=True
              CHANNEL=$(CHANNEL)
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test policy-amendment isAlive
            type: webhook.JsonWebhook
            URL: https://policy-amendment-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.policy-amendment.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira policy-amendment issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-amendmentJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for policy-amendment deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-amendmentJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
        value: itmp
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: MPDI-19802
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: customfield_16101
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: MPDI
      - type: xlrelease.StringVariable
        key: policy-amendmentJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        value: customfield_16101
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: policy-amendmentVersion
      - type: xlrelease.StringVariable
        key: CHANNEL
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_amendment_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-flows global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy policy-flows to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy policy-flows  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${policy-flowsJiraIssueId}
          - name: Set Jira policy-flows issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-flowsJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira policy-flows issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-flowsJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy policy-flows
        tasks:
        - name: Deploy and Check policy-flows
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy policy-flows
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-POLICY-ADMIN-SERVICES/job/itmp-policy-flows-deploy/
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              CUSTOMER_CODE=${CUSTOMER_CODE}
              VERSION=${version}
              AUTO_APPLY=True
              INFRASTRUCTURE=${INF}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test policy-flows isAlive
            type: webhook.JsonWebhook
            URL: https://policy-flows-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.policy-flows.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira policy-flows issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-flowsJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for policy-flows deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-flowsJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: policy-flowsJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: version
      - type: xlrelease.StringVariable
        key: INF
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_flows_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-inquiry global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy policy-inquiry to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy policy-inquiry  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${policy-inquiryJiraIssueId}
          - name: Set Jira policy-inquiry issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-inquiryJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira policy-inquiry issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-inquiryJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy policy-inquiry
        tasks:
        - name: Deploy and Check policy-inquiry
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy policy-inquiry
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-POLICY-ADMIN-SERVICES/job/itmp-policy-inquiry-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              VERSION=${Version}
              GIT_BRANCH=master
              CUSTOMER_CODE=bmp
              INFRASTRUCTURE=${INF}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test policy-inquiry isAlive
            type: webhook.JsonWebhook
            URL: https://policy-inquiry-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.policy-inquiry.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira policy-inquiry issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-inquiryJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for policy-inquiry deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-inquiryJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: policy-inquiryJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_inquiry_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-search global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy policy-search to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy policy-search  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${policy-searchJiraIssueId}
          - name: Set Jira policy-search issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-searchJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira policy-search issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${policy-searchJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy policy-search
        tasks:
        - name: Deploy and Check policy-search
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy policy-search
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-POLICY-ADMIN-SERVICES/job/policy-search-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              CLUSTER=${CLUSTER}
              OE=${OE}
              VERSION=${Version}
              GIT_BRANCH=master
              CUSTOMER_CODE=bmp
              INFRASTRUCTURE=${INF}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test policy-search isAlive
            type: webhook.JsonWebhook
            URL: https://policy-search-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.policy-search.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira policy-search issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-searchJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for policy-search deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${policy-searchJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: policy-searchJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_search_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy portfolio-mgmt global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy portfolio-mgmt to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy portfolio-mgmt  to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${portfolio-mgmtJiraIssueId}
          - name: Set Jira portfolio-mgmt issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${portfolio-mgmtJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira portfolio-mgmt issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${portfolio-mgmtJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy portfolio-mgmt
        tasks:
        - name: Deploy and Check portfolio-mgmt
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy portfolio-mgmt
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-POLICY-ADMIN-SERVICES/job/itmp-portfolio-mgmt-deploy/
            jobParameters: |-
              STAGE=${STAGE}
              INFRASTRUCTURE=${INF}
              CLUSTER=${CLUSTER}
              OE=${OE}
              VERSION=${Version}
              GIT_BRANCH=master
              CUSTOMER_CODE=bmp
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test portfolio-mgmt isAlive
            type: webhook.JsonWebhook
            URL: https://portfolio-mgmt-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.portfolio-mgmt.adapter/services/healthChecks
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira portfolio-mgmt issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${portfolio-mgmtJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for portfolio-mgmt deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${portfolio-mgmtJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: portfolio-mgmtJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: ${global.UNITMAP}
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_portfolio_mgmt_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy QandB Life global
      description: This template deploys the QandB Life component
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Create support ticket
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy QandB Life to ${OE} ${STAGE}'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy QandB Life ${INFRASTRUCTURE} ${VERSION} to ${OE} ${STAGE}\"\
              ,\n       \"description\": \"\",\n       \"issuetype\": {\n        \
              \  \"name\": \"Task\"\n},\n\t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\t\t\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"${jiraAssignedTeam}\"\
              \n\t\t},\n \"${JiraImplementationLayerFieldId}\" : {\n            \"\
              value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.password: ${JiraPassword}
              pythonScript.issueId: ${QandB LifeJiraIssueId}
          - name: Set Jira QandB Life issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${QandB LifeJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
          - name: Set Jira QandB Life issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${QandB LifeJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
        color: '#0079BC'
      - phase: Deploy and Verify
        tasks:
        - name: Deploy and check QandB Life
          type: xlrelease.SequentialGroup
          tasks:
          - name: Deploy QandB Life
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: /ITMP-Life QandB/job/life-qb-deploy/
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              VERSION=${VERSION}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
        color: '#0079BC'
      - phase: Complete
        tasks:
        - name: Set Jira QandB Life issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          username: ${JiraUsername}
          issueId: ${QandB LifeJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
          variableMapping:
            pythonScript.password: ${JiraPassword}
        - name: Wait for QandB Life deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${QandB LifeJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: CLUSTER
        description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
          | aws-ase2 = Sydney | ap2 = On-Premise Australia
      - type: xlrelease.StringVariable
        key: QandB LifeJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
      - type: xlrelease.StringVariable
        key: JiraUsername
        requiresValue: false
      - type: xlrelease.PasswordStringVariable
        key: JiraPassword
        requiresValue: false
      - type: xlrelease.StringVariable
        key: VERSION
      - type: xlrelease.StringVariable
        key: INFRASTRUCTURE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_QandB_Life_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy RAP global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Deploy RAP
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy RAP to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy RAP ${RAPVersion} to ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n   \
              \    }, \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              ,\n\"${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\
              \n\t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n      \
              \      \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${RAPJiraIssueId}
          - name: Set Jira RAP issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${RAPJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira RAP issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${RAPJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        - name: Deploy and check RAP
          type: xlrelease.SequentialGroup
          tasks:
          - name: Map ENV to OE and STAGE
            type: xlrelease.ScriptTask
            script: |-
              if releaseVariables['OE'] != "it-master-platform":
                  releaseVariables['UNIT_NAME'] = ${global.UNITMAP}[releaseVariables['OE']]
              else:
                  releaseVariables['UNIT_NAME'] = "itmp"
              #variables needed for dynamic isAlive
              releaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1] + "." + releaseVariables['CLUSTER'].split('-')[0]
              if releaseVariables['OE'] == "it-master-platform":
                  releaseVariables['OEPREFIX'] = ''
              else:
                  releaseVariables['OEPREFIX'] = 'itmp-'
          - name: Deploy RAP
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-ABS/job/rap-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              OE=${OE}
              STAGE=${STAGE}
              VERSION=${RAPVersion}
              GIT_BRANCH=master
              UNIT_NAME=${UNIT_NAME}
              CONFIG_TYPE=${CONFIG_TYPE}
              CONFIGVERSIONTAG=${RAPVersion}
              TEMPLATE_BRANCH=master
              FILEBEAT_BRANCH=master
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(120)
          - name: Test RAP isAlive
            type: webhook.JsonWebhook
            URL: https://rap-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.rap/abs
        - name: Set Jira RAP issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${RAPJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for RAP deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${RAPJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: RAPVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: CLUSTER
        showOnReleaseStart: false
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: RAPJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_RAP_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy RSS global
      description: This template deploys the RSS component
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Deploy ${app}
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy ${app} to ${OE} ${STAGE}'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy RSS ${version} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"${jiraAssignedTeam}\"\
              \n\t\t},\n \"${JiraImplementationLayerFieldId}\" : {\n            \"\
              value\" : \"${JiraImplementationLayer}\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.password: ${JiraPassword}
              pythonScript.issueId: ${JiraIssueId}
          - name: Set Jira ${app} issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${JiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
          - name: Set Jira ${app} issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${JiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
        - name: Deploy and check ${app}
          type: xlrelease.SequentialGroup
          tasks:
          - name: Deploy ${app}
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-FRONTEND-RSS
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              UNIT_NAME=${unitname}
              VERSION=${version}
              FILEBEAT_PORT=${filebeatport}
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
        - name: Set Jira ${app} issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          username: ${JiraUsername}
          issueId: ${JiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
          variableMapping:
            pythonScript.password: ${JiraPassword}
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: CLUSTER
        description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
          | aws-ase2 = Sydney | ap2 = On-Premise Australia
      - type: xlrelease.StringVariable
        key: version
        description: Application version to be deployed
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
      - type: xlrelease.StringVariable
        key: JiraUsername
        requiresValue: false
      - type: xlrelease.PasswordStringVariable
        key: JiraPassword
        requiresValue: false
      - type: xlrelease.StringVariable
        key: JiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: app
        showOnReleaseStart: false
        value: RSS
      - type: xlrelease.StringVariable
        key: filebeatport
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: unitname
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_RSS_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy SDW global
      description: This template deploys the SDW component
      scheduledStartDate: 2020-10-13T07:00:00Z
      phases:
      - phase: Create support ticket
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy SDW to ${OE} ${STAGE}'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy SDW ${version} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"${jiraAssignedTeam}\"\
              \n\t\t},\n \"${JiraImplementationLayerFieldId}\" : {\n            \"\
              value\" : \"${JiraImplementationLayer}\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.password: ${JiraPassword}
              pythonScript.issueId: ${SDWJiraIssueId}
          - name: Set Jira SDW issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${SDWJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set status to "In Analysis"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
          - name: Set Jira SDW issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            username: ${JiraUsername}
            issueId: ${SDWJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set status to "In Progress"'
            variableMapping:
              pythonScript.password: ${JiraPassword}
        color: '#0079BC'
      - phase: Deploy and Verify
        tasks:
        - name: Deploy and check SDW
          type: xlrelease.SequentialGroup
          tasks:
          - name: Deploy SDW
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-SDW/job/sdw-sales-portal-deploy/
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              CUSTOMER_CODE=${customercode}
              INFRASTRUCTURE=${INF}
              VERSION=${SDWVersion}
              AUTO_APPLY=True
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
        color: '#0079BC'
      - phase: Complete
        tasks:
        - name: Set Jira SDW issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          username: ${JiraUsername}
          issueId: ${SDWJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set status to "Done"'
          variableMapping:
            pythonScript.password: ${JiraPassword}
        - name: Wait for SDW deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${SDWJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
      - type: xlrelease.StringVariable
        key: CLUSTER
        description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
          | aws-ase2 = Sydney | ap2 = On-Premise Australia
      - type: xlrelease.StringVariable
        key: version
        description: Application version to be deployed
      - type: xlrelease.StringVariable
        key: SDWJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: customercode
        description: e.g. bga, bgb, bgc, bmp...
      - type: xlrelease.StringVariable
        key: jiraAssignedTeam
        description: Team in Jira to which this ticket needs to be assigned to
      - type: xlrelease.StringVariable
        key: JiraImplementationLayer
        description: Implementation Layer (corresponding Jira values)
      - type: xlrelease.StringVariable
        key: JiraUsername
        requiresValue: false
      - type: xlrelease.PasswordStringVariable
        key: JiraPassword
        requiresValue: false
      - type: xlrelease.StringVariable
        key: INF
      - type: xlrelease.StringVariable
        key: SDWVersion
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_SDW_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy SPP global
      scheduledStartDate: 2020-05-11T07:00:00Z
      phases:
      - phase: Create Jira
        tasks:
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy SPP to <Stage>'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy SPP ${SPPVersion} to ${OE} ${STAGE}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n},\n\
              \t\t\"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\",\n\t\t\"\
              ${JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"ITMP-OPS-FE\"\n\
              \t\t},\n        \"${JiraImplementationLayerFieldId}\" : {\n        \
              \    \"value\" : \"Country Layer\"\n        }\n\t}\n}"
            variableMapping:
              pythonScript.issueId: ${SPPJiraIssueId}
          - name: Set Jira SPP issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${SPPJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira SPP issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${SPPJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        color: '#0079BC'
      - phase: Deploy SPP
        tasks:
        - name: Deploy and Check SPP
          type: xlrelease.SequentialGroup
          tasks:
          - name: Build variables for isAlive
            type: xlrelease.ScriptTask
            script: "if releaseVariables['OE'] != \"it-master-platform\":\n    releaseVariables['UNIT_NAME']\
              \ = ${global.UNITMAP}[releaseVariables['OE']]\nelse:\n    releaseVariables['UNIT_NAME']\
              \ = \"itmp\"\n    \nreleaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1]\
              \ + \".\" + releaseVariables['CLUSTER'].split('-')[0]\nif releaseVariables['OE']\
              \ == \"it-master-platform\":\n    releaseVariables['OEPREFIX'] = ''\n\
              else:\n    releaseVariables['OEPREFIX'] = 'itmp-'"
          - name: Deploy SPP
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-SPP/job/spp-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              OE=${OE}
              STAGE=${STAGE}
              VERSION=${SPPVersion}
              GIT_BRANCH=main
              VANILLA=no
              CUSTOMER_CODE=${CUSTOMER_CODE}
              INFRASTRUCTURE=${INFRASTRUCTURE}
              AUTO_APPLY=true
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(180)
          - name: Test SPP isAlive
            type: webhook.JsonWebhook
            URL: https://cisl-${OEPREFIX}${OE}-${STAGE}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz/${UNIT_NAME}.allianz.abs.cisl.adapter/services/healthChecks
        color: '#0079BC'
      - phase: Close Jira
        tasks:
        - name: Set Jira SPP issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${SPPJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for SPP deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${SPPJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      tags:
      - deployments
      variables:
      - type: xlrelease.StringVariable
        key: SPPVersion
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
      - type: xlrelease.StringVariable
        key: JiraProjectKey
      - type: xlrelease.StringVariable
        key: SPPJiraIssueId
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
      - type: xlrelease.StringVariable
        key: INFRASTRUCTURE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_SPP_global_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Restart
      scheduledStartDate: 2021-03-03T08:00:00Z
      phases:
      - phase: New Phase
        tasks:
        - name: Restart
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: ITMP - Scheduled Restart
          jobParameters: |-
            CLUSTER=${CLUSTER}
            OE=${OE}
            APPLICATION=${APPLICATION}
            STAGE=${STAGE}
      variables:
      - type: xlrelease.StringVariable
        key: APPLICATION
      - type: xlrelease.StringVariable
        key: CLUSTER
      - type: xlrelease.StringVariable
        key: OE
      - type: xlrelease.StringVariable
        key: STAGE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Restart_scriptUserPassword"
      riskProfile: Default risk profile
