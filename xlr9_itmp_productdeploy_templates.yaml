---
apiVersion: xl-release/v1
kind: Templates
metadata:
  home: ITMP Product/Deploy
spec:
- template: Deploy CHS Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy CHS
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy CHS ${CHSFEVersion} and or ${CHSBFFVersion} to ${folder.OE}\
        \ ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CHSBFFVersion
        value: "${CHSBFFVersion}"
      - type: xlrelease.StringVariable
        key: CHSFEVersion
        requiresValue: false
        value: "${CHSFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      createdReleaseId: "${CHSDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy CHS global new
      folder: ITMP Global/Deploy
    - name: Wait for CHS deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CHSDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CHSBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: CHSFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: CHSDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_CHS_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy CISL Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy CISL
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy CISL ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: properties
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CISLVersion
        value: "${CISLVersion}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      createdReleaseId: "${CISLDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy CISL global new
      folder: ITMP Global/Deploy
    - name: Wait for CISL deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${CISLDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CISLVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: CISLDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_CISL_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy MotorPolicyAdmin Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy MotorPolicyAdmin
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy MotorPolicyAdmin  and or  to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: MotorPolicyAdminBFFVersion
        value: "${MotorPolicyAdminBFFVersion}"
      - type: xlrelease.StringVariable
        key: MotorPolicyAdminFEVersion
        requiresValue: false
        value: "${MotorPolicyAdminFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      createdReleaseId: "${MotorPolicyAdminDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy MotorPolicyAdmin global new
      folder: ITMP Global/Deploy
    - name: Wait for MotorPolicyAdmin deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${MotorPolicyAdminDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: MotorPolicyAdminDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: MotorPolicyAdminBFFVersion
  - type: xlrelease.StringVariable
    key: MotorPolicyAdminFEVersion
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_MotorPolicyAdmin_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy Q&B-Life-Expert Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy Q&B-Life-Expert
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy Q&B-Life-Expert ${Q&B-Life-ExpertFEVersion} and or\
        \ ${Q&B-Life-ExpertBFFVersion} to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: "${CONFIG_TYPE}"
      - type: xlrelease.StringVariable
        key: Q&B-Life-ExpertBFFVersion
        value: "${Q&B-Life-ExpertBFFVersion}"
      - type: xlrelease.StringVariable
        key: Q&B-Life-ExpertFEVersion
        requiresValue: false
        value: "${Q&B-Life-ExpertFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: Q&B-Life-ExpertbffVersion
        inherited: true
      - type: xlrelease.StringVariable
        key: Q&B-Life-ExpertfeVersion
        inherited: true
      createdReleaseId: "${Q&B-Life-ExpertDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy Q&B-Life-Expert global new
      folder: ITMP Global/Deploy
    - name: Wait for Q&B-Life-Expert deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${Q&B-Life-ExpertDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Q&B-Life-ExpertBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Life-ExpertFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Life-ExpertDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_Q_B_Life_Expert_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy Q&B-Life-Retail Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy Q&B-Life-Retail
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy Q&B-Life-Retail ${Q&B-Life-RetailFEVersion} and or\
        \ ${Q&B-Life-RetailBFFVersion} to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: "${CONFIG_TYPE}"
      - type: xlrelease.StringVariable
        key: Q&B-Life-RetailBFFVersion
        value: "${Q&B-Life-RetailBFFVersion}"
      - type: xlrelease.StringVariable
        key: Q&B-Life-RetailFEVersion
        requiresValue: false
        value: "${Q&B-Life-RetailFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: Q&B-Life-RetailbffVersion
        inherited: true
      - type: xlrelease.StringVariable
        key: Q&B-Life-RetailfeVersion
        inherited: true
      createdReleaseId: "${Q&B-Life-RetailDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy Q&B-Life-Retail global new
      folder: ITMP Global/Deploy
    - name: Wait for Q&B-Life-Retail deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${Q&B-Life-RetailDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Q&B-Life-RetailBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Life-RetailFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Life-RetailDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_Q_B_Life_Retail_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy Q&B-Motor-Expert Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy Q&B-Motor-Expert
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy Q&B-Motor-Expert ${Q&B-Motor-ExpertFEVersion} and or\
        \ ${Q&B-Motor-ExpertBFFVersion} to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: Q&B-Motor-ExpertBFFVersion
        value: "${Q&B-Motor-ExpertBFFVersion}"
      - type: xlrelease.StringVariable
        key: Q&B-Motor-ExpertFEVersion
        requiresValue: false
        value: "${Q&B-Motor-ExpertFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      createdReleaseId: "${Q&B-Motor-ExpertDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy Q&B-Motor-Expert global new
      folder: ITMP Global/Deploy
    - name: Wait for Q&B-Motor-Expert deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${Q&B-Motor-ExpertDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Q&B-Motor-ExpertBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Motor-ExpertFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Motor-ExpertDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_Q_B_Motor_Expert_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy Q&B-Motor-Retail Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy Q&B-Motor-Retail
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy Q&B-Motor-Retail ${Q&B-Motor-RetailFEVersion} and or\
        \ ${Q&B-Motor-RetailBFFVersion} to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: Q&B-Motor-RetailBFFVersion
        value: "${Q&B-Motor-RetailBFFVersion}"
      - type: xlrelease.StringVariable
        key: Q&B-Motor-RetailFEVersion
        requiresValue: false
        value: "${Q&B-Motor-RetailFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      createdReleaseId: "${Q&B-Motor-RetailDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy Q&B-Motor-Retail global new
      folder: ITMP Global/Deploy
    - name: Wait for Q&B-Motor-Retail deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${Q&B-Motor-RetailDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Q&B-Motor-RetailBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Motor-RetailFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Q&B-Motor-RetailDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_Q_B_Motor_Retail_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy RAP Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy RAP
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy RAP ${Rapversion} to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: Rapversion
        value: "${Rapversion}"
      createdReleaseId: "${RAPDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy RAP global new
      folder: ITMP Global/Deploy
    - name: Wait for RAP deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RAPDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RAPDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Rapversion
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_RAP_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy RSS Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy RSS
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy RSS  ${RSSVersion} to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: Rssversion
        value: "${RSSVersion}"
      createdReleaseId: "${RSSDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy RSS global new
      folder: ITMP Global/Deploy
    - name: Wait for RSS deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${RSSDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RSSDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: RSSVersion
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_RSS_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy Radar-Live Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy Radar-Live
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy Radar-Live ${Radar-LiveFEVersion} and or ${Radar-LiveBFFVersion}\
        \ to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: "${CONFIG_TYPE}"
      - type: xlrelease.StringVariable
        key: Radar-LiveBFFVersion
        value: "${Radar-LiveBFFVersion}"
      - type: xlrelease.StringVariable
        key: Radar-LiveFEVersion
        requiresValue: false
        value: "${Radar-LiveFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: DB_TYPE
        inherited: true
      - type: xlrelease.StringVariable
        key: RADARLIVE_CALC_IMAGE_VERSION
        inherited: true
      - type: xlrelease.StringVariable
        key: RADARLIVE_MGMT_IMAGE_VERSION
        inherited: true
      - type: xlrelease.StringVariable
        key: RADARLIVE_PRE_INSTALL_UPGRADE_IMAGE_VERSION
        inherited: true
      - type: xlrelease.StringVariable
        key: RADARLIVE_SCHEDULEMANAGER_IMAGE_VERSION
        inherited: true
      - type: xlrelease.StringVariable
        key: RADARLIVE_SETTINGS_MANAGER_IMAGE_VERSION
        inherited: true
      - type: xlrelease.StringVariable
        key: UPLOAD_PAGE_VERSION
        inherited: true
      createdReleaseId: "${Radar-LiveDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy Radar-Live global new
      folder: ITMP Global/Deploy
    - name: Wait for Radar-Live deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${Radar-LiveDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Radar-LiveBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Radar-LiveFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: Radar-LiveDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_Radar_Live_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy app_name Product
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:47Z
  phases:
  - phase: Deploy app_name
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: "releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()"
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy app_name
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy app_name ${app_nameVersion} to ${folder.OE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: app_nameVersion
        requiresValue: false
        value: "${app_nameVersion}"
      - type: xlrelease.StringVariable
        key: OE
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: properties
      createdReleaseId: "${app_nameDeplId}"
      template: ITMP Global/Deploy/Deploy app_name global
      folder: ITMP Global/Deploy
    - name: Wait for app_name deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${app_nameDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: app_nameVersion
  - type: xlrelease.StringVariable
    key: app_nameDeplId
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: testreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: testId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: STAGE
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - DEV
      - TEST
      - PERF
      - DEMO
      - HOTFIX
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    description: select --> properties for 20.5 ; reg for 20.0
    valueProvider:
      type: xlrelease.ListOfStringValueProviderConfiguration
      values:
      - reg
      - properties
    value: properties
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_app_name_Product_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy policy-amendment Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy policy-amendment
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy policy-amendment Policyamendmentversion to ${folder.OE}\
        \ ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: Policyamendmentversion
        value: "${Policyamendmentversion}"
      createdReleaseId: "${policy-amendmentDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy policy-amendment global new
      folder: ITMP Global/Deploy
    - name: Wait for policy-amendment deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${policy-amendmentDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: policy-amendmentDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: Policyamendmentversion
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_policy_amendment_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy policy-flows Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy policy-flows
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy policy-flows ${policy-flowsFEVersion} and or ${policy-flowsBFFVersion}\
        \ to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: "${CONFIG_TYPE}"
      - type: xlrelease.StringVariable
        key: policy-flowsBFFVersion
        value: "${policy-flowsBFFVersion}"
      - type: xlrelease.StringVariable
        key: policy-flowsFEVersion
        requiresValue: false
        value: "${policy-flowsFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: policy-flowsbffVersion
        inherited: true
      - type: xlrelease.StringVariable
        key: policy-flowsfeVersion
        inherited: true
      createdReleaseId: "${policy-flowsDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy policy-flows global new
      folder: ITMP Global/Deploy
    - name: Wait for policy-flows deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${policy-flowsDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: policy-flowsBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: policy-flowsFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: policy-flowsDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_policy_flows_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- template: Deploy policy-search Product new
  scheduledStartDate: 2020-08-26T07:00:00Z
  dueDate: 2021-10-12T12:34:41Z
  phases:
  - phase: Deploy CISL
    tasks:
    - name: Map environment to stage
      type: xlrelease.ScriptTask
      script: |-
        releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
    - name: Check smoke tests
      type: xlrelease.SequentialGroup
      precondition: "releaseVariables['STAGE'] == \"preprod\""
      tasks:
      - name: Query for ticket
        type: jira.Query
        jiraServer: ITMP-JIRA
      - name: get ticket ID
        type: xlrelease.ScriptTask
      - name: check status of ticket
        type: jira.CheckIssue
        jiraServer: ITMP-JIRA
    - name: Deploy policy-search
      type: xlrelease.CreateReleaseTask
      newReleaseTitle: "Deploy policy-search ${policy-searchFEVersion} and or ${policy-searchBFFVersion}\
        \ to ${folder.OE} ${STAGE}"
      templateVariables:
      - type: xlrelease.StringVariable
        key: OE
        description: Value should come from a predefined folder variable
        value: "${folder.OE}"
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        description: Value should come from a predefined folder variable
        value: "${folder.JiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        description: Value should come from a predefined folder variable
        value: "${folder.JiraProjectKey}"
      - type: xlrelease.StringVariable
        key: STAGE
        description: Stage to which to deploy. Value should be set through the environment
          listbox
        value: "${STAGE}"
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraAssignedTeamFieldId}"
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        description: Value should come from a predefined folder variable
        value: "${folder.JiraImplementationLayerFieldId}"
      - type: xlrelease.StringVariable
        key: CLUSTER
        inherited: true
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        value: "${CONFIG_TYPE}"
      - type: xlrelease.StringVariable
        key: policy-searchBFFVersion
        value: "${policy-searchBFFVersion}"
      - type: xlrelease.StringVariable
        key: policy-searchFEVersion
        requiresValue: false
        value: "${policy-searchFEVersion}"
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        value: "${folder.CUSTOMER_CODE}"
      - type: xlrelease.StringVariable
        key: GIT_ORGANISATION
        value: "${folder.GIT_ORGANISATION}"
      - type: xlrelease.StringVariable
        key: CLOUD_PROVIDER
        value: "${folder.CLOUD_PROVIDER}"
      - type: xlrelease.StringVariable
        key: policy-searchbffVersion
        inherited: true
      - type: xlrelease.StringVariable
        key: policy-searchfeVersion
        inherited: true
      createdReleaseId: "${policy-searchDeplId}"
      riskProfile: Default risk profile
      template: ITMP Global/Deploy/Deploy policy-search global new
      folder: ITMP Global/Deploy
    - name: Wait for policy-search deployment
      type: xlrelease.GateTask
      dependencies:
      - type: xlrelease.Dependency
        targetId: "${policy-searchDeplId}"
    color: '#0079BC'
  variables:
  - type: xlrelease.StringVariable
    key: environmentSelect
    valueProvider:
      type: xlrelease.EnvironmentValueProvider
  - type: xlrelease.StringVariable
    key: STAGE
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: dashboardreleaseid
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: policy-searchBFFVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: policy-searchFEVersion
    description: You will need to provide both BFF anf FE version - this is a jenkins
      pipeline restriction
  - type: xlrelease.StringVariable
    key: policy-searchDeplId
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: GIT_ORGANISATION
    requiresValue: false
    showOnReleaseStart: false
  - type: xlrelease.StringVariable
    key: CONFIG_TYPE
    requiresValue: false
    showOnReleaseStart: false
  scriptUsername: admin
  scriptUserPassword: !value "xlrelease_Release_Deploy_policy_search_Product_new_scriptUserPassword"
  riskProfile: Default risk profile
- directory: Batch
  children:
  - template: Batch purchasing
    scheduledStartDate: 2020-05-14T07:00:00Z
    dueDate: 2020-06-16T16:11:44.111Z
    phases:
    - phase: Customer Requirement
      tasks:
      - name: Customer requirement experienced by OE Dev
        type: xlrelease.Task
      - name: OE Dev look up information about existing modules in rochade (requirement
          in Rochade)
        type: xlrelease.Task
      - name: Ask ITMP dev if availablein center
        type: xlrelease.Task
      - name: "If yes: Added to release notes an ITMP customer adaption"
        type: xlrelease.Task
      - name: if no
        type: xlrelease.SequentialGroup
        tasks:
        - name: "If not: analysis by batch team (effort, existing templates to reuse\
            \ etc)"
          type: xlrelease.Task
        - name: "If not: go to Rochade"
          type: xlrelease.Task
        - name: Read in release notes what adaptions to be performed
          type: xlrelease.Task
        - name: Add to ITMP customer adaption
          type: xlrelease.Task
      - name: sent to mailbox and is implemented by OE Batch operator
        type: xlrelease.SequentialGroup
    - phase: Product requirement
      color: '#0079BC'
    extensions:
    - name: Dashboard
      type: xlrelease.Dashboard
      owner: admin
      tiles:
      - name: Release progress
        type: xlrelease.ReleaseProgressTile
      - name: Release summary
        type: xlrelease.ReleaseSummaryTile
      - name: Resource usage
        type: xlrelease.ResourceUsageTile
      - name: Release timeline
        type: xlrelease.TimelineTile
      - name: Release health
        type: xlrelease.ReleaseHealthTile
    riskProfile: Default risk profile
- directory: DevWorkplace
  children:
  - template: asd
    scheduledStartDate: 2021-01-22T08:00:00Z
    dueDate: 2021-01-22T09:00:00Z
    phases:
    - phase: New Phase
    riskProfile: Default risk profile
- directory: Frontend
  children:
  - template: Restart XLR
    scheduledStartDate: 2021-03-03T08:00:00Z
    dueDate: 2021-10-12T12:35:38.145Z
    phases:
    - phase: Restart
      tasks:
      - name: Restart XLR
        type: xlrelease.CreateReleaseTask
        newReleaseTitle: Restart XLR
        templateVariables:
        - type: xlrelease.StringVariable
          key: APPLICATION
          value: xl-release
        - type: xlrelease.StringVariable
          key: CLUSTER
          value: aws-ec1
        - type: xlrelease.StringVariable
          key: OE
          value: it-master-platform
        - type: xlrelease.StringVariable
          key: STAGE
          value: temp
        riskProfile: Default risk profile
        template: ITMP Global/Deploy/Restart
        folder: ITMP Global/Deploy
      color: '#0079BC'
    scriptUsername: admin
    riskProfile: Default risk profile
  - template: Restart XLR CRP2
    scheduledStartDate: 2021-03-03T08:00:00Z
    dueDate: 2021-10-12T12:35:38.145Z
    phases:
    - phase: Restart
      tasks:
      - name: Restart XLR
        type: xlrelease.CreateReleaseTask
        newReleaseTitle: Restart XLR
        templateVariables:
        - type: xlrelease.StringVariable
          key: APPLICATION
          value: xl-release
        - type: xlrelease.StringVariable
          key: OE
          value: product
        - type: xlrelease.StringVariable
          key: STAGE
        - type: xlrelease.StringVariable
          key: CLUSTERNAME
          value: "${CLUSTERNAME}"
        riskProfile: Default risk profile
        template: ITMP Global/Deploy/Restart CRP2
        folder: ITMP Global/Deploy
      color: '#0079BC'
    variables:
    - type: xlrelease.StringVariable
      key: CLUSTERNAME
    - type: xlrelease.StringVariable
      key: STAGE
      valueProvider:
        type: xlrelease.EnvironmentValueProvider
    scriptUsername: admin
    riskProfile: Default risk profile
  - template: sdfgsdfgasdf
    scheduledStartDate: 2021-12-02T08:00:00Z
    phases:
    - phase: New Phase
    variables:
    - type: xlrelease.StringVariable
      key: environmentSelect
      valueProvider:
        type: xlrelease.EnvironmentValueProvider
    scriptUsername: A7677
    scriptUserPassword: !value "xlrelease_Release_sdfgsdfgasdf_scriptUserPassword"
    riskProfile: Default risk profile
  - directory: In Progress
    children:
    - template: Deploy
      description: "deploying all components at with one template, calls component\
        \ flow if version is set"
      scheduledStartDate: 2020-06-25T07:00:00Z
      dueDate: 2021-10-12T12:35:38.863Z
      phases:
      - phase: Deploy
        tasks:
        - name: Set target environment from Environment Selection
          type: xlrelease.ScriptTask
          script: "releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title"
        - name: Deploy Frontend
          type: xlrelease.ParallelGroup
          tasks:
          - name: Deploy RAP
            type: xlrelease.SequentialGroup
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: RAPVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: rapdeplid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CISLVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: cisldepid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOBFFVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: mobffdepid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOFEVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: mofedepid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: fnolfedepid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FNOLFEVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: FNOLBFFVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: fnolbffdepid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      riskProfile: Default risk profile
    - template: Deploy AIMS
      scheduledStartDate: 2020-09-10T07:00:00Z
      dueDate: 2021-10-12T13:36:11.692Z
      phases:
      - phase: Deploy AIMS
        tasks:
        - name: Map environment to STAGE
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].split(' ')[1].lower()
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: AIMSVersion
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: AIMSDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      scriptUsername: admin
      riskProfile: Default risk profile
    - template: Deploy AIMS Process
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:12:24.997Z
      phases:
      - phase: Deploy AIMS
        tasks:
        - name: Set target environment from environment selection
          type: xlrelease.ScriptTask
          script: "releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title"
        - name: Provide AIMS Version
          type: xlrelease.UserInputTask
          description: Please enter the required information below.
          precondition: "releaseVariables['AIMSVersion'] == ''"
          variables:
          - AIMSVersion
        - name: Create deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: "Create Task: Deploy AIMS to <Stage>"
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy AIMS to ${environment}\",\n       \"description\": \"\",\n\
              \       \"issuetype\": {\n          \"name\": \"Task\"\n       }, \n\
              \       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\n   }\n\
              }"
            variableMapping:
              pythonScript.issueId: "${AIMSJiraIssueId}"
          - name: Assign Deployment ticket to the responsible team
            type: xlrelease.Task
        - name: Deploy and check
          type: xlrelease.SequentialGroup
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              version: "${AIMSVersion}"
              environmentId: "${environment}"
            application: AIMS
          tasks:
          - name: Deploy AIMS
            type: xlrelease.Task
            facets:
            - type: udm.DeploymentTaskFacet
              variableMapping:
                version: "${AIMSVersion}"
                environmentId: "${environment}"
              application: AIMS
          - name: Perform IsAlive checks
            type: xlrelease.Task
        - name: Verify IsAlive checks
          type: xlrelease.GateTask
        - name: Add IsAlive check results to ticket
          type: xlrelease.Task
        - name: Wait for AIMS deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: "${AIMSJiraIssueId}"
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: AIMSVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: environment
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: AIMSJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: "${folder.RDAJiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.RDAJiraProjectKey}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: "${folder.RDAJiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
    - template: Deploy Filenet Process
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:12:34.525Z
      phases:
      - phase: Deploy Filenet
        tasks:
        - name: Set target environment from environment select
          type: xlrelease.ScriptTask
          script: "releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title"
        - name: Provide Filenet Version
          type: xlrelease.UserInputTask
          description: Please enter the required information below.
          precondition: "releaseVariables['FilenetVersion'] == ''"
        - name: Create Deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: "Create Task: Deploy Filenet to <Stage>"
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Filenet to ${environment}\",\n       \"description\": \"\"\
              ,\n       \"issuetype\": {\n          \"name\": \"Task\"\n       },\
              \ \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\n\
              \   }\n}"
            variableMapping:
              pythonScript.issueId: "${FilenetJiraIssueId}"
          - name: Assign Deployment ticket to the responsible team
            type: xlrelease.Task
          - name: Set Jira Filenet issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${FilenetJiraIssueId}"
            newStatus: In Analysis
          - name: Set Jira Filenet issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${FilenetJiraIssueId}"
            newStatus: In Progress
        - name: Deploy and check
          type: xlrelease.SequentialGroup
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              version: "${FilenetVersion}"
              environmentId: "${environment}"
            application: Filenet
          tasks:
          - name: Deploy Filenet
            type: xlrelease.Task
            facets:
            - type: udm.DeploymentTaskFacet
              variableMapping:
                environmentId: "${environment}"
              version: ""
              application: RadarLive
          - name: Perform IsAlive Checks
            type: xlrelease.Task
        - name: Add IsAlive results to ticket
          type: xlrelease.Task
        - name: Set Jira Filenet issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: "${FilenetJiraIssueId}"
          newStatus: Done
        - name: Wait for Filenet deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: "${FilenetJiraIssueId}"
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environment
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FilenetJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FilenetVersion
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: "${folder.RDAJiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.RDAJiraProjectKey}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: "${folder.RDAJiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
    - template: Deploy Policy Mangement Process
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:12:38.069Z
      phases:
      - phase: Deploy Policy Management
        tasks:
        - name: Set target environment from environment select
          type: xlrelease.ScriptTask
          script: "releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title"
        - name: Provide PM Versions
          type: xlrelease.ParallelGroup
          tasks:
          - name: Provide PM FE Version
            type: xlrelease.UserInputTask
            description: Please enter the required information below.
            precondition: "releaseVariables['PMFEVersion'] == ''"
            variables:
            - PMFEVersion
          - name: Provide PM BFF Version
            type: xlrelease.UserInputTask
            description: Please enter the required information below.
            precondition: "releaseVariables['PMBFFVersion'] == ''"
            variables:
            - PMBFFVersion
        - name: Create Deployment Tickets
          type: xlrelease.ParallelGroup
          tasks:
          - name: "Create Task: Deploy PM BFF to <Stage>"
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Policy Management BFF to ${environment}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n   \
              \    }, \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              \n   }\n}"
            variableMapping:
              pythonScript.issueId: "${PMBFFJiraIssueId}"
          - name: "Create Task: Deploy PM FE to <Stage>"
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Policy Management FE to ${environment}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n   \
              \    }, \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              \n   }\n}"
            variableMapping:
              pythonScript.issueId: "${PMFEJiraIssueId}"
          - name: Assign Deployment ticket to the responsible team
            type: xlrelease.Task
          - name: Set Jira PM FE issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMFEJiraIssueId}"
            newStatus: In Analysis
          - name: Set Jira PM BFF issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMBFFJiraIssueId}"
            newStatus: In Analysis
          - name: Set Jira PM FE issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMFEJiraIssueId}"
            newStatus: In Progress
          - name: Set Jira PM BFF issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMBFFJiraIssueId}"
            newStatus: In Progress
        - name: Deploy and check
          type: xlrelease.SequentialGroup
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              environmentId: "${environment}"
              version: "${PMBFFVersion}"
            application: Policy Management BFF
          - type: udm.DeploymentTaskFacet
            variableMapping:
              version: "${PMFEVersion}"
              environmentId: "${environment}"
            application: Policy Management FE
          tasks:
          - name: Deploy PM
            type: xlrelease.ParallelGroup
            tasks:
            - name: Deploy PM-BFF
              type: xlrelease.Task
            - name: Deploy PM-FE
              type: xlrelease.Task
          - name: Perform IsAlive checks
            type: xlrelease.Task
        - name: Add IsAlive check results to tickets
          type: xlrelease.Task
        - name: Close tickets
          type: xlrelease.ParallelGroup
          tasks:
          - name: Set Jira PM FE issue status to "Done"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMFEJiraIssueId}"
            newStatus: Done
          - name: Set Jira PM BFF issue status to "Done"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMBFFJiraIssueId}"
            newStatus: Done
        - name: Wait for tickets to be closed
          type: xlrelease.ParallelGroup
          tasks:
          - name: Wait for PM FE deployment ticket to be closed
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMFEJiraIssueId}"
            expectedStatusList:
            - Done
            pollInterval: 300
          - name: Wait for PM BFF deployment ticket to be closed
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
            issueId: "${PMBFFJiraIssueId}"
            expectedStatusList:
            - Done
            pollInterval: 300
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: PMFEVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: environment
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: PMBFFVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: PMFEJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: PMBFFJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: "${folder.RDAJiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.RDAJiraProjectKey}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: "${folder.RDAJiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
    - template: Deploy Policy Search Process
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:12:43.810Z
      phases:
      - phase: Deploy Policy Search
        tasks:
        - name: Set target environment from environment select
          type: xlrelease.ScriptTask
          script: "releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title"
        - name: Provide PS Versions
          type: xlrelease.ParallelGroup
          tasks:
          - name: Provide PS FE Version
            type: xlrelease.UserInputTask
            description: Please enter the required information below.
            precondition: "releaseVariables['PSFEVersion'] == ''"
            variables:
            - PSFEVersion
          - name: Provide PS BFF Version
            type: xlrelease.UserInputTask
            description: Please enter the required information below.
            precondition: "releaseVariables['PSBFFVersion'] == ''"
            variables:
            - PSBFFVersion
        - name: Create Deployment Tickets
          type: xlrelease.ParallelGroup
          tasks:
          - name: "Create Task: Deploy PS BFF to <Stage>"
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Policy Search BFF to ${environment}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n   \
              \    }, \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              \n   }\n}"
            variableMapping:
              pythonScript.issueId: "${PSBFFJiraIssueId}"
          - name: "Create Task: Deploy PS FE to <Stage>"
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy Policy Search FE to ${environment}\",\n       \"description\"\
              : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n   \
              \    }, \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
              \n   }\n}"
            variableMapping:
              pythonScript.issueId: "${PSFEJiraIssueId}"
          - name: Assign Deployment ticket to the responsible team
            type: xlrelease.Task
          - name: Set Jira PS FE issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSFEJiraIssueId}"
            newStatus: In Analysis
          - name: Set Jira PS BFF issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSBFFJiraIssueId}"
            newStatus: In Analysis
          - name: Set Jira PS FE issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSFEJiraIssueId}"
            newStatus: In Progress
          - name: Set Jira PS BFF issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSBFFJiraIssueId}"
            newStatus: In Progress
        - name: Deploy and check
          type: xlrelease.SequentialGroup
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              environmentId: "${environment}"
              version: "${PSBFFVersion}"
            application: Policy Search BFF
          - type: udm.DeploymentTaskFacet
            variableMapping:
              environmentId: "${environment}"
              version: "${PSFEVersion}"
            application: Policy Search FE
          tasks:
          - name: Deploy PS
            type: xlrelease.ParallelGroup
            tasks:
            - name: Deploy PS-BFF
              type: xlrelease.Task
            - name: Deploy PS-FE
              type: xlrelease.Task
          - name: Perform IsAlive checks
            type: xlrelease.Task
        - name: Add IsAlive check results to tickets
          type: xlrelease.Task
        - name: Close tickets
          type: xlrelease.ParallelGroup
          tasks:
          - name: Set Jira PS FE issue status to "Done"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSFEJiraIssueId}"
            newStatus: Done
          - name: Set Jira PS BFF issue status to "Done"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSBFFJiraIssueId}"
            newStatus: Done
        - name: Wait for tickets to be closed
          type: xlrelease.ParallelGroup
          tasks:
          - name: Wait for PS FE deployment ticket to be closed
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSFEJiraIssueId}"
            expectedStatusList:
            - Done
            pollInterval: 300
          - name: Wait for PS BFF deployment ticket to be closed
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
            issueId: "${PSBFFJiraIssueId}"
            expectedStatusList:
            - Done
            pollInterval: 300
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: PSFEVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: environment
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: PSBFFVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: PSFEJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: PSBFFJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: "${folder.RDAJiraDeploymentEpic}"
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: "${folder.RDAJiraProjectKey}"
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: "${folder.RDAJiraEpicLinkFieldId}"
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
  - directory: Manual
    children:
    - template: Deploy AIMS Process Manual
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:13:01.897Z
      phases:
      - phase: Deploy AIMS
        tasks:
        - name: Provide AIMS Version
          type: xlrelease.UserInputTask
          description: Please enter the required information below.
          precondition: "releaseVariables['AIMSVersion'] == ''"
          variables:
          - AIMSVersion
        - name: "Create Task: Deploy AIMS to <Stage>"
          type: xlrelease.Task
        - name: Assign Deployment ticket to the responsible team
          type: xlrelease.Task
        - name: Deploy AIMS
          type: xlrelease.Task
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              version: "${AIMSVersion}"
              environmentId: "${environment}"
            application: AIMS
        - name: Perform IsAlive checks
          type: xlrelease.Task
        - name: Verify IsAlive checks
          type: xlrelease.GateTask
        - name: Add IsAlive check results to ticket
          type: xlrelease.Task
        - name: Wait for deployment ticket to be closed
          type: xlrelease.GateTask
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: AIMSVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: environment
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
    - template: Deploy AOMS Process Manual
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:13:04.242Z
      phases:
      - phase: Deploy AOMS Process
        tasks:
        - name: Provide AOMS Version
          type: xlrelease.UserInputTask
          description: Please enter the required information below.
          precondition: "releaseVariables['AOMSVersion'] == ''"
          variables:
          - AOMSVersion
        - name: "Create Task: Deploy AOMS to <Stage> and add DoD steps"
          type: xlrelease.Task
        - name: Assign Deployment ticket to the responsible team
          type: xlrelease.Task
        - name: Deploy AOMS
          type: xlrelease.Task
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              environmentId: "${environment}"
              version: "${AOMSVersion}"
            application: AOMS
        - name: Import Thunderhead  and set up project\\\/batch config ID
          type: xlrelease.Task
        - name: Import AOMS license
          type: xlrelease.Task
        - name: Perform IsAlive checks
          type: xlrelease.Task
        - name: Verify IsAlive checks
          type: xlrelease.GateTask
        - name: Add IsAlive checks results to ticket
          type: xlrelease.Task
        - name: Wait for deployment ticket to be closed
          type: xlrelease.GateTask
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: AOMSVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: environment
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
    - template: Deploy RadarLive Process Manual
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:13:26.481Z
      phases:
      - phase: Deploy RadarLive
        tasks:
        - name: Provide RadarLive Version
          type: xlrelease.UserInputTask
          description: Please enter the required information below.
          precondition: "releaseVariables['RadarLiveVersion'] == ''"
          variables:
          - RadarLiveVersion
        - name: "Create Task: Deploy RadarLive to <Stage>"
          type: xlrelease.Task
        - name: Assign Deployment ticket to the responsible team
          type: xlrelease.Task
        - name: Deploy RadarLive
          type: xlrelease.Task
          facets:
          - type: udm.DeploymentTaskFacet
            variableMapping:
              environmentId: "${environment}"
              version: "${RadarLiveVersion}"
            application: RadarLive
        - name: Perform IsAlive Checks
          type: xlrelease.Task
        - name: Verify IsAlive Checks
          type: xlrelease.GateTask
        - name: Add IsAlive results to ticket
          type: xlrelease.Task
        - name: Wait for deployment ticket to be closed
          type: xlrelease.GateTask
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: RadarLiveVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: environment
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
    - template: Deploy SME Process Manual
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2020-06-16T16:13:28.523Z
      phases:
      - phase: Deploy SME
        tasks:
        - name: Provide SME Versions
          type: xlrelease.ParallelGroup
          tasks:
          - name: Provide SME FE Version
            type: xlrelease.UserInputTask
            precondition: "releaseVariables['SMEFEVersion'] == ''"
            variables:
            - SMEFEVersion
          - name: Provide SME BFF Version
            type: xlrelease.UserInputTask
            precondition: "releaseVariables['SMEBFFVersion'] == ''"
            variables:
            - SMEBFFVersion
        - name: Create Deployment Tickets
          type: xlrelease.ParallelGroup
          tasks:
          - name: "Create Task: Deploy SME BFF to <Stage>"
            type: xlrelease.Task
          - name: "Create Task: Deploy SME FE to <Stage>"
            type: xlrelease.Task
          - name: "Create Task: Deploy SME Config to <Stage>"
            type: xlrelease.Task
        - name: Assign Deployment ticket to the responsible team
          type: xlrelease.Task
        - name: Deploy SME
          type: xlrelease.ParallelGroup
          tasks:
          - name: Deploy SME FE
            type: xlrelease.Task
            facets:
            - type: udm.DeploymentTaskFacet
              variableMapping:
                environmentId: "${environment}"
                version: "${SMEFEVersion}"
              application: "[GDF] SME FE"
          - name: Deploy SME BFF
            type: xlrelease.Task
            facets:
            - type: udm.DeploymentTaskFacet
              variableMapping:
                version: "${SMEBFFVersion}"
                environmentId: "${environment}"
              application: "[GDF] SME BFF"
        - name: Perform IsAlive Checks
          type: xlrelease.Task
        - name: Verify IsAlive Checks
          type: xlrelease.GateTask
        - name: Add IsAlive check results to tickets
          type: xlrelease.Task
        - name: Wait for deployment tickets to be closed
          type: xlrelease.GateTask
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environment
      - type: xlrelease.StringVariable
        key: SMEFEVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: SMEBFFVersion
        requiresValue: false
      scriptUsername: admin
      extensions:
      - name: Dashboard
        type: xlrelease.Dashboard
        owner: admin
        tiles:
        - name: Release progress
          type: xlrelease.ReleaseProgressTile
        - name: Release summary
          type: xlrelease.ReleaseSummaryTile
        - name: Resource usage
          type: xlrelease.ResourceUsageTile
        - name: Release timeline
          type: xlrelease.TimelineTile
        - name: Release health
          type: xlrelease.ReleaseHealthTile
      riskProfile: Default risk profile
- directory: Promote
  children:
  - template: CISL Promote from dev to test
    scheduledStartDate: 2020-10-07T07:00:00Z
    dueDate: 2020-10-07T08:00:00Z
    phases:
    - phase: New Phase
      tasks:
      - name: Version check dev
        type: webhook.JsonWebhook
        URL: https://cisl-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: "$.items[4].value"
        failureHandler: |-
          releaseVariables['versiondev'] = 'Error'
          task = getCurrentTask()
          taskApi.skipTask(task.id, "App is not reachable")
        taskFailureHandlerEnabled: true
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.result: "${versiondev}"
      - name: "Deploy CISL ${versiondev} to TEST"
        type: xlrelease.CreateReleaseTask
        newReleaseTitle: "Deploy CISL ${versiondev} to TEST"
        templateVariables:
        - type: xlrelease.StringVariable
          key: CISLVersion
          value: "${versiondev}"
        - type: xlrelease.StringVariable
          key: environmentSelect
          value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
        - type: xlrelease.BooleanVariable
          key: test
          requiresValue: false
          description: Check to trigger corresponding tests
          inherited: true
          value: true
        - type: xlrelease.StringVariable
          key: CONFIG_TYPE
          description: select --> properties for 20.5 ; reg for 20.0
          inherited: true
          value: properties
        createdReleaseId: "${Releaseid}"
        riskProfile: Default risk profile
        template: ITMP Product/Deploy/Frontend/Deploy CISL Product
        folder: ITMP Product/Deploy/Frontend
      - name: Wait for Deployment
        type: xlrelease.GateTask
        dependencies:
        - type: xlrelease.Dependency
          targetId: "${Releaseid}"
    variables:
    - type: xlrelease.StringVariable
      key: Releaseid
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versiondev
      requiresValue: false
      showOnReleaseStart: false
    scriptUsername: admin
    riskProfile: Default risk profile
  - template: CISL Promote from test to demo
    scheduledStartDate: 2020-10-07T07:00:00Z
    dueDate: 2020-10-07T08:00:00Z
    phases:
    - phase: New Phase
      tasks:
      - name: Version check TEST
        type: webhook.JsonWebhook
        URL: https://cisl-it-master-platform-test.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: "$.items[4].value"
        failureHandler: |-
          releaseVariables['versiontest'] = 'Error'
          task = getCurrentTask()
          taskApi.skipTask(task.id, "App is not reachable")
        taskFailureHandlerEnabled: true
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.result: "${versiontest}"
      - name: "Deploy CISL ${versiontest} to DEMO"
        type: xlrelease.CreateReleaseTask
        newReleaseTitle: "Deploy CISL ${versiontest} to DEMO"
        templateVariables:
        - type: xlrelease.StringVariable
          key: CISLVersion
          value: "${versiontest}"
        - type: xlrelease.StringVariable
          key: environmentSelect
          value: Configuration/environmentManagement/Environment1c5267e5b2d143d2b058bb4d2f524b2c
        - type: xlrelease.BooleanVariable
          key: test
          requiresValue: false
          description: Check to trigger corresponding tests
          inherited: true
          value: true
        - type: xlrelease.StringVariable
          key: CONFIG_TYPE
          description: select --> properties for 20.5 ; reg for 20.0
          inherited: true
          value: properties
        createdReleaseId: "${Releaseid}"
        riskProfile: Default risk profile
        template: ITMP Product/Deploy/Frontend/Deploy CISL Product
        folder: ITMP Product/Deploy/Frontend
      - name: Wait for Deployment
        type: xlrelease.GateTask
        dependencies:
        - type: xlrelease.Dependency
          targetId: "${Releaseid}"
    variables:
    - type: xlrelease.StringVariable
      key: Releaseid
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versiontest
      requiresValue: false
      showOnReleaseStart: false
    scriptUsername: admin
    riskProfile: Default risk profile
  - template: Create CHS FE bundle
    scheduledStartDate: 2021-09-15T07:00:00Z
    dueDate: 2021-09-15T08:00:00Z
    phases:
    - phase: New Phase
      tasks:
      - name: Get CHS FE version From DEV
        type: webhook.JsonWebhook
        URL: https://claims-handler-fe-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: version
        variableMapping:
          pythonScript.result: "${versiondev}"
      - name: Create CHS FE bundle
        type: jenkins.Build
        jenkinsServer: Service Owner Jenkins global
        jobName: /ITMP-GDF/job/claims-handler-fe-bundle-daily/
        jobParameters: "OC_BUILD_BUNDLE_BASE_TAG=${versiondev}"
        variableMapping:
          pythonScript.buildNumber: "${build}"
      - name: Get Bundle version
        type: jenkins.ConsoleOutFindString
        server: Service Owner Jenkins global
        jobPath: job/ITMP-GDF/job/claims-handler-fe-bundle-daily/
        buildNumber: "${build}"
        leftSearch: IMAGE_VERSION=
        variableMapping:
          pythonScript.searchResult: "${versiondev}"
    variables:
    - type: xlrelease.StringVariable
      key: versiondev
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: build
      requiresValue: false
      showOnReleaseStart: false
    riskProfile: Default risk profile
  - template: GDF Components Promote from dev to test
    scheduledStartDate: 2020-10-07T07:00:00Z
    dueDate: 2020-10-07T08:00:00Z
    phases:
    - phase: New Phase
      tasks:
      - name: Version check dev
        type: webhook.JsonWebhook
        URL: "https://${app}-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/package.json"
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: version
        failureHandler: |-
          releaseVariables['versiondev'] = 'Error'
          task = getCurrentTask()
          taskApi.skipTask(task.id, "App is not reachable")
        taskFailureHandlerEnabled: true
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.result: "${versiondev}"
      - name: Create a bundle
        type: xlrelease.SequentialGroup
        tasks:
        - name: Build the bundle
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: "ITMP-GDF/job/${app}-bundle-daily"
          jobParameters: |-
            OC_BUILD_BUNDLE_BASE_TAG=${versiondev}
            OC_BUILD_CONFIG_VERSION=latest
          variableMapping:
            pythonScript.buildNumber: "${buildNumber}"
        - name: Get the bundle version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: "/job/ITMP-GDF/job/${app}-bundle-daily/"
          buildNumber: "${buildNumber}"
          leftSearch: IMAGE_VERSION=
          variableMapping:
            pythonScript.searchResult: "${versiondev}"
      - name: "Deploy  ${versiondev} to TEST"
        type: xlrelease.CreateReleaseTask
        newReleaseTitle: "Deploy  ${versiondev} to TEST"
        templateVariables:
        - type: xlrelease.StringVariable
          key: environmentSelect
          value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
        - type: xlrelease.StringVariable
          key: CLUSTER
          inherited: true
          value: aws-ec1
        - type: xlrelease.StringVariable
          key: app
          value: "${app}"
        - type: xlrelease.StringVariable
          key: appVersion
          value: "${versiondev}"
        - type: xlrelease.StringVariable
          key: configbranch
          requiresValue: false
          description: branch from which to take the deployment configuration
          inherited: true
          value: master
        createdReleaseId: "${Releaseid}"
        riskProfile: Default risk profile
        template: ITMP Global/Deploy/Deploy GDF Asset Dynamic
        folder: ITMP Product/Deploy/Frontend
      - name: Wait for Deployment
        type: xlrelease.GateTask
        dependencies:
        - type: xlrelease.Dependency
          targetId: "${Releaseid}"
    variables:
    - type: xlrelease.StringVariable
      key: Releaseid
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versiondev
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: app
    - type: xlrelease.StringVariable
      key: buildNumber
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: IMAGE_VERSION
      requiresValue: false
      showOnReleaseStart: false
    scriptUsername: admin
    riskProfile: Default risk profile
  - template: Promote CHS
    scheduledStartDate: 2021-09-15T07:00:00Z
    dueDate: 2021-09-15T08:00:00Z
    phases:
    - phase: New Phase
      tasks:
      - name: Get CHS FE version From env
        type: webhook.JsonWebhook
        URL: "https://claims-handler-fe-it-master-platform-${env}.apps.crp.ec1.aws.aztec.cloud.allianz/package.json"
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: version
        variableMapping:
          pythonScript.result: "${versionenv}"
      - name: Create Bundle
        type: xlrelease.SequentialGroup
        precondition: "releaseVariables['env'] =='dev'"
        tasks:
        - name: Create CHS FE bundle
          type: jenkins.Build
          jenkinsServer: Service Owner Jenkins global
          jobName: /ITMP-GDF/job/claims-handler-fe-bundle-daily/
          jobParameters: "OC_BUILD_BUNDLE_BASE_TAG=${versionenv}"
          variableMapping:
            pythonScript.buildNumber: "${build}"
        - name: Get Bundle version
          type: jenkins.ConsoleOutFindString
          server: Service Owner Jenkins global
          jobPath: job/ITMP-GDF/job/claims-handler-fe-bundle-daily/
          buildNumber: "${build}"
          leftSearch: IMAGE_VERSION=
          variableMapping:
            pythonScript.searchResult: "${versionenv}"
      - name: "Get CHS BFF version From ${env}"
        type: webhook.JsonWebhook
        URL: "https://claims-handler-bff-it-master-platform-${env}.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info"
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: build.version
        variableMapping:
          pythonScript.result: "${versionbff}"
      - name: "Deploy CHS to ${env}"
        type: xlrelease.CreateReleaseTask
        newReleaseTitle: "Promote from ${env} to ${STAGE}"
        templateVariables:
        - type: xlrelease.StringVariable
          key: JiraAssignedTeamFieldId
          description: Value should come from a predefined folder variable
          value: "${folder.JiraAssignedTeamFieldId}"
        - type: xlrelease.StringVariable
          key: JiraImplementationLayerFieldId
          description: Value should come from a predefined folder variable
          value: "${folder.JiraImplementationLayerFieldId}"
        - type: xlrelease.StringVariable
          key: JiraProjectKey
          description: Value should come from a predefined folder variable
          value: "${folder.JiraProjectKey}"
        - type: xlrelease.StringVariable
          key: OE
          description: Value should come from a predefined folder variable
          value: "${folder.OE}"
        - type: xlrelease.StringVariable
          key: STAGE
          description: Stage to which to deploy. Value should be set through the environment
            listbox
          value: "${STAGE}"
        - type: xlrelease.StringVariable
          key: JiraDeploymentEpic
          description: Value should come from a predefined folder variable
          value: "${folder.JiraDeploymentEpic}"
        - type: xlrelease.StringVariable
          key: JiraEpicLinkFieldId
          description: Value should come from a predefined folder variable
          value: "${folder.JiraEpicLinkFieldId}"
        - type: xlrelease.StringVariable
          key: CLUSTER
          description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
            | aws-ase2 = Sydney | ap2 = On-Premise Australia
          value: aws-ec1
        - type: xlrelease.StringVariable
          key: customercode
          description: "e.g. bga, bgb, bgc, bmp..."
          value: bmp
        - type: xlrelease.StringVariable
          key: jiraAssignedTeam
          description: Team in Jira to which this ticket needs to be assigned to
          value: ITMP-OPS-FE
        - type: xlrelease.StringVariable
          key: JiraImplementationLayer
          description: Implementation Layer (corresponding Jira values)
          value: "${folder.JiraImplementationLayerFieldId}"
        - type: xlrelease.StringVariable
          key: JiraUsername
          requiresValue: false
          inherited: true
        - type: xlrelease.PasswordStringVariable
          key: JiraPassword
          requiresValue: false
          inherited: true
        - type: xlrelease.StringVariable
          key: CHSBFFVersion
          description: You will need to provide both BFF anf FE version - this is
            a jenkins pipeline restriction
          value: "${versionbff}"
        - type: xlrelease.StringVariable
          key: CHSFEVersion
          description: You will need to provide both BFF anf FE version - this is
            a jenkins pipeline restriction
          value: "${versionenv}"
        createdReleaseId: "${releaseid}"
        riskProfile: Default risk profile
        template: Applications/Foldera842ee332baf41ae94107c01cb83b281/Folder95fdb33fd3bf443a803113a690860cbd/Release5677d9c2a80e457fb7457e188ca5a467
        folder: ITMP Product/Deploy/Promote
    variables:
    - type: xlrelease.StringVariable
      key: versiondev
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: build
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versionenv
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versionenv1
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: env
      description: Get the version from environment
      valueProvider:
        type: xlrelease.ListOfStringValueProviderConfiguration
        values:
        - dev
        - test
    - type: xlrelease.StringVariable
      key: STAGE
    - type: xlrelease.StringVariable
      key: releaseid
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versionbff
      requiresValue: false
      showOnReleaseStart: false
    riskProfile: Default risk profile
  - template: Promote RAP Product
    scheduledStartDate: 2021-07-05T07:00:00Z
    dueDate: 2021-07-05T08:00:00Z
    phases:
    - phase: New Phase
      tasks:
      - name: compare version in 2 environments
        type: xlrelease.CreateReleaseTask
        newReleaseTitle: "RAP ${env1} and ${env2} compare"
        templateVariables:
        - type: xlrelease.StringVariable
          key: projectName
          value: itmp
        - type: xlrelease.StringVariable
          key: configname
          description: "name of the application. e.g. rap, cisl"
          value: rap
        - type: xlrelease.StringVariable
          key: imagename
          description: "Name of the image. e.g. itmprap, itmprss"
          value: itmprap
        - type: xlrelease.StringVariable
          key: env1
          requiresValue: false
          value: "${env1}"
        - type: xlrelease.StringVariable
          key: env2
          requiresValue: false
          value: "${env2}"
        - type: xlrelease.StringVariable
          key: cluster
          requiresValue: false
          description: "e.g. ec1, ew3"
          inherited: true
          value: ec1
        createdReleaseId: "${Releaseid}"
        riskProfile: Default risk profile
        folder: ITMP Product/Deploy/Promote
    variables:
    - type: xlrelease.StringVariable
      key: env1
    - type: xlrelease.StringVariable
      key: env2
    - type: xlrelease.StringVariable
      key: Releaseid
      requiresValue: false
      showOnReleaseStart: false
    scriptUsername: admin
    riskProfile: Default risk profile
  - template: Version Compare OpenShift
    scheduledStartDate: 2020-06-22T07:00:00Z
    dueDate: 2020-06-22T08:00:00Z
    phases:
    - phase: Get Versions EC1
      tasks:
      - name: EC1
        type: xlrelease.SequentialGroup
        precondition: "releaseVariables['cluster'] == 'ec1'"
        tasks:
        - name: Get Session
          type: itmpkeepass.GetOpenshiftToken
          failureHandler: "if (releaseVariables['attempt'] < 3):\r\n  releaseVariables['attempt']\
            \ = releaseVariables['attempt'] + 1\r\n  time.sleep(60)\r\n  taskApi.retryTask(getCurrentTask().getId(),\
            \ \"Retrying task from failure handler.\")\r\nelse:\r\n  taskApi.skipTask(getCurrentTask().getId(),\
            \ \"Skipped task from failure handler.\")"
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.openshiftToken: "${session}"
        - name: "Get ${configname} ${env1} version"
          type: allianz.GetDeployedContainerVersionFromOpenshift
          oc_session_token: "${session}"
          oc_namespace: "${projectName}-${env1}"
          oc_deploymentconfig: "${configname}"
          docker_image_name: "${imagename}"
          precondition: "releaseVariables['env1'] != ''"
          failureHandler: |-
            releaseVariables['versionenv1'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.tag_name: "${versionenv1}"
        - name: "Get ${configname} ${env2} version"
          type: allianz.GetDeployedContainerVersionFromOpenshift
          oc_session_token: "${session}"
          oc_namespace: "${projectName}-${env2}"
          oc_deploymentconfig: "${configname}"
          docker_image_name: "${imagename}"
          precondition: "releaseVariables['env2'] != ''"
          failureHandler: |-
            releaseVariables['versionenv2'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.tag_name: "${versionenv2}"
        - name: Wait
          type: xlrelease.ScriptTask
          script: |-
            import time
            time.sleep(5)
      color: '#0079BC'
    - phase: Get versions EW3
      tasks:
      - name: EW3
        type: xlrelease.SequentialGroup
        precondition: "releaseVariables['cluster'] == 'ew3'"
        tasks:
        - name: Get Session
          type: itmpkeepass.GetOpenshiftToken
          failureHandler: "if (releaseVariables['attempt'] < 3):\r\n  releaseVariables['attempt']\
            \ = releaseVariables['attempt'] + 1\r\n  time.sleep(60)\r\n  taskApi.retryTask(getCurrentTask().getId(),\
            \ \"Retrying task from failure handler.\")\r\nelse:\r\n  taskApi.skipTask(getCurrentTask().getId(),\
            \ \"Skipped task from failure handler.\")"
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.openshiftToken: "${session}"
        - name: "Get ${configname} ${env1} version"
          type: allianz.GetDeployedContainerVersionFromOpenshift
          oc_session_token: "${session}"
          oc_namespace: "${projectName}-${env1}"
          oc_deploymentconfig: "${configname}"
          docker_image_name: "${imagename}"
          precondition: "releaseVariables['env1'] != ''"
          failureHandler: |-
            releaseVariables['versionenv1'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.tag_name: "${versionenv1}"
        - name: "Get ${configname} ${env2} version"
          type: allianz.GetDeployedContainerVersionFromOpenshift
          oc_session_token: "${session}"
          oc_namespace: "${projectName}-${env2}"
          oc_deploymentconfig: "${configname}"
          docker_image_name: "${imagename}"
          precondition: "releaseVariables['env2'] != ''"
          failureHandler: |-
            releaseVariables['versionenv2'] = 'Error'


            task = getCurrentTask()
            taskApi.skipTask(task.id, "App is not reachable")
          taskFailureHandlerEnabled: true
          taskRecoverOp: RUN_SCRIPT
          variableMapping:
            pythonScript.tag_name: "${versionenv2}"
        - name: Wait
          type: xlrelease.ScriptTask
          script: |-
            import time
            time.sleep(5)
      color: '#0079BC'
    - phase: Create HTML Row
      tasks:
      - name: Create Row Variable
        type: xlrelease.ScriptTask
        script: "if releaseVariables['versionenv1'] == releaseVariables['versionenv2']:\n\
          \    releaseVariables['deploy'] = False\n    \nif releaseVariables['versionenv1']\
          \ != releaseVariables['versionenv2'] and releaseVariables['versionenv1']\
          \ !='Error':\n    releaseVariables['deploy'] = True\n\nprint('${versionenv1}')\n\
          print('${versionenv2}')\nprint('${deploy}')"
    variables:
    - type: xlrelease.StringVariable
      key: projectName
    - type: xlrelease.StringVariable
      key: configname
      description: "name of the application. e.g. rap, cisl"
    - type: xlrelease.StringVariable
      key: imagename
      description: "Name of the image. e.g. itmprap, itmprss"
    - type: xlrelease.StringVariable
      key: versionenv1
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: env1
      requiresValue: false
    - type: xlrelease.StringVariable
      key: env2
      requiresValue: false
    - type: xlrelease.StringVariable
      key: versionenv2
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: session
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: cluster
      requiresValue: false
      description: "e.g. ec1, ew3"
      value: ec1
    - type: xlrelease.BooleanVariable
      key: deploy
      requiresValue: false
      showOnReleaseStart: false
    scriptUsername: gjhfk9f
    riskProfile: Default risk profile
  - template: Version Compare Webhook
    scheduledStartDate: 2020-10-07T07:00:00Z
    dueDate: 2020-10-07T08:00:00Z
    phases:
    - phase: New Phase
      tasks:
      - name: "Version check ${env1}"
        type: webhook.JsonWebhook
        URL: "${urldev}"
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: "${expression}"
        failureHandler: |-
          releaseVariables['versionenv1'] = 'Error'
          task = getCurrentTask()
          taskApi.skipTask(task.id, "App is not reachable")
        taskFailureHandlerEnabled: true
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.result: "${versionenv1}"
      - name: "Version check ${env2}"
        type: webhook.JsonWebhook
        URL: "${urltest}"
        proxyHost: proxy.ec1.aws.aztec.cloud.allianz
        proxyPort: "8888"
        jsonPathExpression: "${expression}"
        failureHandler: |-
          releaseVariables['versionenv2'] = 'Error'
          task = getCurrentTask()
          taskApi.skipTask(task.id, "App is not reachable")
        taskFailureHandlerEnabled: true
        taskRecoverOp: RUN_SCRIPT
        variableMapping:
          pythonScript.result: "${versionenv2}"
      - name: Wait
        type: xlrelease.ScriptTask
        script: "import time\r\ntime.sleep(5)"
      - name: Compare versions
        type: xlrelease.ScriptTask
        script: "if releaseVariables['versionenv1'] == releaseVariables['versionenv2']:\n\
          \    releaseVariables['deploy'] = False\n    \nif releaseVariables['versionenv1']\
          \ != releaseVariables['versionenv2'] and releaseVariables['versionenv1']\
          \ !='Error':\n    releaseVariables['deploy'] = True\n\nprint('${versionenv1}')\n\
          print('${versionenv2}')\nprint('${deploy}')"
    variables:
    - type: xlrelease.StringVariable
      key: versiondev
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versiontest
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: urldev
    - type: xlrelease.StringVariable
      key: urltest
    - type: xlrelease.StringVariable
      key: expression
    - type: xlrelease.BooleanVariable
      key: deploy
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: env1
    - type: xlrelease.StringVariable
      key: env2
    - type: xlrelease.StringVariable
      key: versionenv2
      requiresValue: false
      showOnReleaseStart: false
    - type: xlrelease.StringVariable
      key: versionenv1
      requiresValue: false
      showOnReleaseStart: false
    scriptUsername: admin
    riskProfile: Default risk profile
