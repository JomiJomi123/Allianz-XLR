---
apiVersion: xl-release/v1
kind: Templates
spec:
- directory: ITMP Product
  children:
  - directory: Deploy
    children:
    - directory: DevWorkplace
      children:
      - template: asd
        scheduledStartDate: 2021-01-22T08:00:00Z
        phases:
        - phase: New Phase
        riskProfile: Default risk profile
    - directory: Backend
    - directory: Batch
      children:
      - template: Batch purchasing
        scheduledStartDate: 2020-05-14T07:00:00Z
        dueDate: 2020-06-16T16:11:44.111Z
        phases:
        - phase: Customer Requirement
          tasks:
          - name: Customer requirement experienced by OE Dev
            type: xlrelease.Task
          - name: OE Dev look up information about existing modules in rochade (requirement
              in Rochade)
            type: xlrelease.Task
          - name: Ask ITMP dev if availablein center
            type: xlrelease.Task
          - name: 'If yes: Added to release notes an ITMP customer adaption'
            type: xlrelease.Task
          - name: if no
            type: xlrelease.SequentialGroup
            tasks:
            - name: 'If not: analysis by batch team (effort, existing templates to
                reuse etc)'
              type: xlrelease.Task
            - name: 'If not: go to Rochade'
              type: xlrelease.Task
            - name: Read in release notes what adaptions to be performed
              type: xlrelease.Task
            - name: Add to ITMP customer adaption
              type: xlrelease.Task
          - name: sent to mailbox and is implemented by OE Batch operator
            type: xlrelease.SequentialGroup
        - phase: Product requirement
          color: '#0079BC'
        extensions:
        - name: Dashboard
          type: xlrelease.Dashboard
          owner: admin
          tiles:
          - name: Release progress
            type: xlrelease.ReleaseProgressTile
          - name: Release summary
            type: xlrelease.ReleaseSummaryTile
          - name: Resource usage
            type: xlrelease.ResourceUsageTile
          - name: Release timeline
            type: xlrelease.TimelineTile
          - name: Release health
            type: xlrelease.ReleaseHealthTile
          parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder397758d355944e27899aecf00e9bf9e3/Release55f3f193b1df4d948f3f12e0066ecf74
        riskProfile: Default risk profile
    - directory: Daily Deploy
      children:
      - template: Admin cancel Daily Deploy version check
        description: Deploys the latest version of Administration Cancellation to
          TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Version Check
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Version Check
            templateVariables:
            - type: xlrelease.StringVariable
              key: urldev
              value: https://${appname}-it-master-platform-${env1}.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            - type: xlrelease.StringVariable
              key: urltest
              value: https://${appname}-it-master-platform-${env2}.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            - type: xlrelease.StringVariable
              key: expression
              value: $.items[4].value
            - type: xlrelease.StringVariable
              key: env1
              value: dev
            - type: xlrelease.StringVariable
              key: env2
              value: test
            createdReleaseId: ${versionreleaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare Webhook
            folder: ITMP Product/Deploy/Daily Deploy
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${versionreleaseid}
          - name: Collect Data
            type: xlrelease.ScriptTask
            script: "releaseId = releaseVariables['versionreleaseid']\r\nmyVariables\
              \ = releaseApi.getVariableValues(releaseId)\r\n\r\nfor key in myVariables:\r\
              \n    if 'deploy' in key:\r\n        releaseVariables['deploy'] = myVariables[key]\r\
              \n        print(releaseVariables['deploy'])\r\n    if 'versionenv1'\
              \ in key:\r\n        releaseVariables['versionenv1'] = myVariables[key]\r\
              \n        print(releaseVariables['versionenv1'])"
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy Admin Cancel
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['deploy'] == True
            tasks:
            - name: Admin Cancel Daily Deployment TEST
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: Admin Cancel Daily Deployment TEST
              templateVariables:
              - type: xlrelease.StringVariable
                key: CISLVersion
                requiresValue: false
                value: ${versionenv1}
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              createdReleaseId: ${admincancelDeployTESTReleaseId}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy CISL Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for CISL Deployment TEST
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${CISLDeployTESTReleaseId}
          color: '#FFAB00'
        tags:
        - deployments
        - Daily Deploy
        variables:
        - type: xlrelease.StringVariable
          key: CISLDeployTESTReleaseId
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: equal_version
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: appname
        - type: xlrelease.StringVariable
          key: admincancelDeployTESTReleaseId
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Admin_cancel_Daily_Deploy_version_check_scriptUserPassword"
        riskProfile: Default risk profile
      - template: CHR Daily Deploy version check
        description: Deploys CHR to TEST (version found in DEV)
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Version Check
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Version Check
            templateVariables:
            - type: xlrelease.StringVariable
              key: urldev
              value: https://${app}-it-master-platform-${env1}.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info
            - type: xlrelease.StringVariable
              key: urltest
              value: https://${app}-it-master-platform-${env2}.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info
            - type: xlrelease.StringVariable
              key: expression
              value: build.version
            - type: xlrelease.StringVariable
              key: env1
              value: dev
            - type: xlrelease.StringVariable
              key: env2
              value: test
            createdReleaseId: ${versionreleaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare Webhook
            folder: ITMP Product/Deploy/Daily Deploy
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${versionreleaseid}
          - name: Collect Data
            type: xlrelease.ScriptTask
            script: "releaseId = releaseVariables['versionreleaseid']\r\nmyVariables\
              \ = releaseApi.getVariableValues(releaseId)\r\n\r\nfor key in myVariables:\r\
              \n    if 'deploy' in key:\r\n        releaseVariables['deploy'] = myVariables[key]\r\
              \n        print(releaseVariables['deploy'])\r\n    if 'versionenv1'\
              \ in key:\r\n        releaseVariables['versionenv1'] = myVariables[key]\r\
              \n        print(releaseVariables['versionenv1'])"
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['deploy'] == True
            tasks:
            - name: ${app} Deployment
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${app} Deployment
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              - type: xlrelease.StringVariable
                key: version
                description: Application version to be deployed
                inherited: true
              createdReleaseId: ${ReleaseId2}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy CHR Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for ${app} Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseId2}
          color: '#FFAB00'
        tags:
        - deployments
        - daily deploy
        variables:
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: ReleaseId2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: equal_version
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_CHR_Daily_Deploy_version_check_scriptUserPassword"
        riskProfile: Default risk profile
      - template: CHS promote from DEV to test (with bundle)
        description: Bundles the application and deploys it to TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Get DEV Version
            type: webhook.JsonWebhook
            URL: https://claims-handler-fe-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: version
            variableMapping:
              pythonScript.result: ${versiondev}
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            tasks:
            - name: CHS Bundle
              type: jenkins.Build
              jenkinsServer: Service Owner Jenkins global
              jobName: ITMP-GDF/job/claims-handler-fe-bundle-daily
              jobParameters: OC_BUILD_BUNDLE_BASE_TAG=${versiondev}
              variableMapping:
                pythonScript.buildNumber: ${buildNumber}
            - name: Read IMAGE_VERSION
              type: jenkins.ConsoleOutFindString
              server: Service Owner Jenkins global
              jobPath: /job/ITMP-GDF/job/claims-handler-fe-bundle-daily/
              buildNumber: ${buildNumber}
              leftSearch: IMAGE_VERSION=
              variableMapping:
                pythonScript.searchResult: ${IMAGE_VERSION}
            - name: CHS Deploy
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: CHS Deploy
              templateVariables:
              - type: xlrelease.StringVariable
                key: JiraAssignedTeamFieldId
                description: Value should come from a predefined folder variable
                value: ${folder.JiraAssignedTeamFieldId}
              - type: xlrelease.StringVariable
                key: JiraImplementationLayerFieldId
                description: Value should come from a predefined folder variable
                value: ${folder.JiraImplementationLayerFieldId}
              - type: xlrelease.StringVariable
                key: JiraProjectKey
                description: Value should come from a predefined folder variable
                value: ${folder.JiraProjectKey}
              - type: xlrelease.StringVariable
                key: OE
                description: Value should come from a predefined folder variable
                value: ${folder.OE}
              - type: xlrelease.StringVariable
                key: STAGE
                description: Stage to which to deploy. Value should be set through
                  the environment listbox
                value: ${STAGE}
              - type: xlrelease.StringVariable
                key: JiraDeploymentEpic
                description: Value should come from a predefined folder variable
                value: ${folder.JiraDeploymentEpic}
              - type: xlrelease.StringVariable
                key: JiraEpicLinkFieldId
                description: Value should come from a predefined folder variable
                value: ${folder.JiraEpicLinkFieldId}
              - type: xlrelease.StringVariable
                key: CLUSTER
                description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
                  | aws-ase2 = Sydney | ap2 = On-Premise Australia
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: customercode
                description: e.g. bga, bgb, bgc, bmp...
                value: bmp
              - type: xlrelease.StringVariable
                key: jiraAssignedTeam
                description: Team in Jira to which this ticket needs to be assigned
                  to
                value: ITMP-OPS-FE
              - type: xlrelease.StringVariable
                key: JiraImplementationLayer
                description: Implementation Layer (corresponding Jira values)
                value: ${folder.JiraImplementationLayerFieldId}
              - type: xlrelease.StringVariable
                key: JiraUsername
                requiresValue: false
                inherited: true
              - type: xlrelease.PasswordStringVariable
                key: JiraPassword
                requiresValue: false
                inherited: true
              - type: xlrelease.StringVariable
                key: CHSBFFVersion
                requiresValue: false
                value: ${CHSBFFVersion}
              - type: xlrelease.StringVariable
                key: CHSFEVersion
                requiresValue: false
                value: ${IMAGE_VERSION}
              createdReleaseId: ${releaseId}
              riskProfile: Default risk profile
              template: ITMP Global/Deploy/Deploy CHS global
              folder: ITMP Global/Deploy
            - name: CHS Deploy Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId}
          color: '#FFAB00'
        tags:
        - builds
        - deployments
        variables:
        - type: xlrelease.StringVariable
          key: buildNumber
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: releaseId
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: IMAGE_VERSION
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: STAGE
          value: test
        - type: xlrelease.StringVariable
          key: CHSBFFVersion
          requiresValue: false
        - type: xlrelease.StringVariable
          key: CHSFEVersion
          requiresValue: false
        - type: xlrelease.StringVariable
          key: versiondev
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_CHS_promote_from_DEV_to_test__with_bundle__scriptUserPassword"
        riskProfile: Default risk profile
      - template: CISL Daily Deploy
        description: Deploys the latest version of CISL to TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Get Version
          tasks:
          - name: Get Version
            type: webhook.JsonWebhook
            URL: https://cisl-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            taskRecoverOp: SKIP_TASK
            variableMapping:
              pythonScript.result: ${CISLVersion}
          color: '#FFAB00'
        - phase: Deploy TEST
          tasks:
          - name: Deploy CISL
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['CISLVersion'] != ''
            tasks:
            - name: CISL Daily Deployment TEST
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: CISL Daily Deployment TEST
              templateVariables:
              - type: xlrelease.StringVariable
                key: CISLVersion
                requiresValue: false
                value: ${CISLVersion}
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              createdReleaseId: ${CISLDeployTESTReleaseId}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy CISL Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for CISL Deployment TEST
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${CISLDeployTESTReleaseId}
          color: '#FFAB00'
        tags:
        - deployments
        - Daily Deploy
        variables:
        - type: xlrelease.StringVariable
          key: CISLVersion
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: CISLDeployTESTReleaseId
          requiresValue: false
          showOnReleaseStart: false
        allowConcurrentReleasesFromTrigger: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_CISL_Daily_Deploy_scriptUserPassword"
        riskProfile: Default risk profile
      - template: CISL Daily Deploy version check
        description: Deploys the latest version of CISL to TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Version Check
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Version Check
            templateVariables:
            - type: xlrelease.StringVariable
              key: urldev
              value: https://cisl-it-master-platform-${env1}.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            - type: xlrelease.StringVariable
              key: urltest
              value: https://cisl-it-master-platform-${env2}.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            - type: xlrelease.StringVariable
              key: expression
              value: $.items[4].value
            - type: xlrelease.StringVariable
              key: env1
              value: dev
            - type: xlrelease.StringVariable
              key: env2
              value: test
            createdReleaseId: ${versionreleaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare Webhook
            folder: ITMP Product/Deploy/Daily Deploy
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${versionreleaseid}
          - name: Collect Data
            type: xlrelease.ScriptTask
            script: "releaseId = releaseVariables['versionreleaseid']\r\nmyVariables\
              \ = releaseApi.getVariableValues(releaseId)\r\n\r\nfor key in myVariables:\r\
              \n    if 'deploy' in key:\r\n        releaseVariables['deploy'] = myVariables[key]\r\
              \n        print(releaseVariables['deploy'])\r\n    if 'versionenv1'\
              \ in key:\r\n        releaseVariables['versionenv1'] = myVariables[key]\r\
              \n        print(releaseVariables['versionenv1'])"
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy CISL
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['deploy'] == True
            tasks:
            - name: CISL Daily Deployment TEST
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: CISL Daily Deployment TEST
              templateVariables:
              - type: xlrelease.StringVariable
                key: CISLVersion
                requiresValue: false
                value: ${versionenv1}
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              createdReleaseId: ${CISLDeployTESTReleaseId}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy CISL Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for CISL Deployment TEST
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${CISLDeployTESTReleaseId}
          color: '#FFAB00'
        tags:
        - deployments
        - Daily Deploy
        variables:
        - type: xlrelease.StringVariable
          key: CISLDeployTESTReleaseId
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: equal_version
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_CISL_Daily_Deploy_version_check_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Deploy MPA BFF TEST
        scheduledStartDate: 2020-05-11T07:00:00Z
        phases:
        - phase: Deploy ${app}
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            facets:
            - type: udm.DeploymentTaskFacet
              variableMapping:
                applicationId: ${app}
              version: HALLO
              environment: DEV
            tasks:
            - name: Deploy ${app}
              type: jenkins.Build
              jenkinsServer: Service Owner Jenkins global
              jobName: ITMP-Core/job/${app}/job/${app}-deploy-test
              jobParameters: PROJECT=${app}
          color: '#0079BC'
        variables:
        - type: xlrelease.StringVariable
          key: app
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_Deploy_MPA_BFF_TEST_scriptUserPassword"
        riskProfile: Default risk profile
      - template: GDF BFF Daily Deploy
        description: Deploys GDF-BFF to TEST (version found in DEV)
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Get Version
          tasks:
          - name: Get Version
            type: webhook.JsonWebhook
            URL: https://${app}-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: build.version
            taskRecoverOp: SKIP_TASK
            variableMapping:
              pythonScript.result: ${appVersion}
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['appVersion'] != ''
            tasks:
            - name: ${app} Deployment
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${app} Deployment
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              - type: xlrelease.StringVariable
                key: CLUSTER
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: app
                value: ${app}
              - type: xlrelease.StringVariable
                key: appVersion
                value: ${appVersion}
              createdReleaseId: ${ReleaseId2}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy GDF Asset Dynamic
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for ${app} Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseId2}
          color: '#FFAB00'
        tags:
        - deployments
        - daily deploy
        variables:
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: appVersion
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: ReleaseId2
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_GDF_BFF_Daily_Deploy_scriptUserPassword"
        riskProfile: Default risk profile
      - template: GDF BFF Daily Deploy version check
        description: Deploys GDF-BFF to TEST (version found in DEV)
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Version Check
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Version Check
            templateVariables:
            - type: xlrelease.StringVariable
              key: urldev
              value: https://${app}-it-master-platform-${env1}.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info
            - type: xlrelease.StringVariable
              key: urltest
              value: https://${app}-it-master-platform-${env2}.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info
            - type: xlrelease.StringVariable
              key: expression
              value: build.version
            - type: xlrelease.StringVariable
              key: env1
              value: dev
            - type: xlrelease.StringVariable
              key: env2
              value: test
            createdReleaseId: ${versionreleaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare Webhook
            folder: ITMP Product/Deploy/Daily Deploy
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${versionreleaseid}
          - name: Collect Data
            type: xlrelease.ScriptTask
            script: "releaseId = releaseVariables['versionreleaseid']\r\nmyVariables\
              \ = releaseApi.getVariableValues(releaseId)\r\n\r\nfor key in myVariables:\r\
              \n    if 'deploy' in key:\r\n        releaseVariables['deploy'] = myVariables[key]\r\
              \n        print(releaseVariables['deploy'])\r\n    if 'versionenv1'\
              \ in key:\r\n        releaseVariables['versionenv1'] = myVariables[key]\r\
              \n        print(releaseVariables['versionenv1'])"
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['deploy'] == True
            tasks:
            - name: ${app} Deployment
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${app} Deployment
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              - type: xlrelease.StringVariable
                key: CLUSTER
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: app
                value: ${app}
              - type: xlrelease.StringVariable
                key: appVersion
                value: ${versionenv1}
              createdReleaseId: ${ReleaseId2}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy GDF Asset Dynamic
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for ${app} Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseId2}
          color: '#FFAB00'
        tags:
        - deployments
        - daily deploy
        variables:
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: ReleaseId2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: equal_version
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_GDF_BFF_Daily_Deploy_version_check_scriptUserPassword"
        riskProfile: Default risk profile
      - template: GDF FE Daily Bundle & Deploy
        description: Bundles the application and deploys it to TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Bundle
          tasks:
          - name: ${app} Bundle
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-Core/job/${app}-bundle-daily
            variableMapping:
              pythonScript.buildNumber: ${buildNumber}
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: ${app} Deploy
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: ${app} Deploy
            templateVariables:
            - type: xlrelease.StringVariable
              key: environmentSelect
              value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
            - type: xlrelease.StringVariable
              key: CLUSTER
              inherited: true
              value: aws-ec1
            - type: xlrelease.StringVariable
              key: app
              value: ${app}
            - type: xlrelease.StringVariable
              key: appVersion
              value: core-test-daily-bundle
            createdReleaseId: ${releaseId}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Frontend/Deploy GDF Asset Dynamic
            folder: ITMP Product/Release
          - name: ${app} Deploy Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${releaseId}
          color: '#FFAB00'
        tags:
        - builds
        - deployments
        variables:
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: buildNumber
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: releaseId
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_GDF_FE_Daily_Bundle___Deploy_scriptUserPassword"
        riskProfile: Default risk profile
      - template: GDF FE Daily Bundle & Deploy  Version Check
        description: Bundles the application and deploys it to TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Version Check
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Version Check
            templateVariables:
            - type: xlrelease.StringVariable
              key: urldev
              value: https://${app}-it-master-platform-${env1}.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            - type: xlrelease.StringVariable
              key: urltest
              value: https://${app}-it-master-platform-${env2}.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            - type: xlrelease.StringVariable
              key: expression
              value: version
            - type: xlrelease.StringVariable
              key: env1
              value: dev
            - type: xlrelease.StringVariable
              key: env2
              value: test
            createdReleaseId: ${versionreleaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare Webhook
            folder: ITMP Product/Deploy/Daily Deploy
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${versionreleaseid}
          - name: Collect Data
            type: xlrelease.ScriptTask
            script: "releaseId = releaseVariables['versionreleaseid']\r\nmyVariables\
              \ = releaseApi.getVariableValues(releaseId)\r\n\r\nfor key in myVariables:\r\
              \n    if 'deploy' in key:\r\n        releaseVariables['deploy'] = myVariables[key]\r\
              \n        print(releaseVariables['deploy'])\r\n    if 'versiondev' in\
              \ key:\r\n        releaseVariables['versiondev'] = myVariables[key]\r\
              \n        print(releaseVariables['versiondev'])"
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['deploy'] == True
            tasks:
            - name: ${app} Bundle
              type: jenkins.Build
              jenkinsServer: Service Owner Jenkins global
              jobName: ITMP-Core/job/${app}-bundle-daily
              variableMapping:
                pythonScript.buildNumber: ${buildNumber}
            - name: ${app} Deploy
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${app} Deploy
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              - type: xlrelease.StringVariable
                key: CLUSTER
                inherited: true
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: app
                value: ${app}
              - type: xlrelease.StringVariable
                key: appVersion
                value: core-test-daily-bundle
              createdReleaseId: ${releaseId}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy GDF Asset Dynamic
              folder: ITMP Product/Release
            - name: ${app} Deploy Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId}
          color: '#FFAB00'
        tags:
        - builds
        - deployments
        variables:
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: buildNumber
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: releaseId
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_GDF_FE_Daily_Bundle___Deploy__Version_Check_scriptUserPassword"
        riskProfile: Default risk profile
      - template: GDF FE Daily Bundle & Deploy  Version Check  add reading from Jenkins
          task
        description: Bundles the application and deploys it to TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Version Check
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Version Check
            templateVariables:
            - type: xlrelease.StringVariable
              key: urldev
              value: https://${app}-it-master-platform-${env1}.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            - type: xlrelease.StringVariable
              key: urltest
              value: https://${app}-it-master-platform-${env2}.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            - type: xlrelease.StringVariable
              key: expression
              value: version
            - type: xlrelease.StringVariable
              key: env1
              value: dev
            - type: xlrelease.StringVariable
              key: env2
              value: test
            createdReleaseId: ${versionreleaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare Webhook
            folder: ITMP Product/Deploy/Daily Deploy
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${versionreleaseid}
          - name: Collect Data
            type: xlrelease.ScriptTask
            script: "releaseId = releaseVariables['versionreleaseid']\r\nmyVariables\
              \ = releaseApi.getVariableValues(releaseId)\r\n\r\nfor key in myVariables:\r\
              \n    if 'deploy' in key:\r\n        releaseVariables['deploy'] = myVariables[key]\r\
              \n        print(releaseVariables['deploy'])\r\n    if 'versiondev' in\
              \ key:\r\n        releaseVariables['versiondev'] = myVariables[key]\r\
              \n        print(releaseVariables['versiondev'])"
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['deploy'] == True
            tasks:
            - name: ${app} Bundle
              type: jenkins.Build
              jenkinsServer: Service Owner Jenkins global
              jobName: ITMP-GDF/job/${app}-bundle-daily
              variableMapping:
                pythonScript.buildNumber: ${buildNumber}
            - name: Read IMAGE_VERSION
              type: jenkins.ConsoleOutFindString
              server: Service Owner Jenkins global
              jobPath: /job/ITMP-GDF/job/${app}-bundle-daily/
              buildNumber: ${buildNumber}
              leftSearch: IMAGE_VERSION=
              variableMapping:
                pythonScript.searchResult: ${IMAGE_VERSION}
            - name: ${app} Deploy
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${app} Deploy
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              - type: xlrelease.StringVariable
                key: CLUSTER
                inherited: true
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: appVersion
                value: ${IMAGE_VERSION}
              - type: xlrelease.StringVariable
                key: configbranch
                requiresValue: false
                description: branch from which to take the deployment configuration
                inherited: true
                value: master
              - type: xlrelease.StringVariable
                key: app
                value: ${app}
              createdReleaseId: ${releaseId}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy GDF Asset Dynamic
              folder: ITMP Product/Deploy/Frontend
            - name: ${app} Deploy Wait
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${releaseId}
          color: '#FFAB00'
        tags:
        - builds
        - deployments
        variables:
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: buildNumber
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: releaseId
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: IMAGE_VERSION
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_GDF_FE_Daily_Bundle___Deploy__Version_Check__add_reading_from_Jenkins_task_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Midcorp-uwwb Deploy
        description: Deploys the latest version of midcorp-uwwb to TEST
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Get Version
          tasks:
          - name: Get Version
            type: webhook.JsonWebhook
            URL: https://midcorp-uwwb-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            result: Midcorp-uwwbVersion
            jsonPathExpression: $.items[4].value
            taskRecoverOp: SKIP_TASK
          color: '#FFAB00'
        - phase: Deploy TEST
          tasks:
          - name: Deploy Midcorp-uwwb
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['Midcorp-uwwbVersion'] != ''
            tasks:
            - name: Midcorp-uwwb  Daily Deployment
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: Midcorp-uwwb Daily Deployment
              templateVariables:
              - type: xlrelease.StringVariable
                key: INF
                inherited: true
              - type: xlrelease.StringVariable
                key: JiraAssignedTeamFieldId
                inherited: true
              - type: xlrelease.StringVariable
                key: JiraImplementationLayerFieldId
                inherited: true
              - type: xlrelease.StringVariable
                key: JiraProjectKey
                inherited: true
              - type: xlrelease.StringVariable
                key: OE
                inherited: true
              - type: xlrelease.StringVariable
                key: STAGE
                inherited: true
              - type: xlrelease.StringVariable
                key: JiraDeploymentEpic
                inherited: true
              - type: xlrelease.StringVariable
                key: JiraEpicLinkFieldId
                inherited: true
              - type: xlrelease.StringVariable
                key: CLUSTER
                inherited: true
              - type: xlrelease.StringVariable
                key: MOTORRETAILJiraIssueId
                inherited: true
              - type: xlrelease.StringVariable
                key: midcorp-uwwbiraIssueId
                inherited: true
              createdReleaseId: ${Midcorp-uwwbDeployTESTReleaseId}
              riskProfile: Default risk profile
              template: ITMP Global/Deploy/Deploy midcorp-uwwb global
              folder: ITMP Global/Deploy
            - name: Wait for Midcorp-uwwb  Deployment TEST
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${Midcorp-uwwbDeployTESTReleaseId}
          color: '#FFAB00'
        tags:
        - deployments
        - Daily Deploy
        variables:
        - type: xlrelease.StringVariable
          key: Midcorp-uwwbDeployTESTReleaseId
        - type: xlrelease.StringVariable
          key: Midcorp-uwwbVersion
        allowConcurrentReleasesFromTrigger: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Midcorp_uwwb_Deploy_scriptUserPassword"
        riskProfile: Default risk profile
      - template: MPA BFF Daily Deploy
        description: Deploys GDF-BFF to TEST (version found in DEV)
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Get Version
          tasks:
          - name: Get Version
            type: webhook.JsonWebhook
            URL: https://motor-policy-admin-bff-it-master-platform-crptest.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: build.version
            taskRecoverOp: SKIP_TASK
            variableMapping:
              pythonScript.result: ${appVersion}
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['appVersion'] != ''
            tasks:
            - name: ${app} Deployment
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${app} Deployment
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              - type: xlrelease.StringVariable
                key: CLUSTER
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: app
                value: ${app}
              - type: xlrelease.StringVariable
                key: appVersion
                value: ${appVersion}
              createdReleaseId: ${ReleaseId2}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy GDF Asset Dynamic
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for ${app} Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseId2}
          color: '#FFAB00'
        tags:
        - deployments
        - daily deploy
        variables:
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: appVersion
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: ReleaseId2
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_MPA_BFF_Daily_Deploy_scriptUserPassword"
        riskProfile: Default risk profile
      - template: MPA BFF Daily Deploy Version Check
        scheduledStartDate: 2020-11-05T08:00:00Z
        phases:
        - phase: Deploy Test
          tasks:
          - name: Deploy
            type: xlrelease.SequentialGroup
            tasks:
            - name: ${app} Deployment
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: ${app} Deployment
              riskProfile: Default risk profile
              folder: ITMP Product/Deploy/Daily Deploy
          color: '#0079BC'
        variables:
        - type: xlrelease.StringVariable
          key: app
        riskProfile: Default risk profile
      - template: RAP Daily Deploy
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Get Version
          tasks:
          - name: Get Version
            type: allianz.GetDeployedContainerVersionFromOpenshift
            server: EC1 Openshift cluster
            oc_namespace: it-master-platform-dev
            oc_deploymentconfig: rap
            docker_image_name: itmprap
            taskRecoverOp: SKIP_TASK
            variableMapping:
              pythonScript.tag_name: ${RAPVersion}
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy RAP
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['RAPVersion'] != ''
            tasks:
            - name: RAP Daily Deployment TEST
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: RAP Daily Deployment TEST
              templateVariables:
              - type: xlrelease.StringVariable
                key: RAPVersion
                requiresValue: false
                value: ${RAPVersion}
              - type: xlrelease.StringVariable
                key: environmentSelect
                requiresValue: false
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              createdReleaseId: ${RAPDeployTESTReleaseId}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy RAP Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for RAP Deployment TEST
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${RAPDeployTESTReleaseId}
          color: '#0079BC'
        tags:
        - deployments
        - daily deploy
        variables:
        - type: xlrelease.StringVariable
          key: RAPVersion
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: RAPDeployTESTReleaseId
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_RAP_Daily_Deploy_scriptUserPassword"
        riskProfile: Default risk profile
      - template: RAP Daily Deploy Version Check
        scheduledStartDate: 2020-06-15T07:00:00Z
        phases:
        - phase: Version Check
          tasks:
          - name: Version Check
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Version Check
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              value: it-master-platform
            - type: xlrelease.StringVariable
              key: configname
              description: name of the application. e.g. rap, cisl
              value: rap
            - type: xlrelease.StringVariable
              key: imagename
              description: Name of the image. e.g. itmprap, itmprss
              value: itmprap
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: dev
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: test
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              description: e.g. ec1, ew3
              inherited: true
              value: ec1
            - type: xlrelease.BooleanVariable
              key: deploy
              inherited: true
            createdReleaseId: ${versionreleaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare OpenShift
            folder: ITMP Product/Deploy/Daily Deploy
          - name: Wait
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${versionreleaseid}
          - name: Collect Data
            type: xlrelease.ScriptTask
            script: "releaseId = releaseVariables['versionreleaseid']\r\nmyVariables\
              \ = releaseApi.getVariableValues(releaseId)\r\n\r\nfor key in myVariables:\r\
              \n    if 'deploy' in key:\r\n        releaseVariables['deploy'] = myVariables[key]\r\
              \n        print(releaseVariables['deploy'])\r\n    if 'versionenv1'\
              \ in key:\r\n        releaseVariables['versionenv1'] = myVariables[key]\r\
              \n        print(releaseVariables['versionenv1'])"
          color: '#0079BC'
        - phase: Deploy TEST
          tasks:
          - name: Deploy RAP
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['deploy'] == True
            tasks:
            - name: RAP Daily Deployment TEST
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: RAP Daily Deployment TEST
              templateVariables:
              - type: xlrelease.StringVariable
                key: RAPVersion
                value: ${versionenv1}
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
              createdReleaseId: ${RAPDeployTESTReleaseId}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy RAP Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for RAP Deployment TEST
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${RAPDeployTESTReleaseId}
          color: '#0079BC'
        tags:
        - deployments
        - daily deploy
        variables:
        - type: xlrelease.StringVariable
          key: RAPDeployTESTReleaseId
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiondev1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_RAP_Daily_Deploy_Version_Check_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Version Compare OpenShift
        scheduledStartDate: 2020-06-22T07:00:00Z
        phases:
        - phase: Get Versions EC1
          tasks:
          - name: EC1
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['cluster'] == 'ec1'
            tasks:
            - name: Get Session
              type: itmpkeepass.GetOpenshiftToken
              server: EC1 Openshift cluster
              failureHandler: "if (releaseVariables['attempt'] < 3):\r\n  releaseVariables['attempt']\
                \ = releaseVariables['attempt'] + 1\r\n  time.sleep(60)\r\n  taskApi.retryTask(getCurrentTask().getId(),\
                \ \"Retrying task from failure handler.\")\r\nelse:\r\n  taskApi.skipTask(getCurrentTask().getId(),\
                \ \"Skipped task from failure handler.\")"
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.openshiftToken: ${session}
            - name: Get ${configname} ${env1} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env1'] != ''
              failureHandler: |-
                releaseVariables['versionenv1'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv1}
            - name: Get ${configname} ${env2} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env2'] != ''
              failureHandler: |-
                releaseVariables['versionenv2'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv2}
            - name: Wait
              type: xlrelease.ScriptTask
              script: |-
                import time
                time.sleep(5)
          color: '#0079BC'
        - phase: Get versions EW3
          tasks:
          - name: EW3
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['cluster'] == 'ew3'
            tasks:
            - name: Get Session
              type: itmpkeepass.GetOpenshiftToken
              server: EW3 Openshift Cluster
              failureHandler: "if (releaseVariables['attempt'] < 3):\r\n  releaseVariables['attempt']\
                \ = releaseVariables['attempt'] + 1\r\n  time.sleep(60)\r\n  taskApi.retryTask(getCurrentTask().getId(),\
                \ \"Retrying task from failure handler.\")\r\nelse:\r\n  taskApi.skipTask(getCurrentTask().getId(),\
                \ \"Skipped task from failure handler.\")"
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.openshiftToken: ${session}
            - name: Get ${configname} ${env1} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env1'] != ''
              failureHandler: |-
                releaseVariables['versionenv1'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv1}
            - name: Get ${configname} ${env2} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env2'] != ''
              failureHandler: |-
                releaseVariables['versionenv2'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv2}
            - name: Wait
              type: xlrelease.ScriptTask
              script: |-
                import time
                time.sleep(5)
          color: '#0079BC'
        - phase: Create HTML Row
          tasks:
          - name: Create Row Variable
            type: xlrelease.ScriptTask
            script: "if releaseVariables['versionenv1'] == releaseVariables['versionenv2']:\n\
              \    releaseVariables['deploy'] = False\n    \nif releaseVariables['versionenv1']\
              \ != releaseVariables['versionenv2'] and releaseVariables['versionenv1']\
              \ !='Error':\n    releaseVariables['deploy'] = True\n\nprint('${versionenv1}')\n\
              print('${versionenv2}')\nprint('${deploy}')"
        variables:
        - type: xlrelease.StringVariable
          key: projectName
        - type: xlrelease.StringVariable
          key: configname
          description: name of the application. e.g. rap, cisl
        - type: xlrelease.StringVariable
          key: imagename
          description: Name of the image. e.g. itmprap, itmprss
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
          requiresValue: false
        - type: xlrelease.StringVariable
          key: env2
          requiresValue: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: session
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: cluster
          requiresValue: false
          description: e.g. ec1, ew3
          value: ec1
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Version_Compare_OpenShift_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Version Compare Webhook
        scheduledStartDate: 2020-10-07T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Version check ${env1}
            type: webhook.JsonWebhook
            URL: ${urldev}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${expression}
            failureHandler: |-
              releaseVariables['versionenv1'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionenv1}
          - name: Version check ${env2}
            type: webhook.JsonWebhook
            URL: ${urltest}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${expression}
            failureHandler: |-
              releaseVariables['versionenv2'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionenv2}
          - name: Wait
            type: xlrelease.ScriptTask
            script: "import time\r\ntime.sleep(5)"
          - name: Compare versions
            type: xlrelease.ScriptTask
            script: "if releaseVariables['versionenv1'] == releaseVariables['versionenv2']:\n\
              \    releaseVariables['deploy'] = False\n    \nif releaseVariables['versionenv1']\
              \ != releaseVariables['versionenv2'] and releaseVariables['versionenv1']\
              \ !='Error':\n    releaseVariables['deploy'] = True\n\nprint('${versionenv1}')\n\
              print('${versionenv2}')\nprint('${deploy}')"
        variables:
        - type: xlrelease.StringVariable
          key: versiondev
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiontest
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: urldev
        - type: xlrelease.StringVariable
          key: urltest
        - type: xlrelease.StringVariable
          key: expression
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_Version_Compare_Webhook_scriptUserPassword"
        riskProfile: Default risk profile
      - name: SME-FE Daily Deploy
        type: time.Schedule
        releaseTitle: SME-FE Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: sme-fe
        - type: xlrelease.StringVariable
          key: buildNumber
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: releaseId
          requiresValue: false
          showOnReleaseStart: false
        template: GDF FE Daily Bundle & Deploy
        tags:
        - Daily Deploy
        periodicity: 0 55 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-11-15T22:55:00.105000
      - name: SME-BFF Daily Deploy
        type: time.Schedule
        releaseTitle: SME-BFF Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: sme-backend-global
        - type: xlrelease.StringVariable
          key: appVersion
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: ReleaseId2
          requiresValue: false
          showOnReleaseStart: false
        template: GDF BFF Daily Deploy
        tags:
        - Daily Deploy
        periodicity: 0 0 23 * * SUN-FRI
        enabled: false
        triggerTime: 2020-11-04T23:00:00.250000
      - name: MPA-BFF Daily Deploy
        type: time.Schedule
        releaseTitle: MPA-BFF Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: motor-policy-admin-bff
        template: Deploy MPA BFF TEST
        tags:
        - Daily Deploy
        periodicity: 0 15 23 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-03T23:15:00.193000
      - name: CISL Daily Deploy version check
        type: time.Schedule
        releaseTitle: CISL Daily Deploy version check   - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: CISL Daily Deploy version check
        tags:
        - Daily Deploy
        periodicity: 0 0 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-08T10:27:26.751000
      - name: CHS-BFF Daily Deploy version check
        type: time.Schedule
        releaseTitle: GDF BFF Daily Deploy version check  - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: claims-handler-bff
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF BFF Daily Deploy version check
        tags:
        - Daily Deploy
        periodicity: 0 10 23 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-08T08:54:55.759000
      - name: FNOL-BFF Daily Deploy version check
        type: time.Schedule
        releaseTitle: FNOL-BFF Daily Deploy -${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: fnol-bff
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF BFF Daily Deploy version check
        tags:
        - Daily Deploy
        periodicity: 0 50 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-08T10:27:29.442000
      - name: MO-BFF Daily Deploy version check
        type: time.Schedule
        releaseTitle: MO-BFF Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: mo-bff
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF BFF Daily Deploy version check
        tags:
        - Daily Deploy
        periodicity: 0 35 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-08T10:43:24.762000
      - name: SME-BFF Daily Deploy version check
        type: time.Schedule
        releaseTitle: SME-BFF Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: sme-backend-global
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF BFF Daily Deploy version check
        tags:
        - Daily Deploy
        periodicity: 0 0 23 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-04T05:35:40.014000
      - name: CHS-FE Daily Deploy Version check
        type: time.Schedule
        releaseTitle: CHS-FE Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: claims-handler-fe
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF FE Daily Bundle & Deploy  Version Check
        tags:
        - Daily Deploy
        periodicity: 0 05 23 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-08T08:54:58.031000
      - name: FNOL-FE Daily Deploy Version Check
        type: time.Schedule
        releaseTitle: FNOL-FE Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: fnol-fe
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF FE Daily Bundle & Deploy  Version Check
        tags:
        - Daily Deploy
        periodicity: 0 45 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-08T10:43:19.747000
      - name: MO-FE Daily Deploy Version Check
        type: time.Schedule
        releaseTitle: MO-FE Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: mo-fe
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF FE Daily Bundle & Deploy  Version Check
        tags:
        - Daily Deploy
        periodicity: 0 35 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-08T10:43:33.397000
      - name: SME-FE Daily Deploy Version Check
        type: time.Schedule
        releaseTitle: SME-FE Daily Deploy - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: sme-fe
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        template: GDF FE Daily Bundle & Deploy  Version Check
        tags:
        - Daily Deploy
        periodicity: 0 55 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-04T05:35:44.057000
      - name: RAP Daily Deploy Version Check
        type: time.Schedule
        releaseTitle: RAP Daily Deploy - ${triggerTime}
        template: RAP Daily Deploy Version Check
        tags:
        - Daily Deploy
        periodicity: 0 30 22 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-10T09:45:57.955000
      - name: MPA-BFF Daily Deploy Version Check
        type: time.Schedule
        releaseTitle: MPA-BFF Daily Deploy Version Check - ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: app
          value: motor-policy-admin-bff
        - type: xlrelease.StringVariable
          key: ReleaseId2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: equal_version
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionreleaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
          value: dev
        - type: xlrelease.StringVariable
          key: env2
          value: test
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        template: GDF BFF Daily Deploy version check
        tags:
        - Daily Deploy
        periodicity: 0 15 23 * * SUN-FRI
        enabled: false
        triggerTime: 2020-12-07T07:58:06.117000
    - directory: Promote
      children:
      - template: CISL Promote from dev to test
        scheduledStartDate: 2020-10-07T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Version check dev
            type: webhook.JsonWebhook
            URL: https://cisl-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            failureHandler: |-
              releaseVariables['versiondev'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versiondev}
          - name: Deploy CISL ${versiondev} to TEST
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Deploy CISL ${versiondev} to TEST
            templateVariables:
            - type: xlrelease.StringVariable
              key: CISLVersion
              value: ${versiondev}
            - type: xlrelease.StringVariable
              key: environmentSelect
              value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
            - type: xlrelease.BooleanVariable
              key: test
              requiresValue: false
              description: Check to trigger corresponding tests
              inherited: true
              value: true
            - type: xlrelease.StringVariable
              key: CONFIG_TYPE
              description: select --> properties for 20.5 ; reg for 20.0
              inherited: true
              value: properties
            createdReleaseId: ${Releaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Frontend/Deploy CISL Product
            folder: ITMP Product/Deploy/Frontend
          - name: Wait for Deployment
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${Releaseid}
        variables:
        - type: xlrelease.StringVariable
          key: Releaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiondev
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_CISL_Promote_from_dev_to_test_scriptUserPassword"
        riskProfile: Default risk profile
      - template: CISL Promote from test to demo
        scheduledStartDate: 2020-10-07T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Version check TEST
            type: webhook.JsonWebhook
            URL: https://cisl-it-master-platform-test.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: $.items[4].value
            failureHandler: |-
              releaseVariables['versiontest'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versiontest}
          - name: Deploy CISL ${versiontest} to DEMO
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Deploy CISL ${versiontest} to DEMO
            templateVariables:
            - type: xlrelease.StringVariable
              key: CISLVersion
              value: ${versiontest}
            - type: xlrelease.StringVariable
              key: environmentSelect
              value: Configuration/environmentManagement/Environment1c5267e5b2d143d2b058bb4d2f524b2c
            - type: xlrelease.BooleanVariable
              key: test
              requiresValue: false
              description: Check to trigger corresponding tests
              inherited: true
              value: true
            - type: xlrelease.StringVariable
              key: CONFIG_TYPE
              description: select --> properties for 20.5 ; reg for 20.0
              inherited: true
              value: properties
            createdReleaseId: ${Releaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Frontend/Deploy CISL Product
            folder: ITMP Product/Deploy/Frontend
          - name: Wait for Deployment
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${Releaseid}
        variables:
        - type: xlrelease.StringVariable
          key: Releaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiontest
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_CISL_Promote_from_test_to_demo_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Create CHS FE bundle
        scheduledStartDate: 2021-09-15T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Get CHS FE version From DEV
            type: webhook.JsonWebhook
            URL: https://claims-handler-fe-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: version
            variableMapping:
              pythonScript.result: ${versiondev}
          - name: Create CHS FE bundle
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: /ITMP-GDF/job/claims-handler-fe-bundle-daily/
            jobParameters: OC_BUILD_BUNDLE_BASE_TAG=${versiondev}
            variableMapping:
              pythonScript.buildNumber: ${build}
          - name: Get Bundle version
            type: jenkins.ConsoleOutFindString
            server: Service Owner Jenkins global
            jobPath: job/ITMP-GDF/job/claims-handler-fe-bundle-daily/
            buildNumber: ${build}
            leftSearch: IMAGE_VERSION=
            variableMapping:
              pythonScript.searchResult: ${versiondev}
        variables:
        - type: xlrelease.StringVariable
          key: versiondev
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: build
          requiresValue: false
          showOnReleaseStart: false
        riskProfile: Default risk profile
      - template: GDF Components Promote from dev to test
        scheduledStartDate: 2020-10-07T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Version check dev
            type: webhook.JsonWebhook
            URL: https://${app}-it-master-platform-dev.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: version
            failureHandler: |-
              releaseVariables['versiondev'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versiondev}
          - name: Create a bundle
            type: xlrelease.SequentialGroup
            tasks:
            - name: Build the bundle
              type: jenkins.Build
              jenkinsServer: Service Owner Jenkins global
              jobName: ITMP-GDF/job/${app}-bundle-daily
              jobParameters: |-
                OC_BUILD_BUNDLE_BASE_TAG=${versiondev}
                OC_BUILD_CONFIG_VERSION=latest
              variableMapping:
                pythonScript.buildNumber: ${buildNumber}
            - name: Get the bundle version
              type: jenkins.ConsoleOutFindString
              server: Service Owner Jenkins global
              jobPath: /job/ITMP-GDF/job/${app}-bundle-daily/
              buildNumber: ${buildNumber}
              leftSearch: IMAGE_VERSION=
              variableMapping:
                pythonScript.searchResult: ${versiondev}
          - name: Deploy  ${versiondev} to TEST
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Deploy  ${versiondev} to TEST
            templateVariables:
            - type: xlrelease.StringVariable
              key: environmentSelect
              value: Configuration/environmentManagement/Environmenta4c80dec9c0b42a79cbf395a53988265
            - type: xlrelease.StringVariable
              key: CLUSTER
              inherited: true
              value: aws-ec1
            - type: xlrelease.StringVariable
              key: app
              value: ${app}
            - type: xlrelease.StringVariable
              key: appVersion
              value: ${versiondev}
            - type: xlrelease.StringVariable
              key: configbranch
              requiresValue: false
              description: branch from which to take the deployment configuration
              inherited: true
              value: master
            createdReleaseId: ${Releaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Deploy/Deploy GDF Asset Dynamic
            folder: ITMP Product/Deploy/Frontend
          - name: Wait for Deployment
            type: xlrelease.GateTask
            dependencies:
            - type: xlrelease.Dependency
              targetId: ${Releaseid}
        variables:
        - type: xlrelease.StringVariable
          key: Releaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiondev
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: app
        - type: xlrelease.StringVariable
          key: buildNumber
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: IMAGE_VERSION
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_GDF_Components_Promote_from_dev_to_test_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Promote CHS
        scheduledStartDate: 2021-09-15T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Get CHS FE version From env
            type: webhook.JsonWebhook
            URL: https://claims-handler-fe-it-master-platform-${env}.apps.crp.ec1.aws.aztec.cloud.allianz/package.json
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: version
            variableMapping:
              pythonScript.result: ${versionenv}
          - name: Create Bundle
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['env'] =='dev'
            tasks:
            - name: Create CHS FE bundle
              type: jenkins.Build
              jenkinsServer: Service Owner Jenkins global
              jobName: /ITMP-GDF/job/claims-handler-fe-bundle-daily/
              jobParameters: OC_BUILD_BUNDLE_BASE_TAG=${versionenv}
              variableMapping:
                pythonScript.buildNumber: ${build}
            - name: Get Bundle version
              type: jenkins.ConsoleOutFindString
              server: Service Owner Jenkins global
              jobPath: job/ITMP-GDF/job/claims-handler-fe-bundle-daily/
              buildNumber: ${build}
              leftSearch: IMAGE_VERSION=
              variableMapping:
                pythonScript.searchResult: ${versionenv}
          - name: Get CHS BFF version From ${env}
            type: webhook.JsonWebhook
            URL: https://claims-handler-bff-it-master-platform-${env}.apps.crp.ec1.aws.aztec.cloud.allianz/actuator/info
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: build.version
            variableMapping:
              pythonScript.result: ${versionbff}
          - name: Deploy CHS to ${env}
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Promote from ${env} to ${STAGE}
            templateVariables:
            - type: xlrelease.StringVariable
              key: JiraAssignedTeamFieldId
              description: Value should come from a predefined folder variable
              value: ${folder.JiraAssignedTeamFieldId}
            - type: xlrelease.StringVariable
              key: JiraImplementationLayerFieldId
              description: Value should come from a predefined folder variable
              value: ${folder.JiraImplementationLayerFieldId}
            - type: xlrelease.StringVariable
              key: JiraProjectKey
              description: Value should come from a predefined folder variable
              value: ${folder.JiraProjectKey}
            - type: xlrelease.StringVariable
              key: OE
              description: Value should come from a predefined folder variable
              value: ${folder.OE}
            - type: xlrelease.StringVariable
              key: STAGE
              description: Stage to which to deploy. Value should be set through the
                environment listbox
              value: ${STAGE}
            - type: xlrelease.StringVariable
              key: JiraDeploymentEpic
              description: Value should come from a predefined folder variable
              value: ${folder.JiraDeploymentEpic}
            - type: xlrelease.StringVariable
              key: JiraEpicLinkFieldId
              description: Value should come from a predefined folder variable
              value: ${folder.JiraEpicLinkFieldId}
            - type: xlrelease.StringVariable
              key: CLUSTER
              description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
                | aws-ase2 = Sydney | ap2 = On-Premise Australia
              value: aws-ec1
            - type: xlrelease.StringVariable
              key: customercode
              description: e.g. bga, bgb, bgc, bmp...
              value: bmp
            - type: xlrelease.StringVariable
              key: jiraAssignedTeam
              description: Team in Jira to which this ticket needs to be assigned
                to
              value: ITMP-OPS-FE
            - type: xlrelease.StringVariable
              key: JiraImplementationLayer
              description: Implementation Layer (corresponding Jira values)
              value: ${folder.JiraImplementationLayerFieldId}
            - type: xlrelease.StringVariable
              key: JiraUsername
              requiresValue: false
              inherited: true
            - type: xlrelease.PasswordStringVariable
              key: JiraPassword
              requiresValue: false
              inherited: true
            - type: xlrelease.StringVariable
              key: CHSBFFVersion
              description: You will need to provide both BFF anf FE version - this
                is a jenkins pipeline restriction
              value: ${versionbff}
            - type: xlrelease.StringVariable
              key: CHSFEVersion
              description: You will need to provide both BFF anf FE version - this
                is a jenkins pipeline restriction
              value: ${versionenv}
            createdReleaseId: ${releaseid}
            riskProfile: Default risk profile
            template: ITMP Global/Deploy/Deploy CHS global
            folder: ITMP Product/Deploy/Promote
        variables:
        - type: xlrelease.StringVariable
          key: versiondev
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: build
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env
          description: Get the version from environment
          valueProvider:
            type: xlrelease.ListOfStringValueProviderConfiguration
            values:
            - dev
            - test
        - type: xlrelease.StringVariable
          key: STAGE
        - type: xlrelease.StringVariable
          key: releaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionbff
          requiresValue: false
          showOnReleaseStart: false
        riskProfile: Default risk profile
      - template: Promote ITMP from Demo To Perf
        description: This template is gathering application versions from Demo and
          Deploys them to PERF environment
        scheduledStartDate: 2020-10-07T07:00:00Z
        phases:
        - phase: ABS
          tasks:
          - name: CISL
            type: xlrelease.SequentialGroup
            tasks:
            - name: Version check demo
              type: webhook.JsonWebhook
              URL: https://cisl-it-master-platform-demo.apps.crp.ec1.aws.aztec.cloud.allianz/itmp.allianz.abs.cisl.adapter/services/info
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $.items[4].value
              failureHandler: |-
                releaseVariables['versiondev'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${CISLDEMOVER}
            - name: Deploy CISL ${CISLDEMOVER} to PERF
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: Deploy CISL ${CISLDEMOVER} to PERF
              templateVariables:
              - type: xlrelease.StringVariable
                key: CISLVersion
                value: ${CISLDEMOVER}
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environment0cf3b3b42c0f467ba870eea5614f613e
              - type: xlrelease.BooleanVariable
                key: test
                requiresValue: false
                description: Check to trigger corresponding tests
              - type: xlrelease.StringVariable
                key: CONFIG_TYPE
                description: select --> properties for 20.5 ; reg for 20.0
                inherited: true
                value: properties
              createdReleaseId: ${ReleaseidCISL}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy CISL Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseidCISL}
          - name: RAP
            type: xlrelease.SequentialGroup
            tasks:
            - name: Get RAP Version from DEMO
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_namespace: it-master-platform-demo
              oc_deploymentconfig: rap
              docker_image_name: itmprap
              variableMapping:
                pythonScript.tag_name: ${RAPDEMOVER}
            - name: Deploy RAP ${RAPDEMOVER}  to PERF
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: Deploy RAP ${RAPDEMOVER} to PERF
              templateVariables:
              - type: xlrelease.StringVariable
                key: RAPVersion
                value: ${RAPDEMOVER}
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environment0cf3b3b42c0f467ba870eea5614f613e
              - type: xlrelease.StringVariable
                key: CONFIG_TYPE
                description: select --> properties for 20.5 ; reg for 20.0
                value: properties
              createdReleaseId: ${ReleaseidRAP}
              riskProfile: Default risk profile
              template: ITMP Product/Deploy/Frontend/Deploy RAP Product
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseidRAP}
          color: '#0079BC'
        - phase: GDF
          tasks:
          - name: FNOL-FE
            type: xlrelease.SequentialGroup
            tasks:
            - name: Version check demo
              type: webhook.JsonWebhook
              URL: https://fnol-motor-retail-fe-it-master-platform-demo.apps.crp.ec1.aws.aztec.cloud.allianz/version.json
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $.items[4].value
              failureHandler: |-
                releaseVariables['versiondev'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${FNOL-MR-FEDEMOVER}
            - name: Deploy FNOL Motor FE ${FNOL-MR-FEDEMOVER} to PERF
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: Deploy FNOL Motor FE ${FNOL-MR-FEDEMOVER} to PERF
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environment0cf3b3b42c0f467ba870eea5614f613e
              - type: xlrelease.StringVariable
                key: CLUSTER
                inherited: true
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: app
                value: fnol-motor-retail-fe
              - type: xlrelease.StringVariable
                key: appVersion
                value: ${FNOL-MR-FEDEMOVER}
              - type: xlrelease.StringVariable
                key: configbranch
                requiresValue: false
                description: branch from which to take the deployment configuration
                inherited: true
                value: master
              createdReleaseId: ${Releaseid}
              riskProfile: Default risk profile
              template: ITMP Global/Deploy/Deploy GDF Asset Dynamic
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseidFNOL-MR-FEDEMOVER}
          - name: FNOL-FE (copy)
            type: xlrelease.SequentialGroup
            tasks:
            - name: Version check demo
              type: webhook.JsonWebhook
              URL: https://fnol-motor-retail-fe-it-master-platform-demo.apps.crp.ec1.aws.aztec.cloud.allianz/version.json
              proxyHost: proxy.ec1.aws.aztec.cloud.allianz
              proxyPort: "8888"
              jsonPathExpression: $.items[4].value
              failureHandler: |-
                releaseVariables['versiondev'] = 'Error'
                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.result: ${FNOL-MR-FEDEMOVER}
            - name: Deploy FNOL Motor FE ${FNOL-MR-FEDEMOVER} to PERF
              type: xlrelease.CreateReleaseTask
              newReleaseTitle: Deploy FNOL Motor FE ${FNOL-MR-FEDEMOVER} to PERF
              templateVariables:
              - type: xlrelease.StringVariable
                key: environmentSelect
                value: Configuration/environmentManagement/Environment0cf3b3b42c0f467ba870eea5614f613e
              - type: xlrelease.StringVariable
                key: CLUSTER
                inherited: true
                value: aws-ec1
              - type: xlrelease.StringVariable
                key: app
                value: fnol-motor-retail-fe
              - type: xlrelease.StringVariable
                key: appVersion
                value: ${FNOL-MR-FEDEMOVER}
              - type: xlrelease.StringVariable
                key: configbranch
                requiresValue: false
                description: branch from which to take the deployment configuration
                inherited: true
                value: master
              createdReleaseId: ${Releaseid}
              riskProfile: Default risk profile
              template: ITMP Global/Deploy/Deploy GDF Asset Dynamic
              folder: ITMP Product/Deploy/Frontend
            - name: Wait for Deployment
              type: xlrelease.GateTask
              dependencies:
              - type: xlrelease.Dependency
                targetId: ${ReleaseidFNOL-MR-FEDEMOVER}
          color: '#0079BC'
        variables:
        - type: xlrelease.StringVariable
          key: Releaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiondev
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: CISLDEMOVER
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: ReleaseidCISL
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: RAPDEMOVER
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: ReleaseidRAP
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: FNOL-MR-FEDEMOVER
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: ReleaseidFNOL-MR-FEDEMOVER
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_Promote_ITMP_from_Demo_To_Perf_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Promote RAP Product
        scheduledStartDate: 2021-07-05T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: compare version in 2 environments
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: RAP ${env1} and ${env2} compare
            templateVariables:
            - type: xlrelease.StringVariable
              key: projectName
              value: itmp
            - type: xlrelease.StringVariable
              key: configname
              description: name of the application. e.g. rap, cisl
              value: rap
            - type: xlrelease.StringVariable
              key: imagename
              description: Name of the image. e.g. itmprap, itmprss
              value: itmprap
            - type: xlrelease.StringVariable
              key: env1
              requiresValue: false
              value: ${env1}
            - type: xlrelease.StringVariable
              key: env2
              requiresValue: false
              value: ${env2}
            - type: xlrelease.StringVariable
              key: cluster
              requiresValue: false
              description: e.g. ec1, ew3
              inherited: true
              value: ec1
            createdReleaseId: ${Releaseid}
            riskProfile: Default risk profile
            template: ITMP Product/Deploy/Daily Deploy/Version Compare OpenShift
            folder: ITMP Product/Deploy/Promote
        variables:
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: Releaseid
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_Promote_RAP_Product_scriptUserPassword"
        riskProfile: Default risk profile
      - template: Version Compare OpenShift
        scheduledStartDate: 2020-06-22T07:00:00Z
        phases:
        - phase: Get Versions EC1
          tasks:
          - name: EC1
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['cluster'] == 'ec1'
            tasks:
            - name: Get Session
              type: itmpkeepass.GetOpenshiftToken
              server: EC1 Openshift cluster
              failureHandler: "if (releaseVariables['attempt'] < 3):\r\n  releaseVariables['attempt']\
                \ = releaseVariables['attempt'] + 1\r\n  time.sleep(60)\r\n  taskApi.retryTask(getCurrentTask().getId(),\
                \ \"Retrying task from failure handler.\")\r\nelse:\r\n  taskApi.skipTask(getCurrentTask().getId(),\
                \ \"Skipped task from failure handler.\")"
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.openshiftToken: ${session}
            - name: Get ${configname} ${env1} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env1'] != ''
              failureHandler: |-
                releaseVariables['versionenv1'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv1}
            - name: Get ${configname} ${env2} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EC1 Openshift cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env2'] != ''
              failureHandler: |-
                releaseVariables['versionenv2'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv2}
            - name: Wait
              type: xlrelease.ScriptTask
              script: |-
                import time
                time.sleep(5)
          color: '#0079BC'
        - phase: Get versions EW3
          tasks:
          - name: EW3
            type: xlrelease.SequentialGroup
            precondition: releaseVariables['cluster'] == 'ew3'
            tasks:
            - name: Get Session
              type: itmpkeepass.GetOpenshiftToken
              server: EW3 Openshift Cluster
              failureHandler: "if (releaseVariables['attempt'] < 3):\r\n  releaseVariables['attempt']\
                \ = releaseVariables['attempt'] + 1\r\n  time.sleep(60)\r\n  taskApi.retryTask(getCurrentTask().getId(),\
                \ \"Retrying task from failure handler.\")\r\nelse:\r\n  taskApi.skipTask(getCurrentTask().getId(),\
                \ \"Skipped task from failure handler.\")"
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.openshiftToken: ${session}
            - name: Get ${configname} ${env1} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env1}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env1'] != ''
              failureHandler: |-
                releaseVariables['versionenv1'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv1}
            - name: Get ${configname} ${env2} version
              type: allianz.GetDeployedContainerVersionFromOpenshift
              server: EW3 Openshift Cluster
              oc_session_token: ${session}
              oc_namespace: ${projectName}-${env2}
              oc_deploymentconfig: ${configname}
              docker_image_name: ${imagename}
              precondition: releaseVariables['env2'] != ''
              failureHandler: |-
                releaseVariables['versionenv2'] = 'Error'


                task = getCurrentTask()
                taskApi.skipTask(task.id, "App is not reachable")
              taskFailureHandlerEnabled: true
              taskRecoverOp: RUN_SCRIPT
              variableMapping:
                pythonScript.tag_name: ${versionenv2}
            - name: Wait
              type: xlrelease.ScriptTask
              script: |-
                import time
                time.sleep(5)
          color: '#0079BC'
        - phase: Create HTML Row
          tasks:
          - name: Create Row Variable
            type: xlrelease.ScriptTask
            script: "if releaseVariables['versionenv1'] == releaseVariables['versionenv2']:\n\
              \    releaseVariables['deploy'] = False\n    \nif releaseVariables['versionenv1']\
              \ != releaseVariables['versionenv2'] and releaseVariables['versionenv1']\
              \ !='Error':\n    releaseVariables['deploy'] = True\n\nprint('${versionenv1}')\n\
              print('${versionenv2}')\nprint('${deploy}')"
        variables:
        - type: xlrelease.StringVariable
          key: projectName
        - type: xlrelease.StringVariable
          key: configname
          description: name of the application. e.g. rap, cisl
        - type: xlrelease.StringVariable
          key: imagename
          description: Name of the image. e.g. itmprap, itmprss
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
          requiresValue: false
        - type: xlrelease.StringVariable
          key: env2
          requiresValue: false
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: session
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: cluster
          requiresValue: false
          description: e.g. ec1, ew3
          value: ec1
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: gjhfk9f
        scriptUserPassword: !value "xlrelease_Release_Version_Compare_OpenShift_scriptUserPassword_0"
        riskProfile: Default risk profile
      - template: Version Compare Webhook
        scheduledStartDate: 2020-10-07T07:00:00Z
        phases:
        - phase: New Phase
          tasks:
          - name: Version check ${env1}
            type: webhook.JsonWebhook
            URL: ${urldev}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${expression}
            failureHandler: |-
              releaseVariables['versionenv1'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionenv1}
          - name: Version check ${env2}
            type: webhook.JsonWebhook
            URL: ${urltest}
            proxyHost: proxy.ec1.aws.aztec.cloud.allianz
            proxyPort: "8888"
            jsonPathExpression: ${expression}
            failureHandler: |-
              releaseVariables['versionenv2'] = 'Error'
              task = getCurrentTask()
              taskApi.skipTask(task.id, "App is not reachable")
            taskFailureHandlerEnabled: true
            taskRecoverOp: RUN_SCRIPT
            variableMapping:
              pythonScript.result: ${versionenv2}
          - name: Wait
            type: xlrelease.ScriptTask
            script: "import time\r\ntime.sleep(5)"
          - name: Compare versions
            type: xlrelease.ScriptTask
            script: "if releaseVariables['versionenv1'] == releaseVariables['versionenv2']:\n\
              \    releaseVariables['deploy'] = False\n    \nif releaseVariables['versionenv1']\
              \ != releaseVariables['versionenv2'] and releaseVariables['versionenv1']\
              \ !='Error':\n    releaseVariables['deploy'] = True\n\nprint('${versionenv1}')\n\
              print('${versionenv2}')\nprint('${deploy}')"
        variables:
        - type: xlrelease.StringVariable
          key: versiondev
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiontest
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: urldev
        - type: xlrelease.StringVariable
          key: urltest
        - type: xlrelease.StringVariable
          key: expression
        - type: xlrelease.BooleanVariable
          key: deploy
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: env1
        - type: xlrelease.StringVariable
          key: env2
        - type: xlrelease.StringVariable
          key: versionenv2
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versionenv1
          requiresValue: false
          showOnReleaseStart: false
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_Version_Compare_Webhook_scriptUserPassword_0"
        riskProfile: Default risk profile
      - name: Promote CISL from DEV to TEST
        type: time.Schedule
        releaseTitle: Promote CISL from DEV to TEST ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: Releaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiondev
          requiresValue: false
          showOnReleaseStart: false
        template: CISL Promote from dev to test
        periodicity: 0 0   * * * *
        enabled: false
        triggerTime: 2021-07-06T11:00:00.189000
      - name: Promote CISL from TEST to DEMO
        type: time.Schedule
        releaseTitle: Promote CISL from TEST to DEMO  ${triggerTime}
        variables:
        - type: xlrelease.StringVariable
          key: Releaseid
          requiresValue: false
          showOnReleaseStart: false
        - type: xlrelease.StringVariable
          key: versiontest
          requiresValue: false
          showOnReleaseStart: false
        template: CISL Promote from test to demo
        periodicity: 0 0 1 * * *
        enabled: false
    - directory: Frontend
      children:
      - directory: In Progress
        children:
        - template: Deploy
          description: deploying all components at with one template, calls component
            flow if version is set
          scheduledStartDate: 2020-06-25T07:00:00Z
          dueDate: 2021-10-12T12:35:38.863Z
          phases:
          - phase: Deploy
            tasks:
            - name: Set target environment from Environment Selection
              type: xlrelease.ScriptTask
              script: releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            - name: Deploy Frontend
              type: xlrelease.ParallelGroup
              tasks:
              - name: Deploy RAP
                type: xlrelease.SequentialGroup
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: RAPVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: rapdeplid
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: CISLVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: cisldepid
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: MOBFFVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: mobffdepid
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: MOFEVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: mofedepid
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: fnolfedepid
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: FNOLFEVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: FNOLBFFVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: fnolbffdepid
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: environmentSelect
            valueProvider:
              type: xlrelease.EnvironmentValueProvider
          riskProfile: Default risk profile
        - template: Deploy AIMS
          scheduledStartDate: 2020-09-10T07:00:00Z
          dueDate: 2021-10-12T13:36:11.692Z
          phases:
          - phase: Deploy AIMS
            tasks:
            - name: Map environment to STAGE
              type: xlrelease.ScriptTask
              script: |-
                releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
                releaseVariables['STAGE'] = releaseVariables['STAGE'].split(' ')[1].lower()
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: AIMSVersion
          - type: xlrelease.StringVariable
            key: STAGE
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: AIMSDeplId
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: environmentSelect
            valueProvider:
              type: xlrelease.EnvironmentValueProvider
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_AIMS_scriptUserPassword"
          riskProfile: Default risk profile
        - template: Deploy AIMS Process
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:12:24.997Z
          phases:
          - phase: Deploy AIMS
            tasks:
            - name: Set target environment from environment selection
              type: xlrelease.ScriptTask
              script: releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            - name: Provide AIMS Version
              type: xlrelease.UserInputTask
              description: Please enter the required information below.
              precondition: releaseVariables['AIMSVersion'] == ''
              variables:
              - AIMSVersion
            - name: Create deployment ticket
              type: xlrelease.SequentialGroup
              tasks:
              - name: 'Create Task: Deploy AIMS to <Stage>'
                type: jira.CreateIssueJson
                jiraServer: ITMP-JIRA
                jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n\
                  \          \"key\": \"${JiraProjectKey}\"\n       },\n       \"\
                  summary\": \"Deploy AIMS to ${environment}\",\n       \"description\"\
                  : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n\
                  \       }, \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
                  \n   }\n}"
                variableMapping:
                  pythonScript.issueId: ${AIMSJiraIssueId}
              - name: Assign Deployment ticket to the responsible team
                type: xlrelease.Task
            - name: Deploy and check
              type: xlrelease.SequentialGroup
              facets:
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  version: ${AIMSVersion}
                  environmentId: ${environment}
                application: AIMS
              tasks:
              - name: Deploy AIMS
                type: xlrelease.Task
                facets:
                - type: udm.DeploymentTaskFacet
                  variableMapping:
                    version: ${AIMSVersion}
                    environmentId: ${environment}
                  application: AIMS
              - name: Perform IsAlive checks
                type: xlrelease.Task
            - name: Verify IsAlive checks
              type: xlrelease.GateTask
            - name: Add IsAlive check results to ticket
              type: xlrelease.Task
            - name: Wait for AIMS deployment ticket to be closed
              type: jira.CheckIssue
              jiraServer: ITMP-JIRA
              issueId: ${AIMSJiraIssueId}
              expectedStatusList:
              - Done
              pollInterval: 300
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: AIMSVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: environment
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: AIMSJiraIssueId
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.RDAJiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.RDAJiraProjectKey}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.RDAJiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: environmentSelect
            valueProvider:
              type: xlrelease.EnvironmentValueProvider
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_AIMS_Process_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folder1dd3e14cf95a42c8842aaee86cfac056/Releasee672fd5537d7417985729ee5f2ad3f3b
          riskProfile: Default risk profile
        - template: Deploy Filenet Process
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:12:34.525Z
          phases:
          - phase: Deploy Filenet
            tasks:
            - name: Set target environment from environment select
              type: xlrelease.ScriptTask
              script: releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            - name: Provide Filenet Version
              type: xlrelease.UserInputTask
              description: Please enter the required information below.
              precondition: releaseVariables['FilenetVersion'] == ''
            - name: Create Deployment ticket
              type: xlrelease.SequentialGroup
              tasks:
              - name: 'Create Task: Deploy Filenet to <Stage>'
                type: jira.CreateIssueJson
                jiraServer: ITMP-JIRA
                jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n\
                  \          \"key\": \"${JiraProjectKey}\"\n       },\n       \"\
                  summary\": \"Deploy Filenet to ${environment}\",\n       \"description\"\
                  : \"\",\n       \"issuetype\": {\n          \"name\": \"Task\"\n\
                  \       }, \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\
                  \n   }\n}"
                variableMapping:
                  pythonScript.issueId: ${FilenetJiraIssueId}
              - name: Assign Deployment ticket to the responsible team
                type: xlrelease.Task
              - name: Set Jira Filenet issue status to "In Analysis"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${FilenetJiraIssueId}
                newStatus: In Analysis
              - name: Set Jira Filenet issue status to "In Progress"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${FilenetJiraIssueId}
                newStatus: In Progress
            - name: Deploy and check
              type: xlrelease.SequentialGroup
              facets:
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  version: ${FilenetVersion}
                  environmentId: ${environment}
                application: Filenet
              tasks:
              - name: Deploy Filenet
                type: xlrelease.Task
                facets:
                - type: udm.DeploymentTaskFacet
                  variableMapping:
                    environmentId: ${environment}
                  version: ""
                  application: RadarLive
              - name: Perform IsAlive Checks
                type: xlrelease.Task
            - name: Add IsAlive results to ticket
              type: xlrelease.Task
            - name: Set Jira Filenet issue status to "Done"
              type: jira.UpdateIssue
              jiraServer: ITMP-JIRA
              issueId: ${FilenetJiraIssueId}
              newStatus: Done
            - name: Wait for Filenet deployment ticket to be closed
              type: jira.CheckIssue
              jiraServer: ITMP-JIRA
              issueId: ${FilenetJiraIssueId}
              expectedStatusList:
              - Done
              pollInterval: 300
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: environment
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: FilenetJiraIssueId
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: FilenetVersion
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.RDAJiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.RDAJiraProjectKey}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.RDAJiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: environmentSelect
            valueProvider:
              type: xlrelease.EnvironmentValueProvider
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_Filenet_Process_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folder1dd3e14cf95a42c8842aaee86cfac056/Releaseaa0432f52b3e403b8171f59c50001c77
          riskProfile: Default risk profile
        - template: Deploy Policy Mangement Process
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:12:38.069Z
          phases:
          - phase: Deploy Policy Management
            tasks:
            - name: Set target environment from environment select
              type: xlrelease.ScriptTask
              script: releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            - name: Provide PM Versions
              type: xlrelease.ParallelGroup
              tasks:
              - name: Provide PM FE Version
                type: xlrelease.UserInputTask
                description: Please enter the required information below.
                precondition: releaseVariables['PMFEVersion'] == ''
                variables:
                - PMFEVersion
              - name: Provide PM BFF Version
                type: xlrelease.UserInputTask
                description: Please enter the required information below.
                precondition: releaseVariables['PMBFFVersion'] == ''
                variables:
                - PMBFFVersion
            - name: Create Deployment Tickets
              type: xlrelease.ParallelGroup
              tasks:
              - name: 'Create Task: Deploy PM BFF to <Stage>'
                type: jira.CreateIssueJson
                jiraServer: ITMP-JIRA
                jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n\
                  \          \"key\": \"${JiraProjectKey}\"\n       },\n       \"\
                  summary\": \"Deploy Policy Management BFF to ${environment}\",\n\
                  \       \"description\": \"\",\n       \"issuetype\": {\n      \
                  \    \"name\": \"Task\"\n       }, \n       \"${JiraEpicLinkFieldId}\"\
                  \ : \"${JiraDeploymentEpic}\"\n   }\n}"
                variableMapping:
                  pythonScript.issueId: ${PMBFFJiraIssueId}
              - name: 'Create Task: Deploy PM FE to <Stage>'
                type: jira.CreateIssueJson
                jiraServer: ITMP-JIRA
                jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n\
                  \          \"key\": \"${JiraProjectKey}\"\n       },\n       \"\
                  summary\": \"Deploy Policy Management FE to ${environment}\",\n\
                  \       \"description\": \"\",\n       \"issuetype\": {\n      \
                  \    \"name\": \"Task\"\n       }, \n       \"${JiraEpicLinkFieldId}\"\
                  \ : \"${JiraDeploymentEpic}\"\n   }\n}"
                variableMapping:
                  pythonScript.issueId: ${PMFEJiraIssueId}
              - name: Assign Deployment ticket to the responsible team
                type: xlrelease.Task
              - name: Set Jira PM FE issue status to "In Analysis"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMFEJiraIssueId}
                newStatus: In Analysis
              - name: Set Jira PM BFF issue status to "In Analysis"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMBFFJiraIssueId}
                newStatus: In Analysis
              - name: Set Jira PM FE issue status to "In Progress"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMFEJiraIssueId}
                newStatus: In Progress
              - name: Set Jira PM BFF issue status to "In Progress"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMBFFJiraIssueId}
                newStatus: In Progress
            - name: Deploy and check
              type: xlrelease.SequentialGroup
              facets:
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  environmentId: ${environment}
                  version: ${PMBFFVersion}
                application: Policy Management BFF
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  version: ${PMFEVersion}
                  environmentId: ${environment}
                application: Policy Management FE
              tasks:
              - name: Deploy PM
                type: xlrelease.ParallelGroup
                tasks:
                - name: Deploy PM-BFF
                  type: xlrelease.Task
                - name: Deploy PM-FE
                  type: xlrelease.Task
              - name: Perform IsAlive checks
                type: xlrelease.Task
            - name: Add IsAlive check results to tickets
              type: xlrelease.Task
            - name: Close tickets
              type: xlrelease.ParallelGroup
              tasks:
              - name: Set Jira PM FE issue status to "Done"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMFEJiraIssueId}
                newStatus: Done
              - name: Set Jira PM BFF issue status to "Done"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMBFFJiraIssueId}
                newStatus: Done
            - name: Wait for tickets to be closed
              type: xlrelease.ParallelGroup
              tasks:
              - name: Wait for PM FE deployment ticket to be closed
                type: jira.CheckIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMFEJiraIssueId}
                expectedStatusList:
                - Done
                pollInterval: 300
              - name: Wait for PM BFF deployment ticket to be closed
                type: jira.CheckIssue
                jiraServer: ITMP-JIRA
                issueId: ${PMBFFJiraIssueId}
                expectedStatusList:
                - Done
                pollInterval: 300
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: PMFEVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: environment
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: PMBFFVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: PMFEJiraIssueId
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: PMBFFJiraIssueId
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.RDAJiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.RDAJiraProjectKey}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.RDAJiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: environmentSelect
            valueProvider:
              type: xlrelease.EnvironmentValueProvider
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_Policy_Mangement_Process_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folder1dd3e14cf95a42c8842aaee86cfac056/Releasee44b7d3b3f5a4753ba3b57d30e6f72ce
          riskProfile: Default risk profile
        - template: Deploy Policy Search Process
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:12:43.810Z
          phases:
          - phase: Deploy Policy Search
            tasks:
            - name: Set target environment from environment select
              type: xlrelease.ScriptTask
              script: releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            - name: Provide PS Versions
              type: xlrelease.ParallelGroup
              tasks:
              - name: Provide PS FE Version
                type: xlrelease.UserInputTask
                description: Please enter the required information below.
                precondition: releaseVariables['PSFEVersion'] == ''
                variables:
                - PSFEVersion
              - name: Provide PS BFF Version
                type: xlrelease.UserInputTask
                description: Please enter the required information below.
                precondition: releaseVariables['PSBFFVersion'] == ''
                variables:
                - PSBFFVersion
            - name: Create Deployment Tickets
              type: xlrelease.ParallelGroup
              tasks:
              - name: 'Create Task: Deploy PS BFF to <Stage>'
                type: jira.CreateIssueJson
                jiraServer: ITMP-JIRA
                jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n\
                  \          \"key\": \"${JiraProjectKey}\"\n       },\n       \"\
                  summary\": \"Deploy Policy Search BFF to ${environment}\",\n   \
                  \    \"description\": \"\",\n       \"issuetype\": {\n         \
                  \ \"name\": \"Task\"\n       }, \n       \"${JiraEpicLinkFieldId}\"\
                  \ : \"${JiraDeploymentEpic}\"\n   }\n}"
                variableMapping:
                  pythonScript.issueId: ${PSBFFJiraIssueId}
              - name: 'Create Task: Deploy PS FE to <Stage>'
                type: jira.CreateIssueJson
                jiraServer: ITMP-JIRA
                jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n\
                  \          \"key\": \"${JiraProjectKey}\"\n       },\n       \"\
                  summary\": \"Deploy Policy Search FE to ${environment}\",\n    \
                  \   \"description\": \"\",\n       \"issuetype\": {\n          \"\
                  name\": \"Task\"\n       }, \n       \"${JiraEpicLinkFieldId}\"\
                  \ : \"${JiraDeploymentEpic}\"\n   }\n}"
                variableMapping:
                  pythonScript.issueId: ${PSFEJiraIssueId}
              - name: Assign Deployment ticket to the responsible team
                type: xlrelease.Task
              - name: Set Jira PS FE issue status to "In Analysis"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSFEJiraIssueId}
                newStatus: In Analysis
              - name: Set Jira PS BFF issue status to "In Analysis"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSBFFJiraIssueId}
                newStatus: In Analysis
              - name: Set Jira PS FE issue status to "In Progress"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSFEJiraIssueId}
                newStatus: In Progress
              - name: Set Jira PS BFF issue status to "In Progress"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSBFFJiraIssueId}
                newStatus: In Progress
            - name: Deploy and check
              type: xlrelease.SequentialGroup
              facets:
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  environmentId: ${environment}
                  version: ${PSBFFVersion}
                application: Policy Search BFF
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  environmentId: ${environment}
                  version: ${PSFEVersion}
                application: Policy Search FE
              tasks:
              - name: Deploy PS
                type: xlrelease.ParallelGroup
                tasks:
                - name: Deploy PS-BFF
                  type: xlrelease.Task
                - name: Deploy PS-FE
                  type: xlrelease.Task
              - name: Perform IsAlive checks
                type: xlrelease.Task
            - name: Add IsAlive check results to tickets
              type: xlrelease.Task
            - name: Close tickets
              type: xlrelease.ParallelGroup
              tasks:
              - name: Set Jira PS FE issue status to "Done"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSFEJiraIssueId}
                newStatus: Done
              - name: Set Jira PS BFF issue status to "Done"
                type: jira.UpdateIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSBFFJiraIssueId}
                newStatus: Done
            - name: Wait for tickets to be closed
              type: xlrelease.ParallelGroup
              tasks:
              - name: Wait for PS FE deployment ticket to be closed
                type: jira.CheckIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSFEJiraIssueId}
                expectedStatusList:
                - Done
                pollInterval: 300
              - name: Wait for PS BFF deployment ticket to be closed
                type: jira.CheckIssue
                jiraServer: ITMP-JIRA
                issueId: ${PSBFFJiraIssueId}
                expectedStatusList:
                - Done
                pollInterval: 300
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: PSFEVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: environment
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: PSBFFVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: PSFEJiraIssueId
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: PSBFFJiraIssueId
            requiresValue: false
            showOnReleaseStart: false
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.RDAJiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.RDAJiraProjectKey}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.RDAJiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: environmentSelect
            valueProvider:
              type: xlrelease.EnvironmentValueProvider
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_Policy_Search_Process_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folder1dd3e14cf95a42c8842aaee86cfac056/Release9e0946638dc54c8c948c2454b45e1a64
          riskProfile: Default risk profile
      - directory: Manual
        children:
        - template: Deploy AIMS Process Manual
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:13:01.897Z
          phases:
          - phase: Deploy AIMS
            tasks:
            - name: Provide AIMS Version
              type: xlrelease.UserInputTask
              description: Please enter the required information below.
              precondition: releaseVariables['AIMSVersion'] == ''
              variables:
              - AIMSVersion
            - name: 'Create Task: Deploy AIMS to <Stage>'
              type: xlrelease.Task
            - name: Assign Deployment ticket to the responsible team
              type: xlrelease.Task
            - name: Deploy AIMS
              type: xlrelease.Task
              facets:
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  version: ${AIMSVersion}
                  environmentId: ${environment}
                application: AIMS
            - name: Perform IsAlive checks
              type: xlrelease.Task
            - name: Verify IsAlive checks
              type: xlrelease.GateTask
            - name: Add IsAlive check results to ticket
              type: xlrelease.Task
            - name: Wait for deployment ticket to be closed
              type: xlrelease.GateTask
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: AIMSVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: environment
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_AIMS_Process_Manual_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folderc1993be37f2b487aaabfcb6469825383/Release8fa859259d344d7890f8eaeb858a4d27
          riskProfile: Default risk profile
        - template: Deploy AOMS Process Manual
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:13:04.242Z
          phases:
          - phase: Deploy AOMS Process
            tasks:
            - name: Provide AOMS Version
              type: xlrelease.UserInputTask
              description: Please enter the required information below.
              precondition: releaseVariables['AOMSVersion'] == ''
              variables:
              - AOMSVersion
            - name: 'Create Task: Deploy AOMS to <Stage> and add DoD steps'
              type: xlrelease.Task
            - name: Assign Deployment ticket to the responsible team
              type: xlrelease.Task
            - name: Deploy AOMS
              type: xlrelease.Task
              facets:
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  environmentId: ${environment}
                  version: ${AOMSVersion}
                application: AOMS
            - name: Import Thunderhead  and set up project\\\/batch config ID
              type: xlrelease.Task
            - name: Import AOMS license
              type: xlrelease.Task
            - name: Perform IsAlive checks
              type: xlrelease.Task
            - name: Verify IsAlive checks
              type: xlrelease.GateTask
            - name: Add IsAlive checks results to ticket
              type: xlrelease.Task
            - name: Wait for deployment ticket to be closed
              type: xlrelease.GateTask
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: AOMSVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: environment
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_AOMS_Process_Manual_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folderc1993be37f2b487aaabfcb6469825383/Releaseb5a7e2cd1d3e4c64902998dce7ab0773
          riskProfile: Default risk profile
        - template: Deploy RadarLive Process Manual
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:13:26.481Z
          phases:
          - phase: Deploy RadarLive
            tasks:
            - name: Provide RadarLive Version
              type: xlrelease.UserInputTask
              description: Please enter the required information below.
              precondition: releaseVariables['RadarLiveVersion'] == ''
              variables:
              - RadarLiveVersion
            - name: 'Create Task: Deploy RadarLive to <Stage>'
              type: xlrelease.Task
            - name: Assign Deployment ticket to the responsible team
              type: xlrelease.Task
            - name: Deploy RadarLive
              type: xlrelease.Task
              facets:
              - type: udm.DeploymentTaskFacet
                variableMapping:
                  environmentId: ${environment}
                  version: ${RadarLiveVersion}
                application: RadarLive
            - name: Perform IsAlive Checks
              type: xlrelease.Task
            - name: Verify IsAlive Checks
              type: xlrelease.GateTask
            - name: Add IsAlive results to ticket
              type: xlrelease.Task
            - name: Wait for deployment ticket to be closed
              type: xlrelease.GateTask
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: RadarLiveVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: environment
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_RadarLive_Process_Manual_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folderc1993be37f2b487aaabfcb6469825383/Release7ee18d097248426fa186850068806134
          riskProfile: Default risk profile
        - template: Deploy SME Process Manual
          scheduledStartDate: 2020-05-11T07:00:00Z
          dueDate: 2020-06-16T16:13:28.523Z
          phases:
          - phase: Deploy SME
            tasks:
            - name: Provide SME Versions
              type: xlrelease.ParallelGroup
              tasks:
              - name: Provide SME FE Version
                type: xlrelease.UserInputTask
                precondition: releaseVariables['SMEFEVersion'] == ''
                variables:
                - SMEFEVersion
              - name: Provide SME BFF Version
                type: xlrelease.UserInputTask
                precondition: releaseVariables['SMEBFFVersion'] == ''
                variables:
                - SMEBFFVersion
            - name: Create Deployment Tickets
              type: xlrelease.ParallelGroup
              tasks:
              - name: 'Create Task: Deploy SME BFF to <Stage>'
                type: xlrelease.Task
              - name: 'Create Task: Deploy SME FE to <Stage>'
                type: xlrelease.Task
              - name: 'Create Task: Deploy SME Config to <Stage>'
                type: xlrelease.Task
            - name: Assign Deployment ticket to the responsible team
              type: xlrelease.Task
            - name: Deploy SME
              type: xlrelease.ParallelGroup
              tasks:
              - name: Deploy SME FE
                type: xlrelease.Task
                facets:
                - type: udm.DeploymentTaskFacet
                  variableMapping:
                    environmentId: ${environment}
                    version: ${SMEFEVersion}
                  application: '[GDF] SME FE'
              - name: Deploy SME BFF
                type: xlrelease.Task
                facets:
                - type: udm.DeploymentTaskFacet
                  variableMapping:
                    version: ${SMEBFFVersion}
                    environmentId: ${environment}
                  application: '[GDF] SME BFF'
            - name: Perform IsAlive Checks
              type: xlrelease.Task
            - name: Verify IsAlive Checks
              type: xlrelease.GateTask
            - name: Add IsAlive check results to tickets
              type: xlrelease.Task
            - name: Wait for deployment tickets to be closed
              type: xlrelease.GateTask
            color: '#0079BC'
          variables:
          - type: xlrelease.StringVariable
            key: environment
          - type: xlrelease.StringVariable
            key: SMEFEVersion
            requiresValue: false
          - type: xlrelease.StringVariable
            key: SMEBFFVersion
            requiresValue: false
          scriptUsername: admin
          scriptUserPassword: !value "xlrelease_Release_Deploy_SME_Process_Manual_scriptUserPassword"
          extensions:
          - name: Dashboard
            type: xlrelease.Dashboard
            owner: admin
            tiles:
            - name: Release progress
              type: xlrelease.ReleaseProgressTile
            - name: Release summary
              type: xlrelease.ReleaseSummaryTile
            - name: Resource usage
              type: xlrelease.ResourceUsageTile
            - name: Release timeline
              type: xlrelease.TimelineTile
            - name: Release health
              type: xlrelease.ReleaseHealthTile
            parentTemplate: Applications/Foldere090cddd013d408e9c58d82e7aae95f0/Folder846dd75bd74b4aeaaf363062d42d9994/Folder1e5d623b8bc4406c9006499a389ef4c9/Folderc1993be37f2b487aaabfcb6469825383/Release80714bf58e2c4e23ac2500345f96241a
          riskProfile: Default risk profile
      - template: Restart XLR
        scheduledStartDate: 2021-03-03T08:00:00Z
        dueDate: 2021-10-12T12:35:38.145Z
        phases:
        - phase: Restart
          tasks:
          - name: Restart XLR
            type: xlrelease.CreateReleaseTask
            newReleaseTitle: Restart XLR
            templateVariables:
            - type: xlrelease.StringVariable
              key: APPLICATION
              value: xl-release
            - type: xlrelease.StringVariable
              key: CLUSTER
              value: aws-ec1
            - type: xlrelease.StringVariable
              key: OE
              value: it-master-platform
            - type: xlrelease.StringVariable
              key: STAGE
              value: temp
            riskProfile: Default risk profile
            template: ITMP Global/Deploy/Restart
            folder: ITMP Global/Deploy
          color: '#0079BC'
        scriptUsername: admin
        scriptUserPassword: !value "xlrelease_Release_Restart_XLR_scriptUserPassword"
        riskProfile: Default risk profile
      - name: daily restart
        type: time.Schedule
        releaseTitle: Reboot XLR
        template: Restart XLR
        periodicity: 0 0 1 * * *
        triggerTime: 2022-02-01T01:00:00.312000
    - directory: Services
    - template: Airwave Deploy
      scheduledStartDate: 2021-10-29T03:30:00Z
      phases:
      - phase: Airwave Dpleoy
        tasks:
        - name: Airwave Deploy
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Airwave Deploy to stages
          templateVariables:
          - type: xlrelease.StringVariable
            key: FACADE_VERSION
            description: Final Combined docker image version of Airwave + Facade
            value: ${FACADE_VERSION}
          - type: xlrelease.StringVariable
            key: CLUSTER
            inherited: true
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: OE
            value: it-master-platform
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${JiraProjectKey}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${JiraImplementationLayerFieldId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy AIRWAVE global
          folder: ITMP Product/Deploy
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        requiresValue: false
        showOnReleaseStart: false
        value: ${folder.JiraDeploymentEpic}
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        requiresValue: false
        showOnReleaseStart: false
        value: ${folder.JiraEpicLinkFieldId}
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        requiresValue: false
        showOnReleaseStart: false
        value: ${folder.JiraProjectKey}
      - type: xlrelease.StringVariable
        key: JiraAssignedTeamFieldId
        requiresValue: false
        showOnReleaseStart: false
        value: ${folder.JiraAssignedTeamFieldId}
      - type: xlrelease.StringVariable
        key: JiraImplementationLayerFieldId
        requiresValue: false
        showOnReleaseStart: false
        value: ${folder.JiraImplementationLayerFieldId}
      - type: xlrelease.StringVariable
        key: FACADE_VERSION
      - type: xlrelease.StringVariable
        key: CLUSTER
        requiresValue: false
        showOnReleaseStart: false
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
        requiresValue: false
        showOnReleaseStart: false
        value: it-master-platform
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        requiresValue: false
        showOnReleaseStart: false
        value: itmp
      - type: xlrelease.StringVariable
        key: STAGE
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - dev
          - test
          - demo
          - upgrade
          - coreupgrade
          - perf
        value: dev
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Airwave_Deploy_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy AIMS Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:22Z
      phases:
      - phase: Deploy AIMS
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy AIMS
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy AIMS Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: AIMSVersion
            value: ${AIMSVersion}
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: AIMSVERSION
            value: ${AIMSVERSION}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          createdReleaseId: ${AIMSDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy AIMS global
          folder: ITMP Global/Deploy
        - name: Wait for AIMS deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${AIMSDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of AIMS Version in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: AIMSDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: AIMSVersion
      - type: xlrelease.StringVariable
        key: AIMSVERSION
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_AIMS_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy AIRWAVE Product (2)
      scheduledStartDate: 2021-08-09T03:30:00Z
      dueDate: 2021-10-12T12:34:35Z
      phases:
      - phase: Deploy Airwave
        tasks:
        - name: Deploy Airwave
          type: xlrelease.CreateReleaseTask
          scheduledStartDate: 2021-08-09T03:30:00Z
          newReleaseTitle: Deploy AIRWAVE product
          templateVariables:
          - type: xlrelease.StringVariable
            key: FACADE_VERSION
            requiresValue: false
            description: Final Combined docker image version of Airwave + Facade
            value: ${FACADE_VERSION}
          - type: xlrelease.StringVariable
            key: CLUSTER
            inherited: true
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          createdReleaseId: ${airwavedeployID}
          template: ITMP Global/Deploy/Deploy AIRWAVE global
          folder: ITMP Product/Deploy/Frontend
        - name: Wait for Completion
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${airwavedeployID}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: FACADE_VERSION
      - type: xlrelease.StringVariable
        key: STAGE
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - dev
          - test
          - demo
      - type: xlrelease.StringVariable
        key: JiraPassword
        requiresValue: false
        showOnReleaseStart: false
        value: ${folder.JiraPassword}
      - type: xlrelease.StringVariable
        key: airwavedeployID
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_AIRWAVE_Product__2__scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy AOMS Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:36.665Z
      phases:
      - phase: Deploy AOMS
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy AOMS
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy AOMS ${AOMSVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: AOMSVersion
            inherited: true
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            inherited: true
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            inherited: true
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            inherited: true
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: CLUSTER
            inherited: true
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: environmentSelect
            inherited: true
          createdReleaseId: ${AOMSDeplId}
          riskProfile: Default risk profile
          template: archive/Deploy AOMS global
          folder: ITMP Product/Deploy/Frontend
        - name: Wait for AOMS deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${AOMSDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of AOMS ${AOMSVersion} in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: AOMSVersion
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: AOMSDeplId
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_AOMS_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CHR Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:39.349Z
      phases:
      - phase: Deploy CISL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy CHR
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[13].value: ${folder.JiraPassword}
          newReleaseTitle: Deploy CHR ${version} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            description: Value should come from a predefined folder variable
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            description: Value should come from a predefined folder variable
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            description: Stage to which to deploy. Value should be set through the
              environment listbox
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            description: Value should come from a predefined folder variable
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
              | aws-ase2 = Sydney | ap2 = On-Premise Australia
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: version
            description: Application version to be deployed
            value: ${version}
          - type: xlrelease.StringVariable
            key: customercode
            description: e.g. bga, bgb, bgc, bmp...
            value: bmp
          - type: xlrelease.StringVariable
            key: jiraAssignedTeam
            description: Team in Jira to which this ticket needs to be assigned to
            value: ITMP-OPS-FE
          - type: xlrelease.StringVariable
            key: JiraImplementationLayer
            description: Implementation Layer (corresponding Jira values)
            value: ${folder.JiraImplementationLayer}
          - type: xlrelease.StringVariable
            key: JiraUsername
            requiresValue: false
            value: ${folder.jiraUsername}
          - type: xlrelease.PasswordStringVariable
            key: JiraPassword
            requiresValue: false
          createdReleaseId: ${CHRDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy CHR global
          folder: ITMP Global/Deploy
        - name: Wait for CHR deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${CHRDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: version
      - type: xlrelease.StringVariable
        key: CHRDeplId
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CHR_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CHS Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:41.517Z
      phases:
      - phase: Deploy CISL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy CHS
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy CHS ${CHSFEVersion} and or ${CHSBFFVersion} to ${folder.OE}
            ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            description: Value should come from a predefined folder variable
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            description: Value should come from a predefined folder variable
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            description: Stage to which to deploy. Value should be set through the
              environment listbox
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            description: Value should come from a predefined folder variable
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
              | aws-ase2 = Sydney | ap2 = On-Premise Australia
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: customercode
            description: e.g. bga, bgb, bgc, bmp...
            value: bmp
          - type: xlrelease.StringVariable
            key: jiraAssignedTeam
            description: Team in Jira to which this ticket needs to be assigned to
            value: ITMP-OPS-FE
          - type: xlrelease.StringVariable
            key: JiraImplementationLayer
            description: Implementation Layer (corresponding Jira values)
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraUsername
            requiresValue: false
            inherited: true
          - type: xlrelease.PasswordStringVariable
            key: JiraPassword
            requiresValue: false
            inherited: true
          - type: xlrelease.StringVariable
            key: CHSBFFVersion
            value: ${CHSBFFVersion}
          - type: xlrelease.StringVariable
            key: CHSFEVersion
            requiresValue: false
            value: ${CHSFEVersion}
          createdReleaseId: ${CHSDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy CHS global
          folder: ITMP Global/Deploy
        - name: Wait for CHS deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${CHSDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CHSBFFVersion
        description: You will need to provide both BFF anf FE version - this is a
          jenkins pipeline restriction
      - type: xlrelease.StringVariable
        key: CHSFEVersion
        description: You will need to provide both BFF anf FE version - this is a
          jenkins pipeline restriction
      - type: xlrelease.StringVariable
        key: CHSDeplId
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CHS_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CHS Product no dashboard
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:44.738Z
      phases:
      - phase: Deploy CISL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy CHS
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy CHS ${CHSFEVersion} and or ${CHSBFFVersion} to ${folder.OE}
            ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            description: Value should come from a predefined folder variable
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            description: Value should come from a predefined folder variable
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            description: Stage to which to deploy. Value should be set through the
              environment listbox
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            description: Value should come from a predefined folder variable
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
              | aws-ase2 = Sydney | ap2 = On-Premise Australia
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: customercode
            description: e.g. bga, bgb, bgc, bmp...
            value: bmp
          - type: xlrelease.StringVariable
            key: jiraAssignedTeam
            description: Team in Jira to which this ticket needs to be assigned to
            value: ITMP-OPS-FE
          - type: xlrelease.StringVariable
            key: JiraImplementationLayer
            description: Implementation Layer (corresponding Jira values)
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraUsername
            requiresValue: false
            inherited: true
          - type: xlrelease.PasswordStringVariable
            key: JiraPassword
            requiresValue: false
            inherited: true
          - type: xlrelease.StringVariable
            key: CHSBFFVersion
            value: ${CHSBFFVersion}
          - type: xlrelease.StringVariable
            key: CHSFEVersion
            requiresValue: false
            value: ${CHSFEVersion}
          createdReleaseId: ${CHSDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy CHS global
          folder: ITMP Global/Deploy
        - name: Wait for CHS deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${CHSDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CHSBFFVersion
        description: You will need to provide both BFF anf FE version - this is a
          jenkins pipeline restriction
      - type: xlrelease.StringVariable
        key: CHSFEVersion
        description: You will need to provide both BFF anf FE version - this is a
          jenkins pipeline restriction
      - type: xlrelease.StringVariable
        key: CHSDeplId
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CHS_Product_no_dashboard_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CISL Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:47.081Z
      phases:
      - phase: Deploy CISL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy CISL
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy CISL ${CISLVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CISLVersion
            requiresValue: false
            value: ${CISLVersion}
          - type: xlrelease.StringVariable
            key: CLUSTER
            inherited: true
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CONFIG_TYPE
            value: ${CONFIG_TYPE}
          createdReleaseId: ${CISLDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy CISL global
          folder: ITMP Global/Deploy
        - name: Wait for CISL deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${CISLDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: CISLVersion
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CISLDeplId
        showOnReleaseStart: false
      - type: xlrelease.BooleanVariable
        key: test
        requiresValue: false
        description: Check to trigger corresponding tests
        value: true
      - type: xlrelease.StringVariable
        key: testreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: testId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - reg
          - properties
        value: properties
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CISL_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy claims-task-routing Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:41Z
      phases:
      - phase: Deploy CISL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy claims-task-routing
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy claims-task-routing ${claims-task-routingFEVersion}
            and or ${claims-task-routingBFFVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            description: Value should come from a predefined folder variable
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            description: Value should come from a predefined folder variable
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            description: Stage to which to deploy. Value should be set through the
              environment listbox
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            description: Value should come from a predefined folder variable
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
              | aws-ase2 = Sydney | ap2 = On-Premise Australia
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: customercode
            description: e.g. bga, bgb, bgc, bmp...
            value: bmp
          - type: xlrelease.StringVariable
            key: jiraAssignedTeam
            description: Team in Jira to which this ticket needs to be assigned to
            value: ITMP-OPS-FE
          - type: xlrelease.StringVariable
            key: JiraImplementationLayer
            description: Implementation Layer (corresponding Jira values)
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraUsername
            requiresValue: false
            inherited: true
          - type: xlrelease.PasswordStringVariable
            key: JiraPassword
            requiresValue: false
            inherited: true
          - type: xlrelease.StringVariable
            key: claims-task-routingBFFVersion
            value: ${claims-task-routingBFFVersion}
          - type: xlrelease.StringVariable
            key: claims-task-routingFEVersion
            requiresValue: false
            value: ${claims-task-routingFEVersion}
          createdReleaseId: ${claims-task-routingDeplId}
          template: ITMP Global/Deploy/Deploy claims-task-routing global
          folder: ITMP Global/Deploy
        - name: Wait for claims-task-routing deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${claims-task-routingDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: claims-task-routingBFFVersion
        description: You will need to provide both BFF anf FE version - this is a
          jenkins pipeline restriction
      - type: xlrelease.StringVariable
        key: claims-task-routingFEVersion
        description: You will need to provide both BFF anf FE version - this is a
          jenkins pipeline restriction
      - type: xlrelease.StringVariable
        key: claims-task-routingDeplId
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_claims_task_routing_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Claims Tracker Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:22Z
      phases:
      - phase: Deploy Claims Tracker
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy Claims Tracker
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy Claims Tracker Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: INF
            value: ${INF}
          - type: xlrelease.StringVariable
            key: Version
            value: ${Version}
          createdReleaseId: ${Claims TrackerDeplId}
          template: ITMP Global/Deploy/Deploy Claims Tracker global
          folder: ITMP Global/Deploy
        - name: Wait for Claims Tracker deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${Claims TrackerDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of Claims Tracker Version in ${folder.OE} ${STAGE}\",\n\t\t\"\
            description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\
            \t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Claims TrackerDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
          - redis
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Claims_Tracker_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CLAMAV Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:52.754Z
      phases:
      - phase: Deploy CLAMAV
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy CLAMAV
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy CLAMAV ${CLAMAVVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLAMAVVersion
            requiresValue: false
            value: ${CLAMAVVersion}
          - type: xlrelease.StringVariable
            key: CLUSTER
            inherited: true
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: MPDI-8465
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CONFIG_TYPE
            value: ${CONFIG_TYPE}
          createdReleaseId: ${CLAMAVDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy CLAMAV global
          folder: ITMP Global/Deploy
        - name: Wait for CLAMAV deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${CLAMAVDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: CLAMAVVersion
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLAMAVDeplId
        showOnReleaseStart: false
      - type: xlrelease.BooleanVariable
        key: test
        requiresValue: false
        description: Check to trigger corresponding tests
        value: true
      - type: xlrelease.StringVariable
        key: testreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: testId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - reg
          - properties
        value: properties
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CLAMAV_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy CTR Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:39Z
      phases:
      - phase: Deploy CISL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy CTR
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy CTR ${CTRVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CTRVersion
            requiresValue: false
            value: ${CTRVersion}
          - type: xlrelease.StringVariable
            key: CLUSTER
            description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
              | aws-ase2 = Sydney | ap2 = On-Premise Australia
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            description: Value should come from a predefined folder variable
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            description: Value should come from a predefined folder variable
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            description: Value should come from a predefined folder variable
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            description: Stage to which to deploy. Value should be set through the
              environment listbox
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: ${CUSTOMER_CODE}
          createdReleaseId: ${CTRDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy CTR global
          folder: ITMP Global/Deploy
        - name: Wait for CTR deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${CTRDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CTRDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CTRVersion
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_CTR_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Customer Portal Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:20Z
      phases:
      - phase: Deploy Customer Portal
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy Customer Portal
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy Customer Portal Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: version
            value: ${Version}
          - type: xlrelease.StringVariable
            key: INF
            value: ${INF}
          createdReleaseId: ${Customer PortalDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy Customer Portal global
          folder: ITMP Global/Deploy
        - name: Wait for Customer Portal deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${Customer PortalDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of Customer Portal Version in ${folder.OE} ${STAGE}\",\n\t\t\"\
            description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\
            \t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Customer PortalDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - assets-bff
          - assets-epc
          - assets-managepayment
          - assets-mcomm
          - assets-mydata
          - vassets-payment
          - assets-renewal
          - my-data-fe
          - contracts-bff
          - contracts-fe
          - docview-bff
          - docview-fe
          - tokenhelper
          - dashboard-bff
          - dashboard-fe
          - claims-bff
          - claims-fe
          - services-on-contracts-bff
          - services-on-contracts-fe
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Customer_Portal_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Elastic Indexer Service Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:22Z
      phases:
      - phase: Deploy Elastic Indexer Service
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy Elastic Indexer Service
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy Elastic Indexer Service Version to ${folder.OE}
            ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: VERSION
            inherited: true
          createdReleaseId: ${Elastic Indexer ServiceDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy Elastic Indexer Service global
          folder: ITMP Global/Deploy
        - name: Wait for Elastic Indexer Service deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${Elastic Indexer ServiceDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of Elastic Indexer Service Version in ${folder.OE} ${STAGE}\"\
            ,\n\t\t\"description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"\
            Task\"\n\t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Elastic Indexer ServiceDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
          - redis
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Elastic_Indexer_Service_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Elastic Search Service Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:22Z
      phases:
      - phase: Deploy Elastic Search Service
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy Elastic Search Service
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy Elastic Search Service Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: VERSION_TAG
            value: ${VERSION_TAG}
          createdReleaseId: ${Elastic Search ServiceDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy Elastic Search Service global
          folder: ITMP Global/Deploy
        - name: Wait for Elastic Search Service deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${Elastic Search ServiceDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of Elastic Search Service Version in ${folder.OE} ${STAGE}\",\n\
            \t\t\"description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\
            \n\t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Elastic Search ServiceDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        requiresValue: false
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
          - redis
      - type: xlrelease.StringVariable
        key: VERSION_TAG
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Elastic_Search_Service_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy FNOL Product
      scheduledStartDate: 2020-10-12T07:00:00Z
      dueDate: 2021-10-12T12:34:57.630Z
      phases:
      - phase: Deploy FNOL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "demo"
        - name: Deploy FNOL-BFF
          type: xlrelease.CreateReleaseTask
          precondition: releaseVariables['FNOLBFFVersion'] != ""
          newReleaseTitle: Deploy FNOL BFF ${FNOLBFFVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: INF
            value: bff
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: FNOLVersion
            value: ${FNOLBFFVersion}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: aws-ec1
          createdReleaseId: ${FNOLBFFDeplId}
          riskProfile: Default risk profile
          folder: ITMP Global/Deploy
        - name: Deploy FNOL-FE
          type: xlrelease.CreateReleaseTask
          precondition: releaseVariables['FNOLFEVersion'] != ""
          newReleaseTitle: Deploy FNOL-FE ${FNOLFEVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: INF
            value: fe
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: FNOLVersion
            value: ${FNOLFEVersion}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: aws-ec1
          createdReleaseId: ${FNOLFEDeplId}
          riskProfile: Default risk profile
          folder: ITMP Global/Deploy
        - name: Wait for FNOL-BFF deployment
          type: xlrelease.GateTask
          precondition: releaseVariables['FNOLBFFVersion'] != ""
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${FNOLBFFDeplId}
        - name: Wait for FNOL-FE deployment
          type: xlrelease.GateTask
          precondition: releaseVariables['FNOLFEVersion'] != ""
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${FNOLFEDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"FNOL ${STAGE}\
            \ Sanity check\",\n\t\t\"description\": \"\",\n\t\t\"issuetype\": {\n\t\
            \t\t\"name\": \"Task\"\n\t\t},\n        \"${folder.JiraImplementationLayerFieldId}\"\
            \ : {\n            \"value\" : \"Country Layer\"\n             },\n\t\t\
            \"${folder.JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"QA\"\n\t\
            \t}\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: FNOLBFFDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FNOLFEDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: FNOLBFFVersion
      - type: xlrelease.StringVariable
        key: FNOLFEVersion
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_FNOL_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy GDF Asset Dynamic
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2021-10-12T12:35:00.388Z
      phases:
      - phase: Deploy ${app}
        tasks:
        - name: DEVOPS
          type: xlrelease.SequentialGroup
          tasks:
          - name: Set Stage, App and INF
            type: xlrelease.ScriptTask
            script: "releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title\n\
              releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()\n\nreleaseVariables['appShort']\
              \ = releaseVariables['app'].split('-')[0]\nreleaseVariables['INF'] =\
              \ releaseVariables['app'].split('-')[1]\nif releaseVariables['app']\
              \ == \"sme-backend-global\":\n    releaseVariables['INF'] = \"bff\"\n\
              \    \nif releaseVariables['app'] == \"fnol-expert-fe\":\n    releaseVariables['INF']\
              \ = \"expert-fe\"\nif releaseVariables['app'] == \"fnol-motor-retail-fe\"\
              :\n    releaseVariables['INF'] = \"motor-retail-fe\""
          - name: Provide ${app} Version
            type: xlrelease.UserInputTask
            precondition: releaseVariables['appVersion'] == ''
            variables:
            - appVersion
          - name: Deploy ${app}
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-APPS/job/${appShort}-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              STAGE=${STAGE}
              OE=${OE}
              INFRASTRUCTURE=${INF}
              VERSION=${appVersion}
              GIT_BRANCH=${configbranch}
            taskRecoverOp: SKIP_TASK
          - name: Set alive url
            type: xlrelease.ScriptTask
            script: |-
              if  releaseVariables['app'] == 'mo-bff' or releaseVariables['app'] == 'fnol-bff' or releaseVariables['app'] == 'sme-backend-global' or releaseVariables['app'] == 'claims-handler-bff':
                  releaseVariables['healthUrl'] = 'actuator/health'
          - name: Sleep to allow startup
            type: xlrelease.ScriptTask
            script: |-
              import time
              time.sleep(60)
          - name: Test alive url
            type: webhook.JsonWebhook
            URL: https://${app}-${folder.OE}-${STAGE}.apps.crp.ec1.aws.aztec.cloud.allianz/${healthUrl}
            taskFailureHandlerEnabled: true
            taskRecoverOp: SKIP_TASK
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: aws-ec1
      - type: xlrelease.StringVariable
        key: OE
        showOnReleaseStart: false
        value: ${folder.OE}
      - type: xlrelease.StringVariable
        key: appVersion
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: appShort
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: configbranch
        requiresValue: false
        description: branch from which to take the deployment configuration
        value: master
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: app
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - mo-fe
          - mo-bff
          - fnol-fe
          - fnol-bff
          - sme-fe
          - sme-backend-global
          - chs-fe
          - chs-bff
          - fnol-expert-fe
          - fnol-motor-retail-fe
      - type: xlrelease.StringVariable
        key: clusterurl
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: healthUrl
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_GDF_Asset_Dynamic_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy householdexpert Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:04.284Z
      phases:
      - phase: Deploy householdexpert
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy householdexpert
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy householdexpert Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: householdexpertVersion
            value: ${Version}
          - type: xlrelease.StringVariable
            key: inf
            value: ${INF}
          createdReleaseId: ${householdexpertDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy householdexpert global
          folder: ITMP Global/Deploy
        - name: Wait for householdexpert deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${householdexpertDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of householdexpert Version in ${folder.OE} ${STAGE}\",\n\t\t\"\
            description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\
            \t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: householdexpertDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_householdexpert_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Infinispan Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:47Z
      phases:
      - phase: Deploy Infinispan
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy Infinispan
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy Infinispan ${InfinispanVersion} to ${folder.OE}
            ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: InfinispanVersion
            requiresValue: false
            value: ${InfinispanVersion}
          - type: xlrelease.StringVariable
            key: CLUSTER
            inherited: true
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CONFIG_TYPE
            value: ${CONFIG_TYPE}
          createdReleaseId: ${InfinispanDeplId}
          template: ITMP Global/Deploy/Deploy Infinispan global
          folder: ITMP Global/Deploy
        - name: Wait for Infinispan deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${InfinispanDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: InfinispanVersion
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: InfinispanDeplId
        showOnReleaseStart: false
      - type: xlrelease.BooleanVariable
        key: test
        requiresValue: false
        description: Check to trigger corresponding tests
        value: true
      - type: xlrelease.StringVariable
        key: testreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: testId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - reg
          - properties
        value: properties
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Infinispan_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy midcorp-uwwb Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:06.668Z
      phases:
      - phase: Deploy midcorp-uwwb
        tasks:
        - name: Deploy midcorp-uwwb
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy midcorp-uwwb Version to ${folder.OE} STAGE1
          templateVariables:
          - type: xlrelease.StringVariable
            key: INF
            value: ${INF}
          - type: xlrelease.StringVariable
            key: Version
            value: ${Version}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            value: STAGE
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: AUTO_APPLY
            value: "true"
          createdReleaseId: ${midcorp-uwwbDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy midcorp-uwwb global
          folder: ITMP Global/Deploy
        - name: Wait for midcorp-uwwb deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${midcorp-uwwbDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of midcorp-uwwb Version in ${folder.OE} STAGE1\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: midcorp-uwwbDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
      - type: xlrelease.StringVariable
        key: Version
      - type: xlrelease.StringVariable
        key: STAGE
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - dev
          - test
        value: dev
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_midcorp_uwwb_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy MO Product
      scheduledStartDate: 2020-10-12T07:00:00Z
      dueDate: 2021-10-12T12:35:08.167Z
      phases:
      - phase: Deploy MO
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "demo"
        - name: Deploy MO-BFF
          type: xlrelease.CreateReleaseTask
          precondition: releaseVariables['MOBFFVersion'] != ""
          newReleaseTitle: Deploy MO BFF ${MOBFFVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: INF
            value: BFF
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${CLUSTER}
          - type: xlrelease.StringVariable
            key: MOVersion
            value: aws-ec1
          createdReleaseId: ${MOBFFDeplId}
          riskProfile: Default risk profile
          folder: ITMP Global/Deploy
        - name: Deploy MO-FE
          type: xlrelease.CreateReleaseTask
          precondition: releaseVariables['MOFEVersion'] != ""
          newReleaseTitle: Deploy MO-FE ${MOFEVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: INF
            value: FE
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${CLUSTER}
          - type: xlrelease.StringVariable
            key: MOVersion
            value: aws-ec1
          createdReleaseId: ${MOFEDeplId}
          riskProfile: Default risk profile
          folder: ITMP Global/Deploy
        - name: Wait for MO-BFF deployment
          type: xlrelease.GateTask
          precondition: releaseVariables['MOBFFVersion'] != ""
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${MOBFFDeplId}
        - name: Wait for MO-FE deployment
          type: xlrelease.GateTask
          precondition: releaseVariables['MOFEVersion'] != ""
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${MOFEDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"FNOL ${STAGE}\
            \ Sanity check\",\n\t\t\"description\": \"\",\n\t\t\"issuetype\": {\n\t\
            \t\t\"name\": \"Task\"\n\t\t},\n        \"${folder.JiraImplementationLayerFieldId}\"\
            \ : {\n            \"value\" : \"Country Layer\"\n             },\n\t\t\
            \"${folder.JiraAssignedTeamFieldId}\" : {\n\t\t\t\"value\" : \"QA\"\n\t\
            \t}\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTER
        value: ${folder.CLUSTER}
      - type: xlrelease.StringVariable
        key: MOBFFDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOFEDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MOBFFVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: MOFEVersion
        requiresValue: false
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_MO_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Motor-Expert Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:11.249Z
      phases:
      - phase: Deploy Motor-Expert
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy Motor-Expert
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy Motor-Expert Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            inherited: true
            value: ${global.UNITMAP}
          - type: xlrelease.StringVariable
            key: Motor-ExpertBFFFVersion
            value: ${Motor-ExpertBFFVersion}
          - type: xlrelease.StringVariable
            key: Motor-ExpertFEVersion
            value: ${Motor-ExpertFEVersion}
          createdReleaseId: ${Releaseid}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy Motor-Expert global
          folder: ITMP Global/Deploy
        - name: Wait for Motor-Expert deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${Releaseid}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of Motor-Expert Version in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Motor-ExpertFEVersion
      - type: xlrelease.StringVariable
        key: Motor-ExpertBFFVersion
      - type: xlrelease.StringVariable
        key: Releaseid
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Motor_Expert_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy MotorPolicyAdmin Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:13.529Z
      phases:
      - phase: Deploy MotorPolicyAdmin
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy MotorPolicyAdmin
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy MotorPolicyAdmin Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            inherited: true
            value: ${global.UNITMAP}
          - type: xlrelease.StringVariable
            key: Version
            value: ${Version}
          - type: xlrelease.StringVariable
            key: CHANNEL
            value: $[CHANNEL]
          createdReleaseId: ${MotorPolicyAdminDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy MotorPolicyAdmin global
          folder: ITMP Global/Deploy
        - name: Wait for MotorPolicyAdmin deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${MotorPolicyAdminDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of MotorPolicyAdmin Version in ${folder.OE} ${STAGE}\",\n\t\t\"\
            description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\
            \t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: MotorPolicyAdminDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Version
      - type: xlrelease.StringVariable
        key: CHANNEL
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - expert
          - retail
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_MotorPolicyAdmin_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy Motor-Retail Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:15.822Z
      phases:
      - phase: Deploy Motor-Retail
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy Motor-Retail
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy Motor-Retail Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            inherited: true
            value: ${global.UNITMAP}
          - type: xlrelease.StringVariable
            key: Motor-RetailVersion
            value: ${Version}
          - type: xlrelease.StringVariable
            key: inf
            value: ${INF}
          createdReleaseId: ${Motor-RetailDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy Motor-Retail global
          folder: ITMP Global/Deploy
        - name: Wait for Motor-Retail deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${Motor-RetailDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of Motor-Retail Version in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Motor-RetailDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_Motor_Retail_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy NBO Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:47Z
      phases:
      - phase: Deploy NBO
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy NBO
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy NBO ${NBOVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: NBOVersion
            requiresValue: false
            value: ${NBOVersion}
          - type: xlrelease.StringVariable
            key: CLUSTER
            inherited: true
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CONFIG_TYPE
            value: ${CONFIG_TYPE}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          createdReleaseId: ${NBODeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy NBO global
          folder: ITMP Global/Deploy
        - name: Wait for NBO deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${NBODeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: NBOVersion
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: NBODeplId
        showOnReleaseStart: false
      - type: xlrelease.BooleanVariable
        key: test
        requiresValue: false
        description: Check to trigger corresponding tests
        value: true
      - type: xlrelease.StringVariable
        key: testreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: testId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - reg
          - properties
        value: properties
      - type: xlrelease.StringVariable
        key: CUSTOMER_CODE
        requiresValue: false
        showOnReleaseStart: false
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_NBO_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-amendment Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:18.073Z
      phases:
      - phase: Deploy policy-amendment
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy policy-amendment
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy policy-amendment Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: policy-amendmentVersion
            value: ${Version}
          - type: xlrelease.StringVariable
            key: CHANNEL
            value: $(CHANNEL)
          createdReleaseId: ${policy-amendmentDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy policy-amendment global
          folder: ITMP Global/Deploy
        - name: Wait for policy-amendment deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${policy-amendmentDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of policy-amendment Version in ${folder.OE} ${STAGE}\",\n\t\t\"\
            description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\
            \t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: policy-amendmentDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: Version
      - type: xlrelease.StringVariable
        key: CHANNEL
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - expert
          - retail
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_amendment_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-flows Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:20.558Z
      phases:
      - phase: Deploy policy-flows
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy policy-flows
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy policy-flows Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: ${global.UNITMAP}
          - type: xlrelease.StringVariable
            key: version
            value: ${Version}
          - type: xlrelease.StringVariable
            key: INF
            value: ${INF}
          createdReleaseId: ${policy-flowsDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy policy-flows global
          folder: ITMP Global/Deploy
        - name: Wait for policy-flows deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${policy-flowsDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of policy-flows Version in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: policy-flowsDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_flows_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-inquiry Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:22Z
      phases:
      - phase: Deploy policy-inquiry
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy policy-inquiry
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy policy-inquiry Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: INF
            value: ${INF}
          - type: xlrelease.StringVariable
            key: Version
            value: ${Version}
          createdReleaseId: ${policy-inquiryDeplId}
          template: ITMP Global/Deploy/Deploy policy-inquiry global
          folder: ITMP Global/Deploy
        - name: Wait for policy-inquiry deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${policy-inquiryDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of policy-inquiry Version in ${folder.OE} ${STAGE}\",\n\t\t\"\
            description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\
            \t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: policy-inquiryDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_inquiry_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy policy-search Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:22.805Z
      phases:
      - phase: Deploy policy-search
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy policy-search
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy policy-search Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: INF
            value: ${INF}
          - type: xlrelease.StringVariable
            key: Version
            value: ${Version}
          createdReleaseId: ${policy-searchDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy policy-search global
          folder: ITMP Global/Deploy
        - name: Wait for policy-search deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${policy-searchDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of policy-search Version in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: policy-searchDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_policy_search_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy portfolio-mgmt Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:25.512Z
      phases:
      - phase: Deploy portfolio-mgmt
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy portfolio-mgmt
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy portfolio-mgmt Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: INF
            value: ${INF}
          - type: xlrelease.StringVariable
            key: Version
            value: ${Version}
          createdReleaseId: ${portfolio-mgmtDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy portfolio-mgmt global
          folder: ITMP Global/Deploy
        - name: Wait for portfolio-mgmt deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${portfolio-mgmtDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of portfolio-mgmt Version in ${folder.OE} ${STAGE}\",\n\t\t\"\
            description\": \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\
            \t\t},\n\t\t\"${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\"\
            ,\n        \"${folder.JiraImplementationLayerFieldId}\" : {\n        \
            \    \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: portfolio-mgmtDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INF
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - fe
          - bff
      - type: xlrelease.StringVariable
        key: Version
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_portfolio_mgmt_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy QandB Life Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:34:41Z
      phases:
      - phase: Deploy CISL
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy QandB Life
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy QandB Life ${INFRASTRUCTURE} ${VERSION} to ${folder.OE}
            ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            description: Value should come from a predefined folder variable
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            description: Value should come from a predefined folder variable
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            description: Stage to which to deploy. Value should be set through the
              environment listbox
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            description: Value should come from a predefined folder variable
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
              | aws-ase2 = Sydney | ap2 = On-Premise Australia
            value: aws-ec1
          - type: xlrelease.StringVariable
            key: jiraAssignedTeam
            description: Team in Jira to which this ticket needs to be assigned to
            value: ITMP-OPS-FE
          - type: xlrelease.StringVariable
            key: JiraImplementationLayer
            description: Implementation Layer (corresponding Jira values)
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraUsername
            requiresValue: false
            inherited: true
          - type: xlrelease.PasswordStringVariable
            key: JiraPassword
            requiresValue: false
            inherited: true
          - type: xlrelease.StringVariable
            key: VERSION
            value: ${VERSION}
          - type: xlrelease.StringVariable
            key: INFRASTRUCTURE
            value: ${INFRASTRUCTURE}
          createdReleaseId: ${QandB LifeDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy QandB Life global
          folder: ITMP Global/Deploy
        - name: Wait for QandB Life deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${QandB LifeDeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: dashboardreleaseid
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: QandB LifeDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: INFRASTRUCTURE
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - bff-retail
          - bff-expert
          - fe-retail
          - fe-expert
      - type: xlrelease.StringVariable
        key: VERSION
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_QandB_Life_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy RadarLive
      scheduledStartDate: 2020-05-11T07:00:00Z
      dueDate: 2021-10-12T12:35:27.718Z
      phases:
      - phase: Deploy RadarLive
        tasks:
        - name: Set target environment from Environment Selection
          type: xlrelease.ScriptTask
          script: releaseVariables['environment'] = environmentApi.getById(releaseVariables['environmentSelect']).title
        - name: Provide RadarLive Version
          type: xlrelease.UserInputTask
          description: Please enter the required information below.
          precondition: releaseVariables['RadarLiveVersion'] == ''
          variables:
          - RadarLiveVersion
        - name: Create Deployment ticket
          type: xlrelease.SequentialGroup
          tasks:
          - name: 'Create Task: Deploy RadarLive to STAGE'
            type: jira.CreateIssueJson
            jiraServer: ITMP-JIRA
            jsonObject: "{\n    \"fields\": {\n       \"project\":\n       {\n   \
              \       \"key\": \"${JiraProjectKey}\"\n       },\n       \"summary\"\
              : \"Deploy RadarLive to ${environment}\",\n       \"description\": \"\
              \",\n       \"issuetype\": {\n          \"name\": \"Task\"\n       },\
              \ \n       \"${JiraEpicLinkFieldId}\" : \"${JiraDeploymentEpic}\"\n\
              \   }\n}"
            variableMapping:
              pythonScript.issueId: ${RadarLiveJiraIssueId}
          - name: Set Jira RadarLive issue status to "In Analysis"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${RadarLiveJiraIssueId}
            newStatus: In Analysis
            comment: '[XLRelease] - set Status to "In Analysis"'
          - name: Set Jira RadarLive issue status to "In Progress"
            type: jira.UpdateIssue
            jiraServer: ITMP-JIRA
            issueId: ${RadarLiveJiraIssueId}
            newStatus: In Progress
            comment: '[XLRelease] - set Status to "In Progress"'
        - name: Deploy and check
          type: xlrelease.SequentialGroup
          tasks:
          - name: Map ENV to OE and STAGE
            type: xlrelease.ScriptTask
            script: |-
              responseoe = releaseVariables['environment'].split()[0]
              releaseVariables['OE'] = ${global.OEMAP}[responseoe]
              releaseVariables['STAGEOPS'] = releaseVariables['environment'].split()[1]
              releaseVariables['STAGEOPS'] = releaseVariables['STAGEOPS'].lower()
              releaseVariables['UNIT_NAME'] = ${global.UNITMAP}[releaseVariables['OE']]
          - name: Deploy Radarlive
            type: jenkins.Build
            jenkinsServer: Service Owner Jenkins global
            jobName: ITMP-RadarLive/job/radarlive-deploy
            jobParameters: |-
              CLUSTER=${CLUSTER}
              DB_TYPE=container
              STAGE=${STAGEOPS}
              OE=${OE}
              CUSTOMER_CODE=${UNIT_NAME}
              SMF_VERSION=4.5.1.94325.28
              SETTINGSMANAGER_VERSION=4.5.1.94325.17
              DPO_VERSION=4.5.1.94325.21
              SCHEDULEMANAGER_VERSION=4.5.1.94325.34
          - name: Build vars for URL
            type: xlrelease.ScriptTask
            script: |-
              releaseVariables['CLUSTERDOMAIN'] = releaseVariables['CLUSTER'].split('-')[1] + "." + releaseVariables['CLUSTER'].split('-')[0]
              if releaseVariables['OE'] == "it-master-platform":
                  releaseVariables['OEPREFIX'] = ''
              else:
                  releaseVariables['OEPREFIX'] = 'itmp-'
          - name: Test Radarlive Route
            type: webhook.JsonWebhook
            URL: https://radarlive-smf-${OEPREFIX}${OE}-${STAGEOPS}.apps.crp.${CLUSTERDOMAIN}.aztec.cloud.allianz
        - name: Set Jira RadarLive issue status to "Done"
          type: jira.UpdateIssue
          jiraServer: ITMP-JIRA
          issueId: ${RadarLiveJiraIssueId}
          newStatus: Done
          comment: '[XLRelease] - set Status to "Done"'
        - name: Wait for RadarLive deployment ticket to be closed
          type: jira.CheckIssue
          jiraServer: ITMP-JIRA
          issueId: ${RadarLiveJiraIssueId}
          expectedStatusList:
          - Done
          pollInterval: 300
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: RadarLiveVersion
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: environment
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: OE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: STAGEOPS
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: UNIT_NAME
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CLUSTER
      - type: xlrelease.StringVariable
        key: CLUSTERDOMAIN
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: OEPREFIX
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: RadarLiveJiraIssueId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: JiraDeploymentEpic
        value: ${folder.RDAJiraDeploymentEpic}
      - type: xlrelease.StringVariable
        key: JiraProjectKey
        value: ${folder.RDAJiraProjectKey}
      - type: xlrelease.StringVariable
        key: JiraEpicLinkFieldId
        value: ${folder.RDAJiraEpicLinkFieldId}
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_RadarLive_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy RAP Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:31.832Z
      phases:
      - phase: Deploy RAP
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy RAP
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy RAP ${RAPVersion} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: RAPVersion
            requiresValue: false
            value: ${RAPVersion}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CONFIG_TYPE
            value: ${CONFIG_TYPE}
          createdReleaseId: ${RAPDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy RAP global
          folder: ITMP Product/Deploy
        - name: Wait for RAP deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${RAPDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of RAP ${RAPVersion} in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: RAPVersion
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: RAPDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: stagingdashboard
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: CONFIG_TYPE
        description: select --> properties for 20.5 ; reg for 20.0
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - reg
          - properties
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_RAP_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy RSS Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:34.808Z
      phases:
      - phase: Deploy ${app}
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Map filebeat port
          type: xlrelease.ScriptTask
          script: "if releaseVariables['STAGE'] == \"dev\" or releaseVariables['STAGE']\
            \ == \"intake\":\n    releaseVariables['filebeatport'] = \"16110\"\n\n\
            if releaseVariables['STAGE'] == \"test\":\n    releaseVariables['filebeatport']\
            \ = \"16210\"\n    \nif releaseVariables['STAGE'] == \"demo\":\n    releaseVariables['filebeatport']\
            \ = \"16810\"\n    \nif releaseVariables['STAGE'] == \"hotfix\" or releaseVariables['STAGE']\
            \ == \"hotfix2\":\n    releaseVariables['filebeatport'] = \"16410\"\n\
            \    \nprint(releaseVariables['filebeatport'])"
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy ${app}
          type: xlrelease.CreateReleaseTask
          variableMapping:
            templateVariables[12].value: ${folder.JiraPassword}
          newReleaseTitle: Deploy ${app} ${version} to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            description: Value should come from a predefined folder variable
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: OE
            description: Value should come from a predefined folder variable
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: STAGE
            description: Stage to which to deploy. Value should be set through the
              environment listbox
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            description: Value should come from a predefined folder variable
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            description: Value should come from a predefined folder variable
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: CLUSTER
            description: aws-ec1 = Frankfurt | aws-ew3 = Paris | aws-ase1 = Singapore
              | aws-ase2 = Sydney | ap2 = On-Premise Australia
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: version
            description: Application version to be deployed
            value: ${version}
          - type: xlrelease.StringVariable
            key: jiraAssignedTeam
            description: Team in Jira to which this ticket needs to be assigned to
            value: ITMP-OPS-FE
          - type: xlrelease.StringVariable
            key: JiraImplementationLayer
            description: Implementation Layer (corresponding Jira values)
            value: ${folder.JiraImplementationLayer}
          - type: xlrelease.StringVariable
            key: JiraUsername
            requiresValue: false
            value: ${folder.jiraUsername}
          - type: xlrelease.PasswordStringVariable
            key: JiraPassword
            requiresValue: false
          - type: xlrelease.StringVariable
            key: filebeatport
            value: ${filebeatport}
          - type: xlrelease.StringVariable
            key: unitname
            value: itmp
          createdReleaseId: ${DeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy RSS global
          folder: ITMP Global/Deploy
        - name: Wait for ${app} deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${DeplId}
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: version
      - type: xlrelease.StringVariable
        key: DeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: app
        showOnReleaseStart: false
        value: RSS
      - type: xlrelease.StringVariable
        key: filebeatport
        showOnReleaseStart: false
        value: "16110"
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_RSS_Product_scriptUserPassword"
      riskProfile: Default risk profile
    - template: Deploy SPP Product
      scheduledStartDate: 2020-08-26T07:00:00Z
      dueDate: 2021-10-12T12:35:22Z
      phases:
      - phase: Deploy SPP
        tasks:
        - name: Map environment to stage
          type: xlrelease.ScriptTask
          script: |-
            releaseVariables['STAGE'] = environmentApi.getById(releaseVariables['environmentSelect']).title
            releaseVariables['STAGE'] = releaseVariables['STAGE'].lower()
        - name: Check smoke tests
          type: xlrelease.SequentialGroup
          precondition: releaseVariables['STAGE'] == "preprod"
          tasks:
          - name: Query for ticket
            type: jira.Query
            jiraServer: ITMP-JIRA
          - name: get ticket ID
            type: xlrelease.ScriptTask
          - name: check status of ticket
            type: jira.CheckIssue
            jiraServer: ITMP-JIRA
        - name: Deploy SPP
          type: xlrelease.CreateReleaseTask
          newReleaseTitle: Deploy SPP Version to ${folder.OE} ${STAGE}
          templateVariables:
          - type: xlrelease.StringVariable
            key: SPPVersion
            value: ${SPPVersion}
          - type: xlrelease.StringVariable
            key: CLUSTER
            value: ${folder.CLUSTER}
          - type: xlrelease.StringVariable
            key: OE
            value: ${folder.OE}
          - type: xlrelease.StringVariable
            key: JiraDeploymentEpic
            value: ${folder.JiraDeploymentEpic}
          - type: xlrelease.StringVariable
            key: JiraEpicLinkFieldId
            value: ${folder.JiraEpicLinkFieldId}
          - type: xlrelease.StringVariable
            key: JiraProjectKey
            value: ${folder.JiraProjectKey}
          - type: xlrelease.StringVariable
            key: STAGE
            value: ${STAGE}
          - type: xlrelease.StringVariable
            key: JiraAssignedTeamFieldId
            value: ${folder.JiraAssignedTeamFieldId}
          - type: xlrelease.StringVariable
            key: JiraImplementationLayerFieldId
            value: ${folder.JiraImplementationLayerFieldId}
          - type: xlrelease.StringVariable
            key: CUSTOMER_CODE
            value: bmp
          - type: xlrelease.StringVariable
            key: INFRASTRUCTURE
            value: ${INFRASTRUCTURE}
          createdReleaseId: ${SPPDeplId}
          riskProfile: Default risk profile
          template: ITMP Global/Deploy/Deploy SPP global
          folder: ITMP Global/Deploy
        - name: Wait for SPP deployment
          type: xlrelease.GateTask
          dependencies:
          - type: xlrelease.Dependency
            targetId: ${SPPDeplId}
        - name: Create smoke test task
          type: jira.CreateIssueJson
          jiraServer: ITMP-JIRA
          jsonObject: "{\n\t\"fields\": {\n\t\t\"project\":\n\t\t{\n\t\t\t\"key\"\
            : \"${folder.JiraProjectKey}\"\n\t\t},\n\t\t\"summary\": \"Perform smoke\
            \ tests of SPP Version in ${folder.OE} ${STAGE}\",\n\t\t\"description\"\
            : \"\",\n\t\t\"issuetype\": {\n\t\t\t\"name\": \"Task\"\n\t\t},\n\t\t\"\
            ${folder.JiraEpicLinkFieldId}\" : \"${folder.JiraDeploymentEpic}\",\n\
            \        \"${folder.JiraImplementationLayerFieldId}\" : {\n          \
            \  \"value\" : \"Country Layer\"\n             }\n\t}\n}"
          precondition: releaseVariables['STAGE'] == "test"
        color: '#0079BC'
      variables:
      - type: xlrelease.StringVariable
        key: environmentSelect
        valueProvider:
          type: xlrelease.EnvironmentValueProvider
      - type: xlrelease.StringVariable
        key: STAGE
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: SPPDeplId
        requiresValue: false
        showOnReleaseStart: false
      - type: xlrelease.StringVariable
        key: SPPVersion
      - type: xlrelease.StringVariable
        key: INFRASTRUCTURE
        valueProvider:
          type: xlrelease.ListOfStringValueProviderConfiguration
          values:
          - bff
          - fe
      scriptUsername: admin
      scriptUserPassword: !value "xlrelease_Release_Deploy_SPP_Product_scriptUserPassword"
      riskProfile: Default risk profile
